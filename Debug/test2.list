
test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003670  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080037b0  080037b0  000137b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003864  08003864  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003864  08003864  00013864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800386c  0800386c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800386c  0800386c  0001386c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003870  08003870  00013870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010b4  20000074  080038e8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001128  080038e8  00021128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011499  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026ac  00000000  00000000  00031536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  00033be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc8  00000000  00000000  00034a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171a4  00000000  00000000  00035860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f952  00000000  00000000  0004ca04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093341  00000000  00000000  0005c356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef697  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fe4  00000000  00000000  000ef6e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000074 	.word	0x20000074
 800015c:	00000000 	.word	0x00000000
 8000160:	08003798 	.word	0x08003798

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000078 	.word	0x20000078
 800017c:	08003798 	.word	0x08003798

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295
 8000190:	f04f 30ff 	movne.w	r0, #4294967295
 8000194:	f000 b976 	b.w	8000484 <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	9e08      	ldr	r6, [sp, #32]
 80001b6:	460d      	mov	r5, r1
 80001b8:	4604      	mov	r4, r0
 80001ba:	4688      	mov	r8, r1
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d14d      	bne.n	800025c <__udivmoddi4+0xac>
 80001c0:	428a      	cmp	r2, r1
 80001c2:	4694      	mov	ip, r2
 80001c4:	d968      	bls.n	8000298 <__udivmoddi4+0xe8>
 80001c6:	fab2 f282 	clz	r2, r2
 80001ca:	b152      	cbz	r2, 80001e2 <__udivmoddi4+0x32>
 80001cc:	fa01 f302 	lsl.w	r3, r1, r2
 80001d0:	f1c2 0120 	rsb	r1, r2, #32
 80001d4:	fa20 f101 	lsr.w	r1, r0, r1
 80001d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80001dc:	ea41 0803 	orr.w	r8, r1, r3
 80001e0:	4094      	lsls	r4, r2
 80001e2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e6:	fbb8 f7f1 	udiv	r7, r8, r1
 80001ea:	fa1f fe8c 	uxth.w	lr, ip
 80001ee:	fb01 8817 	mls	r8, r1, r7, r8
 80001f2:	fb07 f00e 	mul.w	r0, r7, lr
 80001f6:	0c23      	lsrs	r3, r4, #16
 80001f8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001fc:	4298      	cmp	r0, r3
 80001fe:	d90a      	bls.n	8000216 <__udivmoddi4+0x66>
 8000200:	eb1c 0303 	adds.w	r3, ip, r3
 8000204:	f107 35ff 	add.w	r5, r7, #4294967295
 8000208:	f080 811e 	bcs.w	8000448 <__udivmoddi4+0x298>
 800020c:	4298      	cmp	r0, r3
 800020e:	f240 811b 	bls.w	8000448 <__udivmoddi4+0x298>
 8000212:	3f02      	subs	r7, #2
 8000214:	4463      	add	r3, ip
 8000216:	1a1b      	subs	r3, r3, r0
 8000218:	fbb3 f0f1 	udiv	r0, r3, r1
 800021c:	fb01 3310 	mls	r3, r1, r0, r3
 8000220:	fb00 fe0e 	mul.w	lr, r0, lr
 8000224:	b2a4      	uxth	r4, r4
 8000226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800022a:	45a6      	cmp	lr, r4
 800022c:	d90a      	bls.n	8000244 <__udivmoddi4+0x94>
 800022e:	eb1c 0404 	adds.w	r4, ip, r4
 8000232:	f100 33ff 	add.w	r3, r0, #4294967295
 8000236:	f080 8109 	bcs.w	800044c <__udivmoddi4+0x29c>
 800023a:	45a6      	cmp	lr, r4
 800023c:	f240 8106 	bls.w	800044c <__udivmoddi4+0x29c>
 8000240:	4464      	add	r4, ip
 8000242:	3802      	subs	r0, #2
 8000244:	2100      	movs	r1, #0
 8000246:	eba4 040e 	sub.w	r4, r4, lr
 800024a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024e:	b11e      	cbz	r6, 8000258 <__udivmoddi4+0xa8>
 8000250:	2300      	movs	r3, #0
 8000252:	40d4      	lsrs	r4, r2
 8000254:	e9c6 4300 	strd	r4, r3, [r6]
 8000258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025c:	428b      	cmp	r3, r1
 800025e:	d908      	bls.n	8000272 <__udivmoddi4+0xc2>
 8000260:	2e00      	cmp	r6, #0
 8000262:	f000 80ee 	beq.w	8000442 <__udivmoddi4+0x292>
 8000266:	2100      	movs	r1, #0
 8000268:	e9c6 0500 	strd	r0, r5, [r6]
 800026c:	4608      	mov	r0, r1
 800026e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000272:	fab3 f183 	clz	r1, r3
 8000276:	2900      	cmp	r1, #0
 8000278:	d14a      	bne.n	8000310 <__udivmoddi4+0x160>
 800027a:	42ab      	cmp	r3, r5
 800027c:	d302      	bcc.n	8000284 <__udivmoddi4+0xd4>
 800027e:	4282      	cmp	r2, r0
 8000280:	f200 80fc 	bhi.w	800047c <__udivmoddi4+0x2cc>
 8000284:	1a84      	subs	r4, r0, r2
 8000286:	eb65 0303 	sbc.w	r3, r5, r3
 800028a:	2001      	movs	r0, #1
 800028c:	4698      	mov	r8, r3
 800028e:	2e00      	cmp	r6, #0
 8000290:	d0e2      	beq.n	8000258 <__udivmoddi4+0xa8>
 8000292:	e9c6 4800 	strd	r4, r8, [r6]
 8000296:	e7df      	b.n	8000258 <__udivmoddi4+0xa8>
 8000298:	b902      	cbnz	r2, 800029c <__udivmoddi4+0xec>
 800029a:	deff      	udf	#255	; 0xff
 800029c:	fab2 f282 	clz	r2, r2
 80002a0:	2a00      	cmp	r2, #0
 80002a2:	f040 8091 	bne.w	80003c8 <__udivmoddi4+0x218>
 80002a6:	eba1 000c 	sub.w	r0, r1, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002b0:	fa1f fe8c 	uxth.w	lr, ip
 80002b4:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b8:	fb07 0013 	mls	r0, r7, r3, r0
 80002bc:	0c25      	lsrs	r5, r4, #16
 80002be:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002c2:	fb0e f003 	mul.w	r0, lr, r3
 80002c6:	42a8      	cmp	r0, r5
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0x12c>
 80002ca:	eb1c 0505 	adds.w	r5, ip, r5
 80002ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0x12a>
 80002d4:	42a8      	cmp	r0, r5
 80002d6:	f200 80ce 	bhi.w	8000476 <__udivmoddi4+0x2c6>
 80002da:	4643      	mov	r3, r8
 80002dc:	1a2d      	subs	r5, r5, r0
 80002de:	fbb5 f0f7 	udiv	r0, r5, r7
 80002e2:	fb07 5510 	mls	r5, r7, r0, r5
 80002e6:	fb0e fe00 	mul.w	lr, lr, r0
 80002ea:	b2a4      	uxth	r4, r4
 80002ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002f0:	45a6      	cmp	lr, r4
 80002f2:	d908      	bls.n	8000306 <__udivmoddi4+0x156>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 35ff 	add.w	r5, r0, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x154>
 80002fe:	45a6      	cmp	lr, r4
 8000300:	f200 80b6 	bhi.w	8000470 <__udivmoddi4+0x2c0>
 8000304:	4628      	mov	r0, r5
 8000306:	eba4 040e 	sub.w	r4, r4, lr
 800030a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030e:	e79e      	b.n	800024e <__udivmoddi4+0x9e>
 8000310:	f1c1 0720 	rsb	r7, r1, #32
 8000314:	408b      	lsls	r3, r1
 8000316:	fa22 fc07 	lsr.w	ip, r2, r7
 800031a:	ea4c 0c03 	orr.w	ip, ip, r3
 800031e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fbba f8f9 	udiv	r8, sl, r9
 800032a:	fa20 f307 	lsr.w	r3, r0, r7
 800032e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000332:	408d      	lsls	r5, r1
 8000334:	fa1f fe8c 	uxth.w	lr, ip
 8000338:	431d      	orrs	r5, r3
 800033a:	fa00 f301 	lsl.w	r3, r0, r1
 800033e:	fb08 f00e 	mul.w	r0, r8, lr
 8000342:	0c2c      	lsrs	r4, r5, #16
 8000344:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000348:	42a0      	cmp	r0, r4
 800034a:	fa02 f201 	lsl.w	r2, r2, r1
 800034e:	d90b      	bls.n	8000368 <__udivmoddi4+0x1b8>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f108 3aff 	add.w	sl, r8, #4294967295
 8000358:	f080 8088 	bcs.w	800046c <__udivmoddi4+0x2bc>
 800035c:	42a0      	cmp	r0, r4
 800035e:	f240 8085 	bls.w	800046c <__udivmoddi4+0x2bc>
 8000362:	f1a8 0802 	sub.w	r8, r8, #2
 8000366:	4464      	add	r4, ip
 8000368:	1a24      	subs	r4, r4, r0
 800036a:	fbb4 f0f9 	udiv	r0, r4, r9
 800036e:	fb09 4410 	mls	r4, r9, r0, r4
 8000372:	fb00 fe0e 	mul.w	lr, r0, lr
 8000376:	b2ad      	uxth	r5, r5
 8000378:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800037c:	45a6      	cmp	lr, r4
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x1e2>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 35ff 	add.w	r5, r0, #4294967295
 8000388:	d26c      	bcs.n	8000464 <__udivmoddi4+0x2b4>
 800038a:	45a6      	cmp	lr, r4
 800038c:	d96a      	bls.n	8000464 <__udivmoddi4+0x2b4>
 800038e:	3802      	subs	r0, #2
 8000390:	4464      	add	r4, ip
 8000392:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000396:	fba0 9502 	umull	r9, r5, r0, r2
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	42ac      	cmp	r4, r5
 80003a0:	46c8      	mov	r8, r9
 80003a2:	46ae      	mov	lr, r5
 80003a4:	d356      	bcc.n	8000454 <__udivmoddi4+0x2a4>
 80003a6:	d053      	beq.n	8000450 <__udivmoddi4+0x2a0>
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d069      	beq.n	8000480 <__udivmoddi4+0x2d0>
 80003ac:	ebb3 0208 	subs.w	r2, r3, r8
 80003b0:	eb64 040e 	sbc.w	r4, r4, lr
 80003b4:	fa22 f301 	lsr.w	r3, r2, r1
 80003b8:	fa04 f707 	lsl.w	r7, r4, r7
 80003bc:	431f      	orrs	r7, r3
 80003be:	40cc      	lsrs	r4, r1
 80003c0:	e9c6 7400 	strd	r7, r4, [r6]
 80003c4:	2100      	movs	r1, #0
 80003c6:	e747      	b.n	8000258 <__udivmoddi4+0xa8>
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	f1c2 0120 	rsb	r1, r2, #32
 80003d0:	fa25 f301 	lsr.w	r3, r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa20 f101 	lsr.w	r1, r0, r1
 80003dc:	4095      	lsls	r5, r2
 80003de:	430d      	orrs	r5, r1
 80003e0:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e4:	fb07 3311 	mls	r3, r7, r1, r3
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	0c28      	lsrs	r0, r5, #16
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	fb01 f30e 	mul.w	r3, r1, lr
 80003f6:	4283      	cmp	r3, r0
 80003f8:	fa04 f402 	lsl.w	r4, r4, r2
 80003fc:	d908      	bls.n	8000410 <__udivmoddi4+0x260>
 80003fe:	eb1c 0000 	adds.w	r0, ip, r0
 8000402:	f101 38ff 	add.w	r8, r1, #4294967295
 8000406:	d22f      	bcs.n	8000468 <__udivmoddi4+0x2b8>
 8000408:	4283      	cmp	r3, r0
 800040a:	d92d      	bls.n	8000468 <__udivmoddi4+0x2b8>
 800040c:	3902      	subs	r1, #2
 800040e:	4460      	add	r0, ip
 8000410:	1ac0      	subs	r0, r0, r3
 8000412:	fbb0 f3f7 	udiv	r3, r0, r7
 8000416:	fb07 0013 	mls	r0, r7, r3, r0
 800041a:	b2ad      	uxth	r5, r5
 800041c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000420:	fb03 f00e 	mul.w	r0, r3, lr
 8000424:	42a8      	cmp	r0, r5
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x28a>
 8000428:	eb1c 0505 	adds.w	r5, ip, r5
 800042c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000430:	d216      	bcs.n	8000460 <__udivmoddi4+0x2b0>
 8000432:	42a8      	cmp	r0, r5
 8000434:	d914      	bls.n	8000460 <__udivmoddi4+0x2b0>
 8000436:	3b02      	subs	r3, #2
 8000438:	4465      	add	r5, ip
 800043a:	1a28      	subs	r0, r5, r0
 800043c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000440:	e738      	b.n	80002b4 <__udivmoddi4+0x104>
 8000442:	4631      	mov	r1, r6
 8000444:	4630      	mov	r0, r6
 8000446:	e707      	b.n	8000258 <__udivmoddi4+0xa8>
 8000448:	462f      	mov	r7, r5
 800044a:	e6e4      	b.n	8000216 <__udivmoddi4+0x66>
 800044c:	4618      	mov	r0, r3
 800044e:	e6f9      	b.n	8000244 <__udivmoddi4+0x94>
 8000450:	454b      	cmp	r3, r9
 8000452:	d2a9      	bcs.n	80003a8 <__udivmoddi4+0x1f8>
 8000454:	ebb9 0802 	subs.w	r8, r9, r2
 8000458:	eb65 0e0c 	sbc.w	lr, r5, ip
 800045c:	3801      	subs	r0, #1
 800045e:	e7a3      	b.n	80003a8 <__udivmoddi4+0x1f8>
 8000460:	4643      	mov	r3, r8
 8000462:	e7ea      	b.n	800043a <__udivmoddi4+0x28a>
 8000464:	4628      	mov	r0, r5
 8000466:	e794      	b.n	8000392 <__udivmoddi4+0x1e2>
 8000468:	4641      	mov	r1, r8
 800046a:	e7d1      	b.n	8000410 <__udivmoddi4+0x260>
 800046c:	46d0      	mov	r8, sl
 800046e:	e77b      	b.n	8000368 <__udivmoddi4+0x1b8>
 8000470:	4464      	add	r4, ip
 8000472:	3802      	subs	r0, #2
 8000474:	e747      	b.n	8000306 <__udivmoddi4+0x156>
 8000476:	3b02      	subs	r3, #2
 8000478:	4465      	add	r5, ip
 800047a:	e72f      	b.n	80002dc <__udivmoddi4+0x12c>
 800047c:	4608      	mov	r0, r1
 800047e:	e706      	b.n	800028e <__udivmoddi4+0xde>
 8000480:	4631      	mov	r1, r6
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0xa8>

08000484 <__aeabi_idiv0>:
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop

08000488 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000488:	b480      	push	{r7}
 800048a:	b085      	sub	sp, #20
 800048c:	af00      	add	r7, sp, #0
 800048e:	60f8      	str	r0, [r7, #12]
 8000490:	60b9      	str	r1, [r7, #8]
 8000492:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	4a06      	ldr	r2, [pc, #24]	; (80004b0 <vApplicationGetIdleTaskMemory+0x28>)
 8000498:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	4a05      	ldr	r2, [pc, #20]	; (80004b4 <vApplicationGetIdleTaskMemory+0x2c>)
 800049e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	2280      	movs	r2, #128	; 0x80
 80004a4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004a6:	bf00      	nop
 80004a8:	3714      	adds	r7, #20
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr
 80004b0:	20000090 	.word	0x20000090
 80004b4:	20000144 	.word	0x20000144

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b5b0      	push	{r4, r5, r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f000 fa56 	bl	800096e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f81d 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c6:	f000 f893 	bl	80005f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ca:	f000 f867 	bl	800059c <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80004ce:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <main+0x40>)
 80004d0:	1d3c      	adds	r4, r7, #4
 80004d2:	461d      	mov	r5, r3
 80004d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	2100      	movs	r1, #0
 80004e4:	4618      	mov	r0, r3
 80004e6:	f001 fe81 	bl	80021ec <osThreadCreate>
 80004ea:	4603      	mov	r3, r0
 80004ec:	4a03      	ldr	r2, [pc, #12]	; (80004fc <main+0x44>)
 80004ee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80004f0:	f001 fe75 	bl	80021de <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <main+0x3c>
 80004f6:	bf00      	nop
 80004f8:	080037bc 	.word	0x080037bc
 80004fc:	2000038c 	.word	0x2000038c

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b092      	sub	sp, #72	; 0x48
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0314 	add.w	r3, r7, #20
 800050a:	2234      	movs	r2, #52	; 0x34
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f003 f87c 	bl	800360c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	463b      	mov	r3, r7
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]
 8000520:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000522:	4b1d      	ldr	r3, [pc, #116]	; (8000598 <SystemClock_Config+0x98>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800052a:	4a1b      	ldr	r2, [pc, #108]	; (8000598 <SystemClock_Config+0x98>)
 800052c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000530:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000532:	2302      	movs	r3, #2
 8000534:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000536:	2301      	movs	r3, #1
 8000538:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800053a:	2310      	movs	r3, #16
 800053c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053e:	2302      	movs	r3, #2
 8000540:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000542:	2300      	movs	r3, #0
 8000544:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000546:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800054a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800054c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000550:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	4618      	mov	r0, r3
 8000558:	f000 fcc6 	bl	8000ee8 <HAL_RCC_OscConfig>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000562:	f000 f8c2 	bl	80006ea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000566:	230f      	movs	r3, #15
 8000568:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056a:	2303      	movs	r3, #3
 800056c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056e:	2300      	movs	r3, #0
 8000570:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000572:	2300      	movs	r3, #0
 8000574:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800057a:	463b      	mov	r3, r7
 800057c:	2101      	movs	r1, #1
 800057e:	4618      	mov	r0, r3
 8000580:	f000 ffe2 	bl	8001548 <HAL_RCC_ClockConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800058a:	f000 f8ae 	bl	80006ea <Error_Handler>
  }
}
 800058e:	bf00      	nop
 8000590:	3748      	adds	r7, #72	; 0x48
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40007000 	.word	0x40007000

0800059c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005a0:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <MX_USART2_UART_Init+0x4c>)
 80005a2:	4a12      	ldr	r2, [pc, #72]	; (80005ec <MX_USART2_UART_Init+0x50>)
 80005a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005a6:	4b10      	ldr	r3, [pc, #64]	; (80005e8 <MX_USART2_UART_Init+0x4c>)
 80005a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <MX_USART2_UART_Init+0x4c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005b4:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <MX_USART2_UART_Init+0x4c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ba:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <MX_USART2_UART_Init+0x4c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005c0:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <MX_USART2_UART_Init+0x4c>)
 80005c2:	220c      	movs	r2, #12
 80005c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005c6:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <MX_USART2_UART_Init+0x4c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <MX_USART2_UART_Init+0x4c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005d2:	4805      	ldr	r0, [pc, #20]	; (80005e8 <MX_USART2_UART_Init+0x4c>)
 80005d4:	f001 fcb8 	bl	8001f48 <HAL_UART_Init>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005de:	f000 f884 	bl	80006ea <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000344 	.word	0x20000344
 80005ec:	40004400 	.word	0x40004400

080005f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08a      	sub	sp, #40	; 0x28
 80005f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000606:	4b2a      	ldr	r3, [pc, #168]	; (80006b0 <MX_GPIO_Init+0xc0>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	4a29      	ldr	r2, [pc, #164]	; (80006b0 <MX_GPIO_Init+0xc0>)
 800060c:	f043 0304 	orr.w	r3, r3, #4
 8000610:	61d3      	str	r3, [r2, #28]
 8000612:	4b27      	ldr	r3, [pc, #156]	; (80006b0 <MX_GPIO_Init+0xc0>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	f003 0304 	and.w	r3, r3, #4
 800061a:	613b      	str	r3, [r7, #16]
 800061c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800061e:	4b24      	ldr	r3, [pc, #144]	; (80006b0 <MX_GPIO_Init+0xc0>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	4a23      	ldr	r2, [pc, #140]	; (80006b0 <MX_GPIO_Init+0xc0>)
 8000624:	f043 0320 	orr.w	r3, r3, #32
 8000628:	61d3      	str	r3, [r2, #28]
 800062a:	4b21      	ldr	r3, [pc, #132]	; (80006b0 <MX_GPIO_Init+0xc0>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	f003 0320 	and.w	r3, r3, #32
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	4b1e      	ldr	r3, [pc, #120]	; (80006b0 <MX_GPIO_Init+0xc0>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	4a1d      	ldr	r2, [pc, #116]	; (80006b0 <MX_GPIO_Init+0xc0>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	61d3      	str	r3, [r2, #28]
 8000642:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <MX_GPIO_Init+0xc0>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064e:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <MX_GPIO_Init+0xc0>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	4a17      	ldr	r2, [pc, #92]	; (80006b0 <MX_GPIO_Init+0xc0>)
 8000654:	f043 0302 	orr.w	r3, r3, #2
 8000658:	61d3      	str	r3, [r2, #28]
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <MX_GPIO_Init+0xc0>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	f003 0302 	and.w	r3, r3, #2
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	2120      	movs	r1, #32
 800066a:	4812      	ldr	r0, [pc, #72]	; (80006b4 <MX_GPIO_Init+0xc4>)
 800066c:	f000 fc24 	bl	8000eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000670:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000676:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800067a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	4619      	mov	r1, r3
 8000686:	480c      	ldr	r0, [pc, #48]	; (80006b8 <MX_GPIO_Init+0xc8>)
 8000688:	f000 fa86 	bl	8000b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800068c:	2320      	movs	r3, #32
 800068e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	2301      	movs	r3, #1
 8000692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	2300      	movs	r3, #0
 800069a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	4619      	mov	r1, r3
 80006a2:	4804      	ldr	r0, [pc, #16]	; (80006b4 <MX_GPIO_Init+0xc4>)
 80006a4:	f000 fa78 	bl	8000b98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006a8:	bf00      	nop
 80006aa:	3728      	adds	r7, #40	; 0x28
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40020000 	.word	0x40020000
 80006b8:	40020800 	.word	0x40020800

080006bc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f001 fddd 	bl	8002284 <osDelay>
 80006ca:	e7fb      	b.n	80006c4 <StartDefaultTask+0x8>

080006cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006dc:	d101      	bne.n	80006e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006de:	f000 f95f 	bl	80009a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ee:	b672      	cpsid	i
}
 80006f0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <Error_Handler+0x8>

080006f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <HAL_MspInit+0x64>)
 80006fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006fe:	4a16      	ldr	r2, [pc, #88]	; (8000758 <HAL_MspInit+0x64>)
 8000700:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000704:	6253      	str	r3, [r2, #36]	; 0x24
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <HAL_MspInit+0x64>)
 8000708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800070a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <HAL_MspInit+0x64>)
 8000714:	6a1b      	ldr	r3, [r3, #32]
 8000716:	4a10      	ldr	r2, [pc, #64]	; (8000758 <HAL_MspInit+0x64>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6213      	str	r3, [r2, #32]
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <HAL_MspInit+0x64>)
 8000720:	6a1b      	ldr	r3, [r3, #32]
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <HAL_MspInit+0x64>)
 800072c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800072e:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <HAL_MspInit+0x64>)
 8000730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000734:	6253      	str	r3, [r2, #36]	; 0x24
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <HAL_MspInit+0x64>)
 8000738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800073a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	210f      	movs	r1, #15
 8000746:	f06f 0001 	mvn.w	r0, #1
 800074a:	f000 f9fa 	bl	8000b42 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074e:	bf00      	nop
 8000750:	3710      	adds	r7, #16
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800

0800075c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	; 0x28
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a17      	ldr	r2, [pc, #92]	; (80007d8 <HAL_UART_MspInit+0x7c>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d127      	bne.n	80007ce <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800077e:	4b17      	ldr	r3, [pc, #92]	; (80007dc <HAL_UART_MspInit+0x80>)
 8000780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000782:	4a16      	ldr	r2, [pc, #88]	; (80007dc <HAL_UART_MspInit+0x80>)
 8000784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000788:	6253      	str	r3, [r2, #36]	; 0x24
 800078a:	4b14      	ldr	r3, [pc, #80]	; (80007dc <HAL_UART_MspInit+0x80>)
 800078c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800078e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <HAL_UART_MspInit+0x80>)
 8000798:	69db      	ldr	r3, [r3, #28]
 800079a:	4a10      	ldr	r2, [pc, #64]	; (80007dc <HAL_UART_MspInit+0x80>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	61d3      	str	r3, [r2, #28]
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <HAL_UART_MspInit+0x80>)
 80007a4:	69db      	ldr	r3, [r3, #28]
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007ae:	230c      	movs	r3, #12
 80007b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b2:	2302      	movs	r3, #2
 80007b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ba:	2303      	movs	r3, #3
 80007bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007be:	2307      	movs	r3, #7
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4619      	mov	r1, r3
 80007c8:	4805      	ldr	r0, [pc, #20]	; (80007e0 <HAL_UART_MspInit+0x84>)
 80007ca:	f000 f9e5 	bl	8000b98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007ce:	bf00      	nop
 80007d0:	3728      	adds	r7, #40	; 0x28
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40004400 	.word	0x40004400
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40020000 	.word	0x40020000

080007e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08e      	sub	sp, #56	; 0x38
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80007f0:	2300      	movs	r3, #0
 80007f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80007f4:	2300      	movs	r3, #0
 80007f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80007fa:	4b33      	ldr	r3, [pc, #204]	; (80008c8 <HAL_InitTick+0xe4>)
 80007fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007fe:	4a32      	ldr	r2, [pc, #200]	; (80008c8 <HAL_InitTick+0xe4>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6253      	str	r3, [r2, #36]	; 0x24
 8000806:	4b30      	ldr	r3, [pc, #192]	; (80008c8 <HAL_InitTick+0xe4>)
 8000808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000812:	f107 0210 	add.w	r2, r7, #16
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4611      	mov	r1, r2
 800081c:	4618      	mov	r0, r3
 800081e:	f001 f8f9 	bl	8001a14 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000822:	6a3b      	ldr	r3, [r7, #32]
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000828:	2b00      	cmp	r3, #0
 800082a:	d103      	bne.n	8000834 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800082c:	f001 f8ca 	bl	80019c4 <HAL_RCC_GetPCLK1Freq>
 8000830:	6378      	str	r0, [r7, #52]	; 0x34
 8000832:	e004      	b.n	800083e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000834:	f001 f8c6 	bl	80019c4 <HAL_RCC_GetPCLK1Freq>
 8000838:	4603      	mov	r3, r0
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800083e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000840:	4a22      	ldr	r2, [pc, #136]	; (80008cc <HAL_InitTick+0xe8>)
 8000842:	fba2 2303 	umull	r2, r3, r2, r3
 8000846:	0c9b      	lsrs	r3, r3, #18
 8000848:	3b01      	subs	r3, #1
 800084a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800084c:	4b20      	ldr	r3, [pc, #128]	; (80008d0 <HAL_InitTick+0xec>)
 800084e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000852:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000854:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <HAL_InitTick+0xec>)
 8000856:	f240 32e7 	movw	r2, #999	; 0x3e7
 800085a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800085c:	4a1c      	ldr	r2, [pc, #112]	; (80008d0 <HAL_InitTick+0xec>)
 800085e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000860:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000862:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <HAL_InitTick+0xec>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000868:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <HAL_InitTick+0xec>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 800086e:	4818      	ldr	r0, [pc, #96]	; (80008d0 <HAL_InitTick+0xec>)
 8000870:	f001 f960 	bl	8001b34 <HAL_TIM_Base_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800087a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800087e:	2b00      	cmp	r3, #0
 8000880:	d11b      	bne.n	80008ba <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000882:	4813      	ldr	r0, [pc, #76]	; (80008d0 <HAL_InitTick+0xec>)
 8000884:	f001 f99e 	bl	8001bc4 <HAL_TIM_Base_Start_IT>
 8000888:	4603      	mov	r3, r0
 800088a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800088e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000892:	2b00      	cmp	r3, #0
 8000894:	d111      	bne.n	80008ba <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000896:	201c      	movs	r0, #28
 8000898:	f000 f96f 	bl	8000b7a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2b0f      	cmp	r3, #15
 80008a0:	d808      	bhi.n	80008b4 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80008a2:	2200      	movs	r2, #0
 80008a4:	6879      	ldr	r1, [r7, #4]
 80008a6:	201c      	movs	r0, #28
 80008a8:	f000 f94b 	bl	8000b42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008ac:	4a09      	ldr	r2, [pc, #36]	; (80008d4 <HAL_InitTick+0xf0>)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	6013      	str	r3, [r2, #0]
 80008b2:	e002      	b.n	80008ba <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 80008b4:	2301      	movs	r3, #1
 80008b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80008ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3738      	adds	r7, #56	; 0x38
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800
 80008cc:	431bde83 	.word	0x431bde83
 80008d0:	20000390 	.word	0x20000390
 80008d4:	20000004 	.word	0x20000004

080008d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <NMI_Handler+0x4>

080008de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <HardFault_Handler+0x4>

080008e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <MemManage_Handler+0x4>

080008ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <BusFault_Handler+0x4>

080008f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <UsageFault_Handler+0x4>

080008f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
	...

08000904 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000908:	4802      	ldr	r0, [pc, #8]	; (8000914 <TIM2_IRQHandler+0x10>)
 800090a:	f001 f9ad 	bl	8001c68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000390 	.word	0x20000390

08000918 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr

08000924 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000924:	f7ff fff8 	bl	8000918 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000928:	480b      	ldr	r0, [pc, #44]	; (8000958 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800092a:	490c      	ldr	r1, [pc, #48]	; (800095c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800092c:	4a0c      	ldr	r2, [pc, #48]	; (8000960 <LoopFillZerobss+0x16>)
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000930:	e002      	b.n	8000938 <LoopCopyDataInit>

08000932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000936:	3304      	adds	r3, #4

08000938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800093c:	d3f9      	bcc.n	8000932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800093e:	4a09      	ldr	r2, [pc, #36]	; (8000964 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000940:	4c09      	ldr	r4, [pc, #36]	; (8000968 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000944:	e001      	b.n	800094a <LoopFillZerobss>

08000946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000948:	3204      	adds	r2, #4

0800094a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800094c:	d3fb      	bcc.n	8000946 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800094e:	f002 fe37 	bl	80035c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000952:	f7ff fdb1 	bl	80004b8 <main>
  bx lr
 8000956:	4770      	bx	lr
  ldr r0, =_sdata
 8000958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800095c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000960:	08003874 	.word	0x08003874
  ldr r2, =_sbss
 8000964:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000968:	20001128 	.word	0x20001128

0800096c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800096c:	e7fe      	b.n	800096c <ADC1_IRQHandler>

0800096e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b082      	sub	sp, #8
 8000972:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000974:	2300      	movs	r3, #0
 8000976:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000978:	2003      	movs	r0, #3
 800097a:	f000 f8d7 	bl	8000b2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800097e:	200f      	movs	r0, #15
 8000980:	f7ff ff30 	bl	80007e4 <HAL_InitTick>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d002      	beq.n	8000990 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800098a:	2301      	movs	r3, #1
 800098c:	71fb      	strb	r3, [r7, #7]
 800098e:	e001      	b.n	8000994 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000990:	f7ff feb0 	bl	80006f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000994:	79fb      	ldrb	r3, [r7, #7]
}
 8000996:	4618      	mov	r0, r3
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <HAL_IncTick+0x1c>)
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <HAL_IncTick+0x20>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4413      	add	r3, r2
 80009ae:	4a03      	ldr	r2, [pc, #12]	; (80009bc <HAL_IncTick+0x1c>)
 80009b0:	6013      	str	r3, [r2, #0]
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	200003d0 	.word	0x200003d0
 80009c0:	20000008 	.word	0x20000008

080009c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  return uwTick;
 80009c8:	4b02      	ldr	r3, [pc, #8]	; (80009d4 <HAL_GetTick+0x10>)
 80009ca:	681b      	ldr	r3, [r3, #0]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr
 80009d4:	200003d0 	.word	0x200003d0

080009d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <__NVIC_SetPriorityGrouping+0x44>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ee:	68ba      	ldr	r2, [r7, #8]
 80009f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009f4:	4013      	ands	r3, r2
 80009f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a0a:	4a04      	ldr	r2, [pc, #16]	; (8000a1c <__NVIC_SetPriorityGrouping+0x44>)
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	60d3      	str	r3, [r2, #12]
}
 8000a10:	bf00      	nop
 8000a12:	3714      	adds	r7, #20
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bc80      	pop	{r7}
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a24:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <__NVIC_GetPriorityGrouping+0x18>)
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	0a1b      	lsrs	r3, r3, #8
 8000a2a:	f003 0307 	and.w	r3, r3, #7
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	db0b      	blt.n	8000a66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	f003 021f 	and.w	r2, r3, #31
 8000a54:	4906      	ldr	r1, [pc, #24]	; (8000a70 <__NVIC_EnableIRQ+0x34>)
 8000a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5a:	095b      	lsrs	r3, r3, #5
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr
 8000a70:	e000e100 	.word	0xe000e100

08000a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	6039      	str	r1, [r7, #0]
 8000a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	db0a      	blt.n	8000a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	490c      	ldr	r1, [pc, #48]	; (8000ac0 <__NVIC_SetPriority+0x4c>)
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a92:	0112      	lsls	r2, r2, #4
 8000a94:	b2d2      	uxtb	r2, r2
 8000a96:	440b      	add	r3, r1
 8000a98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a9c:	e00a      	b.n	8000ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	4908      	ldr	r1, [pc, #32]	; (8000ac4 <__NVIC_SetPriority+0x50>)
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	f003 030f 	and.w	r3, r3, #15
 8000aaa:	3b04      	subs	r3, #4
 8000aac:	0112      	lsls	r2, r2, #4
 8000aae:	b2d2      	uxtb	r2, r2
 8000ab0:	440b      	add	r3, r1
 8000ab2:	761a      	strb	r2, [r3, #24]
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	e000e100 	.word	0xe000e100
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b089      	sub	sp, #36	; 0x24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f003 0307 	and.w	r3, r3, #7
 8000ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	f1c3 0307 	rsb	r3, r3, #7
 8000ae2:	2b04      	cmp	r3, #4
 8000ae4:	bf28      	it	cs
 8000ae6:	2304      	movcs	r3, #4
 8000ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	3304      	adds	r3, #4
 8000aee:	2b06      	cmp	r3, #6
 8000af0:	d902      	bls.n	8000af8 <NVIC_EncodePriority+0x30>
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3b03      	subs	r3, #3
 8000af6:	e000      	b.n	8000afa <NVIC_EncodePriority+0x32>
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000afc:	f04f 32ff 	mov.w	r2, #4294967295
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	43da      	mvns	r2, r3
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	401a      	ands	r2, r3
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b10:	f04f 31ff 	mov.w	r1, #4294967295
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1a:	43d9      	mvns	r1, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b20:	4313      	orrs	r3, r2
         );
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3724      	adds	r7, #36	; 0x24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr

08000b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff ff4f 	bl	80009d8 <__NVIC_SetPriorityGrouping>
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b086      	sub	sp, #24
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	4603      	mov	r3, r0
 8000b4a:	60b9      	str	r1, [r7, #8]
 8000b4c:	607a      	str	r2, [r7, #4]
 8000b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b54:	f7ff ff64 	bl	8000a20 <__NVIC_GetPriorityGrouping>
 8000b58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	68b9      	ldr	r1, [r7, #8]
 8000b5e:	6978      	ldr	r0, [r7, #20]
 8000b60:	f7ff ffb2 	bl	8000ac8 <NVIC_EncodePriority>
 8000b64:	4602      	mov	r2, r0
 8000b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b6a:	4611      	mov	r1, r2
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff ff81 	bl	8000a74 <__NVIC_SetPriority>
}
 8000b72:	bf00      	nop
 8000b74:	3718      	adds	r7, #24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b082      	sub	sp, #8
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	4603      	mov	r3, r0
 8000b82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ff57 	bl	8000a3c <__NVIC_EnableIRQ>
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b087      	sub	sp, #28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000bae:	e160      	b.n	8000e72 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	f000 8152 	beq.w	8000e6c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f003 0303 	and.w	r3, r3, #3
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d005      	beq.n	8000be0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	d130      	bne.n	8000c42 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	2203      	movs	r2, #3
 8000bec:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	68da      	ldr	r2, [r3, #12]
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000c16:	2201      	movs	r2, #1
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	4013      	ands	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	091b      	lsrs	r3, r3, #4
 8000c2c:	f003 0201 	and.w	r2, r3, #1
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f003 0303 	and.w	r3, r3, #3
 8000c4a:	2b03      	cmp	r3, #3
 8000c4c:	d017      	beq.n	8000c7e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	68db      	ldr	r3, [r3, #12]
 8000c52:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	2203      	movs	r2, #3
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	4013      	ands	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	689a      	ldr	r2, [r3, #8]
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f003 0303 	and.w	r3, r3, #3
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d123      	bne.n	8000cd2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	08da      	lsrs	r2, r3, #3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	3208      	adds	r2, #8
 8000c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c96:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	220f      	movs	r2, #15
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	4013      	ands	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	691a      	ldr	r2, [r3, #16]
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	f003 0307 	and.w	r3, r3, #7
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	08da      	lsrs	r2, r3, #3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3208      	adds	r2, #8
 8000ccc:	6939      	ldr	r1, [r7, #16]
 8000cce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	2203      	movs	r2, #3
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f003 0203 	and.w	r2, r3, #3
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f000 80ac 	beq.w	8000e6c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d14:	4b5e      	ldr	r3, [pc, #376]	; (8000e90 <HAL_GPIO_Init+0x2f8>)
 8000d16:	6a1b      	ldr	r3, [r3, #32]
 8000d18:	4a5d      	ldr	r2, [pc, #372]	; (8000e90 <HAL_GPIO_Init+0x2f8>)
 8000d1a:	f043 0301 	orr.w	r3, r3, #1
 8000d1e:	6213      	str	r3, [r2, #32]
 8000d20:	4b5b      	ldr	r3, [pc, #364]	; (8000e90 <HAL_GPIO_Init+0x2f8>)
 8000d22:	6a1b      	ldr	r3, [r3, #32]
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000d2c:	4a59      	ldr	r2, [pc, #356]	; (8000e94 <HAL_GPIO_Init+0x2fc>)
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	089b      	lsrs	r3, r3, #2
 8000d32:	3302      	adds	r3, #2
 8000d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d38:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	f003 0303 	and.w	r3, r3, #3
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	220f      	movs	r2, #15
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a51      	ldr	r2, [pc, #324]	; (8000e98 <HAL_GPIO_Init+0x300>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d025      	beq.n	8000da4 <HAL_GPIO_Init+0x20c>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a50      	ldr	r2, [pc, #320]	; (8000e9c <HAL_GPIO_Init+0x304>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d01f      	beq.n	8000da0 <HAL_GPIO_Init+0x208>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a4f      	ldr	r2, [pc, #316]	; (8000ea0 <HAL_GPIO_Init+0x308>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d019      	beq.n	8000d9c <HAL_GPIO_Init+0x204>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a4e      	ldr	r2, [pc, #312]	; (8000ea4 <HAL_GPIO_Init+0x30c>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d013      	beq.n	8000d98 <HAL_GPIO_Init+0x200>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a4d      	ldr	r2, [pc, #308]	; (8000ea8 <HAL_GPIO_Init+0x310>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d00d      	beq.n	8000d94 <HAL_GPIO_Init+0x1fc>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a4c      	ldr	r2, [pc, #304]	; (8000eac <HAL_GPIO_Init+0x314>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d007      	beq.n	8000d90 <HAL_GPIO_Init+0x1f8>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a4b      	ldr	r2, [pc, #300]	; (8000eb0 <HAL_GPIO_Init+0x318>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d101      	bne.n	8000d8c <HAL_GPIO_Init+0x1f4>
 8000d88:	2306      	movs	r3, #6
 8000d8a:	e00c      	b.n	8000da6 <HAL_GPIO_Init+0x20e>
 8000d8c:	2307      	movs	r3, #7
 8000d8e:	e00a      	b.n	8000da6 <HAL_GPIO_Init+0x20e>
 8000d90:	2305      	movs	r3, #5
 8000d92:	e008      	b.n	8000da6 <HAL_GPIO_Init+0x20e>
 8000d94:	2304      	movs	r3, #4
 8000d96:	e006      	b.n	8000da6 <HAL_GPIO_Init+0x20e>
 8000d98:	2303      	movs	r3, #3
 8000d9a:	e004      	b.n	8000da6 <HAL_GPIO_Init+0x20e>
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	e002      	b.n	8000da6 <HAL_GPIO_Init+0x20e>
 8000da0:	2301      	movs	r3, #1
 8000da2:	e000      	b.n	8000da6 <HAL_GPIO_Init+0x20e>
 8000da4:	2300      	movs	r3, #0
 8000da6:	697a      	ldr	r2, [r7, #20]
 8000da8:	f002 0203 	and.w	r2, r2, #3
 8000dac:	0092      	lsls	r2, r2, #2
 8000dae:	4093      	lsls	r3, r2
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000db6:	4937      	ldr	r1, [pc, #220]	; (8000e94 <HAL_GPIO_Init+0x2fc>)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	089b      	lsrs	r3, r3, #2
 8000dbc:	3302      	adds	r3, #2
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dc4:	4b3b      	ldr	r3, [pc, #236]	; (8000eb4 <HAL_GPIO_Init+0x31c>)
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d003      	beq.n	8000de8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000de8:	4a32      	ldr	r2, [pc, #200]	; (8000eb4 <HAL_GPIO_Init+0x31c>)
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dee:	4b31      	ldr	r3, [pc, #196]	; (8000eb4 <HAL_GPIO_Init+0x31c>)
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	43db      	mvns	r3, r3
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d003      	beq.n	8000e12 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e12:	4a28      	ldr	r2, [pc, #160]	; (8000eb4 <HAL_GPIO_Init+0x31c>)
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e18:	4b26      	ldr	r3, [pc, #152]	; (8000eb4 <HAL_GPIO_Init+0x31c>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	43db      	mvns	r3, r3
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4013      	ands	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d003      	beq.n	8000e3c <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e3c:	4a1d      	ldr	r2, [pc, #116]	; (8000eb4 <HAL_GPIO_Init+0x31c>)
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e42:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <HAL_GPIO_Init+0x31c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d003      	beq.n	8000e66 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e66:	4a13      	ldr	r2, [pc, #76]	; (8000eb4 <HAL_GPIO_Init+0x31c>)
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	fa22 f303 	lsr.w	r3, r2, r3
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	f47f ae97 	bne.w	8000bb0 <HAL_GPIO_Init+0x18>
  }
}
 8000e82:	bf00      	nop
 8000e84:	bf00      	nop
 8000e86:	371c      	adds	r7, #28
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bc80      	pop	{r7}
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40010000 	.word	0x40010000
 8000e98:	40020000 	.word	0x40020000
 8000e9c:	40020400 	.word	0x40020400
 8000ea0:	40020800 	.word	0x40020800
 8000ea4:	40020c00 	.word	0x40020c00
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	40021400 	.word	0x40021400
 8000eb0:	40021800 	.word	0x40021800
 8000eb4:	40010400 	.word	0x40010400

08000eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	807b      	strh	r3, [r7, #2]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ec8:	787b      	ldrb	r3, [r7, #1]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ece:	887a      	ldrh	r2, [r7, #2]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000ed4:	e003      	b.n	8000ede <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000ed6:	887b      	ldrh	r3, [r7, #2]
 8000ed8:	041a      	lsls	r2, r3, #16
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	619a      	str	r2, [r3, #24]
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr

08000ee8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d101      	bne.n	8000efa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e31d      	b.n	8001536 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000efa:	4b94      	ldr	r3, [pc, #592]	; (800114c <HAL_RCC_OscConfig+0x264>)
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	f003 030c 	and.w	r3, r3, #12
 8000f02:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f04:	4b91      	ldr	r3, [pc, #580]	; (800114c <HAL_RCC_OscConfig+0x264>)
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f0c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d07b      	beq.n	8001012 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	2b08      	cmp	r3, #8
 8000f1e:	d006      	beq.n	8000f2e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	2b0c      	cmp	r3, #12
 8000f24:	d10f      	bne.n	8000f46 <HAL_RCC_OscConfig+0x5e>
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f2c:	d10b      	bne.n	8000f46 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f2e:	4b87      	ldr	r3, [pc, #540]	; (800114c <HAL_RCC_OscConfig+0x264>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d06a      	beq.n	8001010 <HAL_RCC_OscConfig+0x128>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d166      	bne.n	8001010 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e2f7      	b.n	8001536 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d106      	bne.n	8000f5c <HAL_RCC_OscConfig+0x74>
 8000f4e:	4b7f      	ldr	r3, [pc, #508]	; (800114c <HAL_RCC_OscConfig+0x264>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a7e      	ldr	r2, [pc, #504]	; (800114c <HAL_RCC_OscConfig+0x264>)
 8000f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f58:	6013      	str	r3, [r2, #0]
 8000f5a:	e02d      	b.n	8000fb8 <HAL_RCC_OscConfig+0xd0>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d10c      	bne.n	8000f7e <HAL_RCC_OscConfig+0x96>
 8000f64:	4b79      	ldr	r3, [pc, #484]	; (800114c <HAL_RCC_OscConfig+0x264>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a78      	ldr	r2, [pc, #480]	; (800114c <HAL_RCC_OscConfig+0x264>)
 8000f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	4b76      	ldr	r3, [pc, #472]	; (800114c <HAL_RCC_OscConfig+0x264>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a75      	ldr	r2, [pc, #468]	; (800114c <HAL_RCC_OscConfig+0x264>)
 8000f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f7a:	6013      	str	r3, [r2, #0]
 8000f7c:	e01c      	b.n	8000fb8 <HAL_RCC_OscConfig+0xd0>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	2b05      	cmp	r3, #5
 8000f84:	d10c      	bne.n	8000fa0 <HAL_RCC_OscConfig+0xb8>
 8000f86:	4b71      	ldr	r3, [pc, #452]	; (800114c <HAL_RCC_OscConfig+0x264>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a70      	ldr	r2, [pc, #448]	; (800114c <HAL_RCC_OscConfig+0x264>)
 8000f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	4b6e      	ldr	r3, [pc, #440]	; (800114c <HAL_RCC_OscConfig+0x264>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a6d      	ldr	r2, [pc, #436]	; (800114c <HAL_RCC_OscConfig+0x264>)
 8000f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	e00b      	b.n	8000fb8 <HAL_RCC_OscConfig+0xd0>
 8000fa0:	4b6a      	ldr	r3, [pc, #424]	; (800114c <HAL_RCC_OscConfig+0x264>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a69      	ldr	r2, [pc, #420]	; (800114c <HAL_RCC_OscConfig+0x264>)
 8000fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	4b67      	ldr	r3, [pc, #412]	; (800114c <HAL_RCC_OscConfig+0x264>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a66      	ldr	r2, [pc, #408]	; (800114c <HAL_RCC_OscConfig+0x264>)
 8000fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d013      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc0:	f7ff fd00 	bl	80009c4 <HAL_GetTick>
 8000fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fc6:	e008      	b.n	8000fda <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fc8:	f7ff fcfc 	bl	80009c4 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b64      	cmp	r3, #100	; 0x64
 8000fd4:	d901      	bls.n	8000fda <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e2ad      	b.n	8001536 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fda:	4b5c      	ldr	r3, [pc, #368]	; (800114c <HAL_RCC_OscConfig+0x264>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d0f0      	beq.n	8000fc8 <HAL_RCC_OscConfig+0xe0>
 8000fe6:	e014      	b.n	8001012 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe8:	f7ff fcec 	bl	80009c4 <HAL_GetTick>
 8000fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000fee:	e008      	b.n	8001002 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ff0:	f7ff fce8 	bl	80009c4 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	2b64      	cmp	r3, #100	; 0x64
 8000ffc:	d901      	bls.n	8001002 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8000ffe:	2303      	movs	r3, #3
 8001000:	e299      	b.n	8001536 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001002:	4b52      	ldr	r3, [pc, #328]	; (800114c <HAL_RCC_OscConfig+0x264>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1f0      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x108>
 800100e:	e000      	b.n	8001012 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	2b00      	cmp	r3, #0
 800101c:	d05a      	beq.n	80010d4 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	2b04      	cmp	r3, #4
 8001022:	d005      	beq.n	8001030 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	2b0c      	cmp	r3, #12
 8001028:	d119      	bne.n	800105e <HAL_RCC_OscConfig+0x176>
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d116      	bne.n	800105e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001030:	4b46      	ldr	r3, [pc, #280]	; (800114c <HAL_RCC_OscConfig+0x264>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d005      	beq.n	8001048 <HAL_RCC_OscConfig+0x160>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d001      	beq.n	8001048 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e276      	b.n	8001536 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001048:	4b40      	ldr	r3, [pc, #256]	; (800114c <HAL_RCC_OscConfig+0x264>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	691b      	ldr	r3, [r3, #16]
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	493d      	ldr	r1, [pc, #244]	; (800114c <HAL_RCC_OscConfig+0x264>)
 8001058:	4313      	orrs	r3, r2
 800105a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800105c:	e03a      	b.n	80010d4 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d020      	beq.n	80010a8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001066:	4b3a      	ldr	r3, [pc, #232]	; (8001150 <HAL_RCC_OscConfig+0x268>)
 8001068:	2201      	movs	r2, #1
 800106a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106c:	f7ff fcaa 	bl	80009c4 <HAL_GetTick>
 8001070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001072:	e008      	b.n	8001086 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001074:	f7ff fca6 	bl	80009c4 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b02      	cmp	r3, #2
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e257      	b.n	8001536 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001086:	4b31      	ldr	r3, [pc, #196]	; (800114c <HAL_RCC_OscConfig+0x264>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d0f0      	beq.n	8001074 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001092:	4b2e      	ldr	r3, [pc, #184]	; (800114c <HAL_RCC_OscConfig+0x264>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	691b      	ldr	r3, [r3, #16]
 800109e:	021b      	lsls	r3, r3, #8
 80010a0:	492a      	ldr	r1, [pc, #168]	; (800114c <HAL_RCC_OscConfig+0x264>)
 80010a2:	4313      	orrs	r3, r2
 80010a4:	604b      	str	r3, [r1, #4]
 80010a6:	e015      	b.n	80010d4 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010a8:	4b29      	ldr	r3, [pc, #164]	; (8001150 <HAL_RCC_OscConfig+0x268>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ae:	f7ff fc89 	bl	80009c4 <HAL_GetTick>
 80010b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80010b4:	e008      	b.n	80010c8 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010b6:	f7ff fc85 	bl	80009c4 <HAL_GetTick>
 80010ba:	4602      	mov	r2, r0
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d901      	bls.n	80010c8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e236      	b.n	8001536 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80010c8:	4b20      	ldr	r3, [pc, #128]	; (800114c <HAL_RCC_OscConfig+0x264>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0302 	and.w	r3, r3, #2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1f0      	bne.n	80010b6 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0310 	and.w	r3, r3, #16
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f000 80b8 	beq.w	8001252 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d170      	bne.n	80011ca <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010e8:	4b18      	ldr	r3, [pc, #96]	; (800114c <HAL_RCC_OscConfig+0x264>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d005      	beq.n	8001100 <HAL_RCC_OscConfig+0x218>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d101      	bne.n	8001100 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e21a      	b.n	8001536 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6a1a      	ldr	r2, [r3, #32]
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <HAL_RCC_OscConfig+0x264>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800110c:	429a      	cmp	r2, r3
 800110e:	d921      	bls.n	8001154 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	4618      	mov	r0, r3
 8001116:	f000 fcad 	bl	8001a74 <RCC_SetFlashLatencyFromMSIRange>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e208      	b.n	8001536 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001124:	4b09      	ldr	r3, [pc, #36]	; (800114c <HAL_RCC_OscConfig+0x264>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a1b      	ldr	r3, [r3, #32]
 8001130:	4906      	ldr	r1, [pc, #24]	; (800114c <HAL_RCC_OscConfig+0x264>)
 8001132:	4313      	orrs	r3, r2
 8001134:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001136:	4b05      	ldr	r3, [pc, #20]	; (800114c <HAL_RCC_OscConfig+0x264>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	061b      	lsls	r3, r3, #24
 8001144:	4901      	ldr	r1, [pc, #4]	; (800114c <HAL_RCC_OscConfig+0x264>)
 8001146:	4313      	orrs	r3, r2
 8001148:	604b      	str	r3, [r1, #4]
 800114a:	e020      	b.n	800118e <HAL_RCC_OscConfig+0x2a6>
 800114c:	40023800 	.word	0x40023800
 8001150:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001154:	4b99      	ldr	r3, [pc, #612]	; (80013bc <HAL_RCC_OscConfig+0x4d4>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a1b      	ldr	r3, [r3, #32]
 8001160:	4996      	ldr	r1, [pc, #600]	; (80013bc <HAL_RCC_OscConfig+0x4d4>)
 8001162:	4313      	orrs	r3, r2
 8001164:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001166:	4b95      	ldr	r3, [pc, #596]	; (80013bc <HAL_RCC_OscConfig+0x4d4>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	061b      	lsls	r3, r3, #24
 8001174:	4991      	ldr	r1, [pc, #580]	; (80013bc <HAL_RCC_OscConfig+0x4d4>)
 8001176:	4313      	orrs	r3, r2
 8001178:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6a1b      	ldr	r3, [r3, #32]
 800117e:	4618      	mov	r0, r3
 8001180:	f000 fc78 	bl	8001a74 <RCC_SetFlashLatencyFromMSIRange>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e1d3      	b.n	8001536 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6a1b      	ldr	r3, [r3, #32]
 8001192:	0b5b      	lsrs	r3, r3, #13
 8001194:	3301      	adds	r3, #1
 8001196:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800119e:	4a87      	ldr	r2, [pc, #540]	; (80013bc <HAL_RCC_OscConfig+0x4d4>)
 80011a0:	6892      	ldr	r2, [r2, #8]
 80011a2:	0912      	lsrs	r2, r2, #4
 80011a4:	f002 020f 	and.w	r2, r2, #15
 80011a8:	4985      	ldr	r1, [pc, #532]	; (80013c0 <HAL_RCC_OscConfig+0x4d8>)
 80011aa:	5c8a      	ldrb	r2, [r1, r2]
 80011ac:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80011ae:	4a85      	ldr	r2, [pc, #532]	; (80013c4 <HAL_RCC_OscConfig+0x4dc>)
 80011b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80011b2:	4b85      	ldr	r3, [pc, #532]	; (80013c8 <HAL_RCC_OscConfig+0x4e0>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fb14 	bl	80007e4 <HAL_InitTick>
 80011bc:	4603      	mov	r3, r0
 80011be:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d045      	beq.n	8001252 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
 80011c8:	e1b5      	b.n	8001536 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d029      	beq.n	8001226 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011d2:	4b7e      	ldr	r3, [pc, #504]	; (80013cc <HAL_RCC_OscConfig+0x4e4>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d8:	f7ff fbf4 	bl	80009c4 <HAL_GetTick>
 80011dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80011de:	e008      	b.n	80011f2 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011e0:	f7ff fbf0 	bl	80009c4 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e1a1      	b.n	8001536 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80011f2:	4b72      	ldr	r3, [pc, #456]	; (80013bc <HAL_RCC_OscConfig+0x4d4>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d0f0      	beq.n	80011e0 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011fe:	4b6f      	ldr	r3, [pc, #444]	; (80013bc <HAL_RCC_OscConfig+0x4d4>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a1b      	ldr	r3, [r3, #32]
 800120a:	496c      	ldr	r1, [pc, #432]	; (80013bc <HAL_RCC_OscConfig+0x4d4>)
 800120c:	4313      	orrs	r3, r2
 800120e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001210:	4b6a      	ldr	r3, [pc, #424]	; (80013bc <HAL_RCC_OscConfig+0x4d4>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69db      	ldr	r3, [r3, #28]
 800121c:	061b      	lsls	r3, r3, #24
 800121e:	4967      	ldr	r1, [pc, #412]	; (80013bc <HAL_RCC_OscConfig+0x4d4>)
 8001220:	4313      	orrs	r3, r2
 8001222:	604b      	str	r3, [r1, #4]
 8001224:	e015      	b.n	8001252 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001226:	4b69      	ldr	r3, [pc, #420]	; (80013cc <HAL_RCC_OscConfig+0x4e4>)
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122c:	f7ff fbca 	bl	80009c4 <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001234:	f7ff fbc6 	bl	80009c4 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e177      	b.n	8001536 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001246:	4b5d      	ldr	r3, [pc, #372]	; (80013bc <HAL_RCC_OscConfig+0x4d4>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1f0      	bne.n	8001234 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0308 	and.w	r3, r3, #8
 800125a:	2b00      	cmp	r3, #0
 800125c:	d030      	beq.n	80012c0 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d016      	beq.n	8001294 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001266:	4b5a      	ldr	r3, [pc, #360]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 8001268:	2201      	movs	r2, #1
 800126a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126c:	f7ff fbaa 	bl	80009c4 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001274:	f7ff fba6 	bl	80009c4 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e157      	b.n	8001536 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001286:	4b4d      	ldr	r3, [pc, #308]	; (80013bc <HAL_RCC_OscConfig+0x4d4>)
 8001288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0f0      	beq.n	8001274 <HAL_RCC_OscConfig+0x38c>
 8001292:	e015      	b.n	80012c0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001294:	4b4e      	ldr	r3, [pc, #312]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129a:	f7ff fb93 	bl	80009c4 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012a0:	e008      	b.n	80012b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012a2:	f7ff fb8f 	bl	80009c4 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e140      	b.n	8001536 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012b4:	4b41      	ldr	r3, [pc, #260]	; (80013bc <HAL_RCC_OscConfig+0x4d4>)
 80012b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1f0      	bne.n	80012a2 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 80b5 	beq.w	8001438 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ce:	2300      	movs	r3, #0
 80012d0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012d2:	4b3a      	ldr	r3, [pc, #232]	; (80013bc <HAL_RCC_OscConfig+0x4d4>)
 80012d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d10d      	bne.n	80012fa <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012de:	4b37      	ldr	r3, [pc, #220]	; (80013bc <HAL_RCC_OscConfig+0x4d4>)
 80012e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e2:	4a36      	ldr	r2, [pc, #216]	; (80013bc <HAL_RCC_OscConfig+0x4d4>)
 80012e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e8:	6253      	str	r3, [r2, #36]	; 0x24
 80012ea:	4b34      	ldr	r3, [pc, #208]	; (80013bc <HAL_RCC_OscConfig+0x4d4>)
 80012ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012f6:	2301      	movs	r3, #1
 80012f8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012fa:	4b36      	ldr	r3, [pc, #216]	; (80013d4 <HAL_RCC_OscConfig+0x4ec>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001302:	2b00      	cmp	r3, #0
 8001304:	d118      	bne.n	8001338 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001306:	4b33      	ldr	r3, [pc, #204]	; (80013d4 <HAL_RCC_OscConfig+0x4ec>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a32      	ldr	r2, [pc, #200]	; (80013d4 <HAL_RCC_OscConfig+0x4ec>)
 800130c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001310:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001312:	f7ff fb57 	bl	80009c4 <HAL_GetTick>
 8001316:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001318:	e008      	b.n	800132c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800131a:	f7ff fb53 	bl	80009c4 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b64      	cmp	r3, #100	; 0x64
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e104      	b.n	8001536 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132c:	4b29      	ldr	r3, [pc, #164]	; (80013d4 <HAL_RCC_OscConfig+0x4ec>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0f0      	beq.n	800131a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d106      	bne.n	800134e <HAL_RCC_OscConfig+0x466>
 8001340:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <HAL_RCC_OscConfig+0x4d4>)
 8001342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001344:	4a1d      	ldr	r2, [pc, #116]	; (80013bc <HAL_RCC_OscConfig+0x4d4>)
 8001346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800134a:	6353      	str	r3, [r2, #52]	; 0x34
 800134c:	e02d      	b.n	80013aa <HAL_RCC_OscConfig+0x4c2>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d10c      	bne.n	8001370 <HAL_RCC_OscConfig+0x488>
 8001356:	4b19      	ldr	r3, [pc, #100]	; (80013bc <HAL_RCC_OscConfig+0x4d4>)
 8001358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800135a:	4a18      	ldr	r2, [pc, #96]	; (80013bc <HAL_RCC_OscConfig+0x4d4>)
 800135c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001360:	6353      	str	r3, [r2, #52]	; 0x34
 8001362:	4b16      	ldr	r3, [pc, #88]	; (80013bc <HAL_RCC_OscConfig+0x4d4>)
 8001364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001366:	4a15      	ldr	r2, [pc, #84]	; (80013bc <HAL_RCC_OscConfig+0x4d4>)
 8001368:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800136c:	6353      	str	r3, [r2, #52]	; 0x34
 800136e:	e01c      	b.n	80013aa <HAL_RCC_OscConfig+0x4c2>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	2b05      	cmp	r3, #5
 8001376:	d10c      	bne.n	8001392 <HAL_RCC_OscConfig+0x4aa>
 8001378:	4b10      	ldr	r3, [pc, #64]	; (80013bc <HAL_RCC_OscConfig+0x4d4>)
 800137a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800137c:	4a0f      	ldr	r2, [pc, #60]	; (80013bc <HAL_RCC_OscConfig+0x4d4>)
 800137e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001382:	6353      	str	r3, [r2, #52]	; 0x34
 8001384:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <HAL_RCC_OscConfig+0x4d4>)
 8001386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001388:	4a0c      	ldr	r2, [pc, #48]	; (80013bc <HAL_RCC_OscConfig+0x4d4>)
 800138a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800138e:	6353      	str	r3, [r2, #52]	; 0x34
 8001390:	e00b      	b.n	80013aa <HAL_RCC_OscConfig+0x4c2>
 8001392:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <HAL_RCC_OscConfig+0x4d4>)
 8001394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001396:	4a09      	ldr	r2, [pc, #36]	; (80013bc <HAL_RCC_OscConfig+0x4d4>)
 8001398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800139c:	6353      	str	r3, [r2, #52]	; 0x34
 800139e:	4b07      	ldr	r3, [pc, #28]	; (80013bc <HAL_RCC_OscConfig+0x4d4>)
 80013a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013a2:	4a06      	ldr	r2, [pc, #24]	; (80013bc <HAL_RCC_OscConfig+0x4d4>)
 80013a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80013a8:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d024      	beq.n	80013fc <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b2:	f7ff fb07 	bl	80009c4 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013b8:	e019      	b.n	80013ee <HAL_RCC_OscConfig+0x506>
 80013ba:	bf00      	nop
 80013bc:	40023800 	.word	0x40023800
 80013c0:	080037ec 	.word	0x080037ec
 80013c4:	20000000 	.word	0x20000000
 80013c8:	20000004 	.word	0x20000004
 80013cc:	42470020 	.word	0x42470020
 80013d0:	42470680 	.word	0x42470680
 80013d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013d8:	f7ff faf4 	bl	80009c4 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e0a3      	b.n	8001536 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013ee:	4b54      	ldr	r3, [pc, #336]	; (8001540 <HAL_RCC_OscConfig+0x658>)
 80013f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0ee      	beq.n	80013d8 <HAL_RCC_OscConfig+0x4f0>
 80013fa:	e014      	b.n	8001426 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fc:	f7ff fae2 	bl	80009c4 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001402:	e00a      	b.n	800141a <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001404:	f7ff fade 	bl	80009c4 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001412:	4293      	cmp	r3, r2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e08d      	b.n	8001536 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800141a:	4b49      	ldr	r3, [pc, #292]	; (8001540 <HAL_RCC_OscConfig+0x658>)
 800141c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800141e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1ee      	bne.n	8001404 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001426:	7ffb      	ldrb	r3, [r7, #31]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d105      	bne.n	8001438 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800142c:	4b44      	ldr	r3, [pc, #272]	; (8001540 <HAL_RCC_OscConfig+0x658>)
 800142e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001430:	4a43      	ldr	r2, [pc, #268]	; (8001540 <HAL_RCC_OscConfig+0x658>)
 8001432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001436:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143c:	2b00      	cmp	r3, #0
 800143e:	d079      	beq.n	8001534 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	2b0c      	cmp	r3, #12
 8001444:	d056      	beq.n	80014f4 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144a:	2b02      	cmp	r3, #2
 800144c:	d13b      	bne.n	80014c6 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800144e:	4b3d      	ldr	r3, [pc, #244]	; (8001544 <HAL_RCC_OscConfig+0x65c>)
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001454:	f7ff fab6 	bl	80009c4 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800145c:	f7ff fab2 	bl	80009c4 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e063      	b.n	8001536 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800146e:	4b34      	ldr	r3, [pc, #208]	; (8001540 <HAL_RCC_OscConfig+0x658>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f0      	bne.n	800145c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800147a:	4b31      	ldr	r3, [pc, #196]	; (8001540 <HAL_RCC_OscConfig+0x658>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148a:	4319      	orrs	r1, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001490:	430b      	orrs	r3, r1
 8001492:	492b      	ldr	r1, [pc, #172]	; (8001540 <HAL_RCC_OscConfig+0x658>)
 8001494:	4313      	orrs	r3, r2
 8001496:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001498:	4b2a      	ldr	r3, [pc, #168]	; (8001544 <HAL_RCC_OscConfig+0x65c>)
 800149a:	2201      	movs	r2, #1
 800149c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149e:	f7ff fa91 	bl	80009c4 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a6:	f7ff fa8d 	bl	80009c4 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e03e      	b.n	8001536 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80014b8:	4b21      	ldr	r3, [pc, #132]	; (8001540 <HAL_RCC_OscConfig+0x658>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0f0      	beq.n	80014a6 <HAL_RCC_OscConfig+0x5be>
 80014c4:	e036      	b.n	8001534 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c6:	4b1f      	ldr	r3, [pc, #124]	; (8001544 <HAL_RCC_OscConfig+0x65c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014cc:	f7ff fa7a 	bl	80009c4 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014d4:	f7ff fa76 	bl	80009c4 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e027      	b.n	8001536 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014e6:	4b16      	ldr	r3, [pc, #88]	; (8001540 <HAL_RCC_OscConfig+0x658>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f0      	bne.n	80014d4 <HAL_RCC_OscConfig+0x5ec>
 80014f2:	e01f      	b.n	8001534 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d101      	bne.n	8001500 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e01a      	b.n	8001536 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <HAL_RCC_OscConfig+0x658>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001510:	429a      	cmp	r2, r3
 8001512:	d10d      	bne.n	8001530 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800151e:	429a      	cmp	r2, r3
 8001520:	d106      	bne.n	8001530 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800152c:	429a      	cmp	r2, r3
 800152e:	d001      	beq.n	8001534 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e000      	b.n	8001536 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3720      	adds	r7, #32
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800
 8001544:	42470060 	.word	0x42470060

08001548 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d101      	bne.n	800155c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e11a      	b.n	8001792 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800155c:	4b8f      	ldr	r3, [pc, #572]	; (800179c <HAL_RCC_ClockConfig+0x254>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	429a      	cmp	r2, r3
 8001568:	d919      	bls.n	800159e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d105      	bne.n	800157c <HAL_RCC_ClockConfig+0x34>
 8001570:	4b8a      	ldr	r3, [pc, #552]	; (800179c <HAL_RCC_ClockConfig+0x254>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a89      	ldr	r2, [pc, #548]	; (800179c <HAL_RCC_ClockConfig+0x254>)
 8001576:	f043 0304 	orr.w	r3, r3, #4
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	4b87      	ldr	r3, [pc, #540]	; (800179c <HAL_RCC_ClockConfig+0x254>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f023 0201 	bic.w	r2, r3, #1
 8001584:	4985      	ldr	r1, [pc, #532]	; (800179c <HAL_RCC_ClockConfig+0x254>)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	4313      	orrs	r3, r2
 800158a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800158c:	4b83      	ldr	r3, [pc, #524]	; (800179c <HAL_RCC_ClockConfig+0x254>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d001      	beq.n	800159e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e0f9      	b.n	8001792 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d008      	beq.n	80015bc <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015aa:	4b7d      	ldr	r3, [pc, #500]	; (80017a0 <HAL_RCC_ClockConfig+0x258>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	497a      	ldr	r1, [pc, #488]	; (80017a0 <HAL_RCC_ClockConfig+0x258>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f000 808e 	beq.w	80016e6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d107      	bne.n	80015e2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015d2:	4b73      	ldr	r3, [pc, #460]	; (80017a0 <HAL_RCC_ClockConfig+0x258>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d121      	bne.n	8001622 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e0d7      	b.n	8001792 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	d107      	bne.n	80015fa <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80015ea:	4b6d      	ldr	r3, [pc, #436]	; (80017a0 <HAL_RCC_ClockConfig+0x258>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d115      	bne.n	8001622 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e0cb      	b.n	8001792 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d107      	bne.n	8001612 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001602:	4b67      	ldr	r3, [pc, #412]	; (80017a0 <HAL_RCC_ClockConfig+0x258>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d109      	bne.n	8001622 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e0bf      	b.n	8001792 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001612:	4b63      	ldr	r3, [pc, #396]	; (80017a0 <HAL_RCC_ClockConfig+0x258>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e0b7      	b.n	8001792 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001622:	4b5f      	ldr	r3, [pc, #380]	; (80017a0 <HAL_RCC_ClockConfig+0x258>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f023 0203 	bic.w	r2, r3, #3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	495c      	ldr	r1, [pc, #368]	; (80017a0 <HAL_RCC_ClockConfig+0x258>)
 8001630:	4313      	orrs	r3, r2
 8001632:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001634:	f7ff f9c6 	bl	80009c4 <HAL_GetTick>
 8001638:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d112      	bne.n	8001668 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001642:	e00a      	b.n	800165a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001644:	f7ff f9be 	bl	80009c4 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001652:	4293      	cmp	r3, r2
 8001654:	d901      	bls.n	800165a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e09b      	b.n	8001792 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800165a:	4b51      	ldr	r3, [pc, #324]	; (80017a0 <HAL_RCC_ClockConfig+0x258>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 030c 	and.w	r3, r3, #12
 8001662:	2b08      	cmp	r3, #8
 8001664:	d1ee      	bne.n	8001644 <HAL_RCC_ClockConfig+0xfc>
 8001666:	e03e      	b.n	80016e6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b03      	cmp	r3, #3
 800166e:	d112      	bne.n	8001696 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001670:	e00a      	b.n	8001688 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001672:	f7ff f9a7 	bl	80009c4 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001680:	4293      	cmp	r3, r2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e084      	b.n	8001792 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001688:	4b45      	ldr	r3, [pc, #276]	; (80017a0 <HAL_RCC_ClockConfig+0x258>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f003 030c 	and.w	r3, r3, #12
 8001690:	2b0c      	cmp	r3, #12
 8001692:	d1ee      	bne.n	8001672 <HAL_RCC_ClockConfig+0x12a>
 8001694:	e027      	b.n	80016e6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d11d      	bne.n	80016da <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800169e:	e00a      	b.n	80016b6 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a0:	f7ff f990 	bl	80009c4 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e06d      	b.n	8001792 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016b6:	4b3a      	ldr	r3, [pc, #232]	; (80017a0 <HAL_RCC_ClockConfig+0x258>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 030c 	and.w	r3, r3, #12
 80016be:	2b04      	cmp	r3, #4
 80016c0:	d1ee      	bne.n	80016a0 <HAL_RCC_ClockConfig+0x158>
 80016c2:	e010      	b.n	80016e6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c4:	f7ff f97e 	bl	80009c4 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e05b      	b.n	8001792 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80016da:	4b31      	ldr	r3, [pc, #196]	; (80017a0 <HAL_RCC_ClockConfig+0x258>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 030c 	and.w	r3, r3, #12
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1ee      	bne.n	80016c4 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016e6:	4b2d      	ldr	r3, [pc, #180]	; (800179c <HAL_RCC_ClockConfig+0x254>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d219      	bcs.n	8001728 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d105      	bne.n	8001706 <HAL_RCC_ClockConfig+0x1be>
 80016fa:	4b28      	ldr	r3, [pc, #160]	; (800179c <HAL_RCC_ClockConfig+0x254>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a27      	ldr	r2, [pc, #156]	; (800179c <HAL_RCC_ClockConfig+0x254>)
 8001700:	f043 0304 	orr.w	r3, r3, #4
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	4b25      	ldr	r3, [pc, #148]	; (800179c <HAL_RCC_ClockConfig+0x254>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f023 0201 	bic.w	r2, r3, #1
 800170e:	4923      	ldr	r1, [pc, #140]	; (800179c <HAL_RCC_ClockConfig+0x254>)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	4313      	orrs	r3, r2
 8001714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001716:	4b21      	ldr	r3, [pc, #132]	; (800179c <HAL_RCC_ClockConfig+0x254>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	d001      	beq.n	8001728 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e034      	b.n	8001792 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	2b00      	cmp	r3, #0
 8001732:	d008      	beq.n	8001746 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001734:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <HAL_RCC_ClockConfig+0x258>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	4917      	ldr	r1, [pc, #92]	; (80017a0 <HAL_RCC_ClockConfig+0x258>)
 8001742:	4313      	orrs	r3, r2
 8001744:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	2b00      	cmp	r3, #0
 8001750:	d009      	beq.n	8001766 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001752:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <HAL_RCC_ClockConfig+0x258>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	490f      	ldr	r1, [pc, #60]	; (80017a0 <HAL_RCC_ClockConfig+0x258>)
 8001762:	4313      	orrs	r3, r2
 8001764:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001766:	f000 f823 	bl	80017b0 <HAL_RCC_GetSysClockFreq>
 800176a:	4602      	mov	r2, r0
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <HAL_RCC_ClockConfig+0x258>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	091b      	lsrs	r3, r3, #4
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	490b      	ldr	r1, [pc, #44]	; (80017a4 <HAL_RCC_ClockConfig+0x25c>)
 8001778:	5ccb      	ldrb	r3, [r1, r3]
 800177a:	fa22 f303 	lsr.w	r3, r2, r3
 800177e:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <HAL_RCC_ClockConfig+0x260>)
 8001780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001782:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <HAL_RCC_ClockConfig+0x264>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff f82c 	bl	80007e4 <HAL_InitTick>
 800178c:	4603      	mov	r3, r0
 800178e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001790:	7afb      	ldrb	r3, [r7, #11]
}
 8001792:	4618      	mov	r0, r3
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40023c00 	.word	0x40023c00
 80017a0:	40023800 	.word	0x40023800
 80017a4:	080037ec 	.word	0x080037ec
 80017a8:	20000000 	.word	0x20000000
 80017ac:	20000004 	.word	0x20000004

080017b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017b4:	b092      	sub	sp, #72	; 0x48
 80017b6:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80017b8:	4b79      	ldr	r3, [pc, #484]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017c0:	f003 030c 	and.w	r3, r3, #12
 80017c4:	2b0c      	cmp	r3, #12
 80017c6:	d00d      	beq.n	80017e4 <HAL_RCC_GetSysClockFreq+0x34>
 80017c8:	2b0c      	cmp	r3, #12
 80017ca:	f200 80d5 	bhi.w	8001978 <HAL_RCC_GetSysClockFreq+0x1c8>
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	d002      	beq.n	80017d8 <HAL_RCC_GetSysClockFreq+0x28>
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	d003      	beq.n	80017de <HAL_RCC_GetSysClockFreq+0x2e>
 80017d6:	e0cf      	b.n	8001978 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017d8:	4b72      	ldr	r3, [pc, #456]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80017da:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80017dc:	e0da      	b.n	8001994 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017de:	4b72      	ldr	r3, [pc, #456]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80017e0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80017e2:	e0d7      	b.n	8001994 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80017e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017e6:	0c9b      	lsrs	r3, r3, #18
 80017e8:	f003 020f 	and.w	r2, r3, #15
 80017ec:	4b6f      	ldr	r3, [pc, #444]	; (80019ac <HAL_RCC_GetSysClockFreq+0x1fc>)
 80017ee:	5c9b      	ldrb	r3, [r3, r2]
 80017f0:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80017f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017f4:	0d9b      	lsrs	r3, r3, #22
 80017f6:	f003 0303 	and.w	r3, r3, #3
 80017fa:	3301      	adds	r3, #1
 80017fc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017fe:	4b68      	ldr	r3, [pc, #416]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d05d      	beq.n	80018c6 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800180a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800180c:	2200      	movs	r2, #0
 800180e:	4618      	mov	r0, r3
 8001810:	4611      	mov	r1, r2
 8001812:	4604      	mov	r4, r0
 8001814:	460d      	mov	r5, r1
 8001816:	4622      	mov	r2, r4
 8001818:	462b      	mov	r3, r5
 800181a:	f04f 0000 	mov.w	r0, #0
 800181e:	f04f 0100 	mov.w	r1, #0
 8001822:	0159      	lsls	r1, r3, #5
 8001824:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001828:	0150      	lsls	r0, r2, #5
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4621      	mov	r1, r4
 8001830:	1a51      	subs	r1, r2, r1
 8001832:	6139      	str	r1, [r7, #16]
 8001834:	4629      	mov	r1, r5
 8001836:	eb63 0301 	sbc.w	r3, r3, r1
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	f04f 0300 	mov.w	r3, #0
 8001844:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001848:	4659      	mov	r1, fp
 800184a:	018b      	lsls	r3, r1, #6
 800184c:	4651      	mov	r1, sl
 800184e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001852:	4651      	mov	r1, sl
 8001854:	018a      	lsls	r2, r1, #6
 8001856:	46d4      	mov	ip, sl
 8001858:	ebb2 080c 	subs.w	r8, r2, ip
 800185c:	4659      	mov	r1, fp
 800185e:	eb63 0901 	sbc.w	r9, r3, r1
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	f04f 0300 	mov.w	r3, #0
 800186a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800186e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001872:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001876:	4690      	mov	r8, r2
 8001878:	4699      	mov	r9, r3
 800187a:	4623      	mov	r3, r4
 800187c:	eb18 0303 	adds.w	r3, r8, r3
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	462b      	mov	r3, r5
 8001884:	eb49 0303 	adc.w	r3, r9, r3
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	f04f 0300 	mov.w	r3, #0
 8001892:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001896:	4629      	mov	r1, r5
 8001898:	024b      	lsls	r3, r1, #9
 800189a:	4620      	mov	r0, r4
 800189c:	4629      	mov	r1, r5
 800189e:	4604      	mov	r4, r0
 80018a0:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80018a4:	4601      	mov	r1, r0
 80018a6:	024a      	lsls	r2, r1, #9
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ae:	2200      	movs	r2, #0
 80018b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80018b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018b8:	f7fe fc62 	bl	8000180 <__aeabi_uldivmod>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4613      	mov	r3, r2
 80018c2:	647b      	str	r3, [r7, #68]	; 0x44
 80018c4:	e055      	b.n	8001972 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80018c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018c8:	2200      	movs	r2, #0
 80018ca:	623b      	str	r3, [r7, #32]
 80018cc:	627a      	str	r2, [r7, #36]	; 0x24
 80018ce:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018d2:	4642      	mov	r2, r8
 80018d4:	464b      	mov	r3, r9
 80018d6:	f04f 0000 	mov.w	r0, #0
 80018da:	f04f 0100 	mov.w	r1, #0
 80018de:	0159      	lsls	r1, r3, #5
 80018e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018e4:	0150      	lsls	r0, r2, #5
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	46c4      	mov	ip, r8
 80018ec:	ebb2 0a0c 	subs.w	sl, r2, ip
 80018f0:	4640      	mov	r0, r8
 80018f2:	4649      	mov	r1, r9
 80018f4:	468c      	mov	ip, r1
 80018f6:	eb63 0b0c 	sbc.w	fp, r3, ip
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001906:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800190a:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800190e:	ebb2 040a 	subs.w	r4, r2, sl
 8001912:	eb63 050b 	sbc.w	r5, r3, fp
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	f04f 0300 	mov.w	r3, #0
 800191e:	00eb      	lsls	r3, r5, #3
 8001920:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001924:	00e2      	lsls	r2, r4, #3
 8001926:	4614      	mov	r4, r2
 8001928:	461d      	mov	r5, r3
 800192a:	4603      	mov	r3, r0
 800192c:	18e3      	adds	r3, r4, r3
 800192e:	603b      	str	r3, [r7, #0]
 8001930:	460b      	mov	r3, r1
 8001932:	eb45 0303 	adc.w	r3, r5, r3
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	f04f 0300 	mov.w	r3, #0
 8001940:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001944:	4629      	mov	r1, r5
 8001946:	028b      	lsls	r3, r1, #10
 8001948:	4620      	mov	r0, r4
 800194a:	4629      	mov	r1, r5
 800194c:	4604      	mov	r4, r0
 800194e:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001952:	4601      	mov	r1, r0
 8001954:	028a      	lsls	r2, r1, #10
 8001956:	4610      	mov	r0, r2
 8001958:	4619      	mov	r1, r3
 800195a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800195c:	2200      	movs	r2, #0
 800195e:	61bb      	str	r3, [r7, #24]
 8001960:	61fa      	str	r2, [r7, #28]
 8001962:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001966:	f7fe fc0b 	bl	8000180 <__aeabi_uldivmod>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4613      	mov	r3, r2
 8001970:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8001972:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001974:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001976:	e00d      	b.n	8001994 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	0b5b      	lsrs	r3, r3, #13
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001986:	3301      	adds	r3, #1
 8001988:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001992:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8001996:	4618      	mov	r0, r3
 8001998:	3748      	adds	r7, #72	; 0x48
 800199a:	46bd      	mov	sp, r7
 800199c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019a0:	40023800 	.word	0x40023800
 80019a4:	00f42400 	.word	0x00f42400
 80019a8:	007a1200 	.word	0x007a1200
 80019ac:	080037e0 	.word	0x080037e0

080019b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019b4:	4b02      	ldr	r3, [pc, #8]	; (80019c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80019b6:	681b      	ldr	r3, [r3, #0]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr
 80019c0:	20000000 	.word	0x20000000

080019c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019c8:	f7ff fff2 	bl	80019b0 <HAL_RCC_GetHCLKFreq>
 80019cc:	4602      	mov	r2, r0
 80019ce:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	0a1b      	lsrs	r3, r3, #8
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	4903      	ldr	r1, [pc, #12]	; (80019e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019da:	5ccb      	ldrb	r3, [r1, r3]
 80019dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40023800 	.word	0x40023800
 80019e8:	080037fc 	.word	0x080037fc

080019ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019f0:	f7ff ffde 	bl	80019b0 <HAL_RCC_GetHCLKFreq>
 80019f4:	4602      	mov	r2, r0
 80019f6:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <HAL_RCC_GetPCLK2Freq+0x20>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	0adb      	lsrs	r3, r3, #11
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	4903      	ldr	r1, [pc, #12]	; (8001a10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a02:	5ccb      	ldrb	r3, [r1, r3]
 8001a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	080037fc 	.word	0x080037fc

08001a14 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	220f      	movs	r2, #15
 8001a22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a24:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <HAL_RCC_GetClockConfig+0x58>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 0203 	and.w	r2, r3, #3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a30:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <HAL_RCC_GetClockConfig+0x58>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <HAL_RCC_GetClockConfig+0x58>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <HAL_RCC_GetClockConfig+0x58>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	08db      	lsrs	r3, r3, #3
 8001a4e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_RCC_GetClockConfig+0x5c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0201 	and.w	r2, r3, #1
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	601a      	str	r2, [r3, #0]
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40023c00 	.word	0x40023c00

08001a74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b087      	sub	sp, #28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001a80:	4b29      	ldr	r3, [pc, #164]	; (8001b28 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d12c      	bne.n	8001ae6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a8c:	4b26      	ldr	r3, [pc, #152]	; (8001b28 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d005      	beq.n	8001aa4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001a98:	4b24      	ldr	r3, [pc, #144]	; (8001b2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	e016      	b.n	8001ad2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa4:	4b20      	ldr	r3, [pc, #128]	; (8001b28 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa8:	4a1f      	ldr	r2, [pc, #124]	; (8001b28 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aae:	6253      	str	r3, [r2, #36]	; 0x24
 8001ab0:	4b1d      	ldr	r3, [pc, #116]	; (8001b28 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001abc:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001ac4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac6:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aca:	4a17      	ldr	r2, [pc, #92]	; (8001b28 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001ad8:	d105      	bne.n	8001ae6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001ae0:	d101      	bne.n	8001ae6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d105      	bne.n	8001af8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001aec:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a0f      	ldr	r2, [pc, #60]	; (8001b30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001af2:	f043 0304 	orr.w	r3, r3, #4
 8001af6:	6013      	str	r3, [r2, #0]
 8001af8:	4b0d      	ldr	r3, [pc, #52]	; (8001b30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f023 0201 	bic.w	r2, r3, #1
 8001b00:	490b      	ldr	r1, [pc, #44]	; (8001b30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b08:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d001      	beq.n	8001b1a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	371c      	adds	r7, #28
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40007000 	.word	0x40007000
 8001b30:	40023c00 	.word	0x40023c00

08001b34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e031      	b.n	8001baa <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d106      	bne.n	8001b60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f829 	bl	8001bb2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2202      	movs	r2, #2
 8001b64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3304      	adds	r3, #4
 8001b70:	4619      	mov	r1, r3
 8001b72:	4610      	mov	r0, r2
 8001b74:	f000 f978 	bl	8001e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d001      	beq.n	8001bdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e03a      	b.n	8001c52 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2202      	movs	r2, #2
 8001be0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68da      	ldr	r2, [r3, #12]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0201 	orr.w	r2, r2, #1
 8001bf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bfc:	d00e      	beq.n	8001c1c <HAL_TIM_Base_Start_IT+0x58>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a16      	ldr	r2, [pc, #88]	; (8001c5c <HAL_TIM_Base_Start_IT+0x98>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d009      	beq.n	8001c1c <HAL_TIM_Base_Start_IT+0x58>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a14      	ldr	r2, [pc, #80]	; (8001c60 <HAL_TIM_Base_Start_IT+0x9c>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d004      	beq.n	8001c1c <HAL_TIM_Base_Start_IT+0x58>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a13      	ldr	r2, [pc, #76]	; (8001c64 <HAL_TIM_Base_Start_IT+0xa0>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d111      	bne.n	8001c40 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2b06      	cmp	r3, #6
 8001c2c:	d010      	beq.n	8001c50 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f042 0201 	orr.w	r2, r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c3e:	e007      	b.n	8001c50 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0201 	orr.w	r2, r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3714      	adds	r7, #20
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr
 8001c5c:	40000400 	.word	0x40000400
 8001c60:	40000800 	.word	0x40000800
 8001c64:	40010800 	.word	0x40010800

08001c68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d122      	bne.n	8001cc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d11b      	bne.n	8001cc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f06f 0202 	mvn.w	r2, #2
 8001c94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f8c1 	bl	8001e32 <HAL_TIM_IC_CaptureCallback>
 8001cb0:	e005      	b.n	8001cbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f8b4 	bl	8001e20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f8c3 	bl	8001e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	f003 0304 	and.w	r3, r3, #4
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	d122      	bne.n	8001d18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	d11b      	bne.n	8001d18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f06f 0204 	mvn.w	r2, #4
 8001ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2202      	movs	r2, #2
 8001cee:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f897 	bl	8001e32 <HAL_TIM_IC_CaptureCallback>
 8001d04:	e005      	b.n	8001d12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f88a 	bl	8001e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f899 	bl	8001e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	2b08      	cmp	r3, #8
 8001d24:	d122      	bne.n	8001d6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	f003 0308 	and.w	r3, r3, #8
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d11b      	bne.n	8001d6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f06f 0208 	mvn.w	r2, #8
 8001d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2204      	movs	r2, #4
 8001d42:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f86d 	bl	8001e32 <HAL_TIM_IC_CaptureCallback>
 8001d58:	e005      	b.n	8001d66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f860 	bl	8001e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 f86f 	bl	8001e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	f003 0310 	and.w	r3, r3, #16
 8001d76:	2b10      	cmp	r3, #16
 8001d78:	d122      	bne.n	8001dc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f003 0310 	and.w	r3, r3, #16
 8001d84:	2b10      	cmp	r3, #16
 8001d86:	d11b      	bne.n	8001dc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f06f 0210 	mvn.w	r2, #16
 8001d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2208      	movs	r2, #8
 8001d96:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f843 	bl	8001e32 <HAL_TIM_IC_CaptureCallback>
 8001dac:	e005      	b.n	8001dba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f836 	bl	8001e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f845 	bl	8001e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d10e      	bne.n	8001dec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d107      	bne.n	8001dec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f06f 0201 	mvn.w	r2, #1
 8001de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7fe fc70 	bl	80006cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df6:	2b40      	cmp	r3, #64	; 0x40
 8001df8:	d10e      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e04:	2b40      	cmp	r3, #64	; 0x40
 8001e06:	d107      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f81f 	bl	8001e56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e18:	bf00      	nop
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr

08001e32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr

08001e44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr

08001e56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr

08001e68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e7e:	d00f      	beq.n	8001ea0 <TIM_Base_SetConfig+0x38>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a2b      	ldr	r2, [pc, #172]	; (8001f30 <TIM_Base_SetConfig+0xc8>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d00b      	beq.n	8001ea0 <TIM_Base_SetConfig+0x38>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a2a      	ldr	r2, [pc, #168]	; (8001f34 <TIM_Base_SetConfig+0xcc>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d007      	beq.n	8001ea0 <TIM_Base_SetConfig+0x38>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a29      	ldr	r2, [pc, #164]	; (8001f38 <TIM_Base_SetConfig+0xd0>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d003      	beq.n	8001ea0 <TIM_Base_SetConfig+0x38>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a28      	ldr	r2, [pc, #160]	; (8001f3c <TIM_Base_SetConfig+0xd4>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d108      	bne.n	8001eb2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ea6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eb8:	d017      	beq.n	8001eea <TIM_Base_SetConfig+0x82>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a1c      	ldr	r2, [pc, #112]	; (8001f30 <TIM_Base_SetConfig+0xc8>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d013      	beq.n	8001eea <TIM_Base_SetConfig+0x82>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a1b      	ldr	r2, [pc, #108]	; (8001f34 <TIM_Base_SetConfig+0xcc>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d00f      	beq.n	8001eea <TIM_Base_SetConfig+0x82>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a1a      	ldr	r2, [pc, #104]	; (8001f38 <TIM_Base_SetConfig+0xd0>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d00b      	beq.n	8001eea <TIM_Base_SetConfig+0x82>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a19      	ldr	r2, [pc, #100]	; (8001f3c <TIM_Base_SetConfig+0xd4>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d007      	beq.n	8001eea <TIM_Base_SetConfig+0x82>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a18      	ldr	r2, [pc, #96]	; (8001f40 <TIM_Base_SetConfig+0xd8>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d003      	beq.n	8001eea <TIM_Base_SetConfig+0x82>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a17      	ldr	r2, [pc, #92]	; (8001f44 <TIM_Base_SetConfig+0xdc>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d108      	bne.n	8001efc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ef0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	615a      	str	r2, [r3, #20]
}
 8001f26:	bf00      	nop
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr
 8001f30:	40000400 	.word	0x40000400
 8001f34:	40000800 	.word	0x40000800
 8001f38:	40000c00 	.word	0x40000c00
 8001f3c:	40010800 	.word	0x40010800
 8001f40:	40010c00 	.word	0x40010c00
 8001f44:	40011000 	.word	0x40011000

08001f48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e042      	b.n	8001fe0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d106      	bne.n	8001f74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7fe fbf4 	bl	800075c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2224      	movs	r2, #36	; 0x24
 8001f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f82b 	bl	8001fe8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	691a      	ldr	r2, [r3, #16]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fa0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	695a      	ldr	r2, [r3, #20]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68da      	ldr	r2, [r3, #12]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	430a      	orrs	r2, r1
 8002004:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	431a      	orrs	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	431a      	orrs	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	4313      	orrs	r3, r2
 800201c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002028:	f023 030c 	bic.w	r3, r3, #12
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	6812      	ldr	r2, [r2, #0]
 8002030:	68b9      	ldr	r1, [r7, #8]
 8002032:	430b      	orrs	r3, r1
 8002034:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	699a      	ldr	r2, [r3, #24]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	430a      	orrs	r2, r1
 800204a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a55      	ldr	r2, [pc, #340]	; (80021a8 <UART_SetConfig+0x1c0>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d103      	bne.n	800205e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002056:	f7ff fcc9 	bl	80019ec <HAL_RCC_GetPCLK2Freq>
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	e002      	b.n	8002064 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800205e:	f7ff fcb1 	bl	80019c4 <HAL_RCC_GetPCLK1Freq>
 8002062:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800206c:	d14c      	bne.n	8002108 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	4613      	mov	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	009a      	lsls	r2, r3, #2
 8002078:	441a      	add	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	fbb2 f3f3 	udiv	r3, r2, r3
 8002084:	4a49      	ldr	r2, [pc, #292]	; (80021ac <UART_SetConfig+0x1c4>)
 8002086:	fba2 2303 	umull	r2, r3, r2, r3
 800208a:	095b      	lsrs	r3, r3, #5
 800208c:	0119      	lsls	r1, r3, #4
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	009a      	lsls	r2, r3, #2
 8002098:	441a      	add	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80020a4:	4b41      	ldr	r3, [pc, #260]	; (80021ac <UART_SetConfig+0x1c4>)
 80020a6:	fba3 0302 	umull	r0, r3, r3, r2
 80020aa:	095b      	lsrs	r3, r3, #5
 80020ac:	2064      	movs	r0, #100	; 0x64
 80020ae:	fb00 f303 	mul.w	r3, r0, r3
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	3332      	adds	r3, #50	; 0x32
 80020b8:	4a3c      	ldr	r2, [pc, #240]	; (80021ac <UART_SetConfig+0x1c4>)
 80020ba:	fba2 2303 	umull	r2, r3, r2, r3
 80020be:	095b      	lsrs	r3, r3, #5
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80020c6:	4419      	add	r1, r3
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	4613      	mov	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	009a      	lsls	r2, r3, #2
 80020d2:	441a      	add	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	fbb2 f2f3 	udiv	r2, r2, r3
 80020de:	4b33      	ldr	r3, [pc, #204]	; (80021ac <UART_SetConfig+0x1c4>)
 80020e0:	fba3 0302 	umull	r0, r3, r3, r2
 80020e4:	095b      	lsrs	r3, r3, #5
 80020e6:	2064      	movs	r0, #100	; 0x64
 80020e8:	fb00 f303 	mul.w	r3, r0, r3
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	3332      	adds	r3, #50	; 0x32
 80020f2:	4a2e      	ldr	r2, [pc, #184]	; (80021ac <UART_SetConfig+0x1c4>)
 80020f4:	fba2 2303 	umull	r2, r3, r2, r3
 80020f8:	095b      	lsrs	r3, r3, #5
 80020fa:	f003 0207 	and.w	r2, r3, #7
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	440a      	add	r2, r1
 8002104:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002106:	e04a      	b.n	800219e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	009a      	lsls	r2, r3, #2
 8002112:	441a      	add	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	fbb2 f3f3 	udiv	r3, r2, r3
 800211e:	4a23      	ldr	r2, [pc, #140]	; (80021ac <UART_SetConfig+0x1c4>)
 8002120:	fba2 2303 	umull	r2, r3, r2, r3
 8002124:	095b      	lsrs	r3, r3, #5
 8002126:	0119      	lsls	r1, r3, #4
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	009a      	lsls	r2, r3, #2
 8002132:	441a      	add	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	fbb2 f2f3 	udiv	r2, r2, r3
 800213e:	4b1b      	ldr	r3, [pc, #108]	; (80021ac <UART_SetConfig+0x1c4>)
 8002140:	fba3 0302 	umull	r0, r3, r3, r2
 8002144:	095b      	lsrs	r3, r3, #5
 8002146:	2064      	movs	r0, #100	; 0x64
 8002148:	fb00 f303 	mul.w	r3, r0, r3
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	011b      	lsls	r3, r3, #4
 8002150:	3332      	adds	r3, #50	; 0x32
 8002152:	4a16      	ldr	r2, [pc, #88]	; (80021ac <UART_SetConfig+0x1c4>)
 8002154:	fba2 2303 	umull	r2, r3, r2, r3
 8002158:	095b      	lsrs	r3, r3, #5
 800215a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800215e:	4419      	add	r1, r3
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	009a      	lsls	r2, r3, #2
 800216a:	441a      	add	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	fbb2 f2f3 	udiv	r2, r2, r3
 8002176:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <UART_SetConfig+0x1c4>)
 8002178:	fba3 0302 	umull	r0, r3, r3, r2
 800217c:	095b      	lsrs	r3, r3, #5
 800217e:	2064      	movs	r0, #100	; 0x64
 8002180:	fb00 f303 	mul.w	r3, r0, r3
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	011b      	lsls	r3, r3, #4
 8002188:	3332      	adds	r3, #50	; 0x32
 800218a:	4a08      	ldr	r2, [pc, #32]	; (80021ac <UART_SetConfig+0x1c4>)
 800218c:	fba2 2303 	umull	r2, r3, r2, r3
 8002190:	095b      	lsrs	r3, r3, #5
 8002192:	f003 020f 	and.w	r2, r3, #15
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	440a      	add	r2, r1
 800219c:	609a      	str	r2, [r3, #8]
}
 800219e:	bf00      	nop
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40013800 	.word	0x40013800
 80021ac:	51eb851f 	.word	0x51eb851f

080021b0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80021be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021c2:	2b84      	cmp	r3, #132	; 0x84
 80021c4:	d005      	beq.n	80021d2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80021c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	4413      	add	r3, r2
 80021ce:	3303      	adds	r3, #3
 80021d0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80021d2:	68fb      	ldr	r3, [r7, #12]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr

080021de <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80021e2:	f000 fae7 	bl	80027b4 <vTaskStartScheduler>
  
  return osOK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	bd80      	pop	{r7, pc}

080021ec <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80021ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ee:	b089      	sub	sp, #36	; 0x24
 80021f0:	af04      	add	r7, sp, #16
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d020      	beq.n	8002240 <osThreadCreate+0x54>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d01c      	beq.n	8002240 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685c      	ldr	r4, [r3, #4]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681d      	ldr	r5, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691e      	ldr	r6, [r3, #16]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff ffc9 	bl	80021b0 <makeFreeRtosPriority>
 800221e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002228:	9202      	str	r2, [sp, #8]
 800222a:	9301      	str	r3, [sp, #4]
 800222c:	9100      	str	r1, [sp, #0]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	4632      	mov	r2, r6
 8002232:	4629      	mov	r1, r5
 8002234:	4620      	mov	r0, r4
 8002236:	f000 f8e8 	bl	800240a <xTaskCreateStatic>
 800223a:	4603      	mov	r3, r0
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	e01c      	b.n	800227a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685c      	ldr	r4, [r3, #4]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800224c:	b29e      	uxth	r6, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff ffab 	bl	80021b0 <makeFreeRtosPriority>
 800225a:	4602      	mov	r2, r0
 800225c:	f107 030c 	add.w	r3, r7, #12
 8002260:	9301      	str	r3, [sp, #4]
 8002262:	9200      	str	r2, [sp, #0]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	4632      	mov	r2, r6
 8002268:	4629      	mov	r1, r5
 800226a:	4620      	mov	r0, r4
 800226c:	f000 f929 	bl	80024c2 <xTaskCreate>
 8002270:	4603      	mov	r3, r0
 8002272:	2b01      	cmp	r3, #1
 8002274:	d001      	beq.n	800227a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002276:	2300      	movs	r3, #0
 8002278:	e000      	b.n	800227c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800227a:	68fb      	ldr	r3, [r7, #12]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002284 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <osDelay+0x16>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	e000      	b.n	800229c <osDelay+0x18>
 800229a:	2301      	movs	r3, #1
 800229c:	4618      	mov	r0, r3
 800229e:	f000 fa55 	bl	800274c <vTaskDelay>
  
  return osOK;
 80022a2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f103 0208 	add.w	r2, r3, #8
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f04f 32ff 	mov.w	r2, #4294967295
 80022c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f103 0208 	add.w	r2, r3, #8
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f103 0208 	add.w	r2, r3, #8
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr

080022ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr

08002302 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002302:	b480      	push	{r7}
 8002304:	b085      	sub	sp, #20
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	601a      	str	r2, [r3, #0]
}
 800233e:	bf00      	nop
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr

08002348 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800235e:	d103      	bne.n	8002368 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	e00c      	b.n	8002382 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3308      	adds	r3, #8
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	e002      	b.n	8002376 <vListInsert+0x2e>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68ba      	ldr	r2, [r7, #8]
 800237e:	429a      	cmp	r2, r3
 8002380:	d2f6      	bcs.n	8002370 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	601a      	str	r2, [r3, #0]
}
 80023ae:	bf00      	nop
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr

080023b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6892      	ldr	r2, [r2, #8]
 80023ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6852      	ldr	r2, [r2, #4]
 80023d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d103      	bne.n	80023ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	1e5a      	subs	r2, r3, #1
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr

0800240a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800240a:	b580      	push	{r7, lr}
 800240c:	b08e      	sub	sp, #56	; 0x38
 800240e:	af04      	add	r7, sp, #16
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
 8002416:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10a      	bne.n	8002434 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800241e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002422:	f383 8811 	msr	BASEPRI, r3
 8002426:	f3bf 8f6f 	isb	sy
 800242a:	f3bf 8f4f 	dsb	sy
 800242e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002430:	bf00      	nop
 8002432:	e7fe      	b.n	8002432 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10a      	bne.n	8002450 <xTaskCreateStatic+0x46>
	__asm volatile
 800243a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243e:	f383 8811 	msr	BASEPRI, r3
 8002442:	f3bf 8f6f 	isb	sy
 8002446:	f3bf 8f4f 	dsb	sy
 800244a:	61fb      	str	r3, [r7, #28]
}
 800244c:	bf00      	nop
 800244e:	e7fe      	b.n	800244e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002450:	23b4      	movs	r3, #180	; 0xb4
 8002452:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	2bb4      	cmp	r3, #180	; 0xb4
 8002458:	d00a      	beq.n	8002470 <xTaskCreateStatic+0x66>
	__asm volatile
 800245a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800245e:	f383 8811 	msr	BASEPRI, r3
 8002462:	f3bf 8f6f 	isb	sy
 8002466:	f3bf 8f4f 	dsb	sy
 800246a:	61bb      	str	r3, [r7, #24]
}
 800246c:	bf00      	nop
 800246e:	e7fe      	b.n	800246e <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002472:	2b00      	cmp	r3, #0
 8002474:	d01e      	beq.n	80024b4 <xTaskCreateStatic+0xaa>
 8002476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002478:	2b00      	cmp	r3, #0
 800247a:	d01b      	beq.n	80024b4 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800247c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800247e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002484:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	2202      	movs	r2, #2
 800248a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800248e:	2300      	movs	r3, #0
 8002490:	9303      	str	r3, [sp, #12]
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	9302      	str	r3, [sp, #8]
 8002496:	f107 0314 	add.w	r3, r7, #20
 800249a:	9301      	str	r3, [sp, #4]
 800249c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	68b9      	ldr	r1, [r7, #8]
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 f850 	bl	800254c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80024ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024ae:	f000 f8e3 	bl	8002678 <prvAddNewTaskToReadyList>
 80024b2:	e001      	b.n	80024b8 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80024b8:	697b      	ldr	r3, [r7, #20]
	}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3728      	adds	r7, #40	; 0x28
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b08c      	sub	sp, #48	; 0x30
 80024c6:	af04      	add	r7, sp, #16
 80024c8:	60f8      	str	r0, [r7, #12]
 80024ca:	60b9      	str	r1, [r7, #8]
 80024cc:	603b      	str	r3, [r7, #0]
 80024ce:	4613      	mov	r3, r2
 80024d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024d2:	88fb      	ldrh	r3, [r7, #6]
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4618      	mov	r0, r3
 80024d8:	f000 fe9a 	bl	8003210 <pvPortMalloc>
 80024dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00e      	beq.n	8002502 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80024e4:	20b4      	movs	r0, #180	; 0xb4
 80024e6:	f000 fe93 	bl	8003210 <pvPortMalloc>
 80024ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	631a      	str	r2, [r3, #48]	; 0x30
 80024f8:	e005      	b.n	8002506 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80024fa:	6978      	ldr	r0, [r7, #20]
 80024fc:	f000 ff4c 	bl	8003398 <vPortFree>
 8002500:	e001      	b.n	8002506 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d017      	beq.n	800253c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002514:	88fa      	ldrh	r2, [r7, #6]
 8002516:	2300      	movs	r3, #0
 8002518:	9303      	str	r3, [sp, #12]
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	9302      	str	r3, [sp, #8]
 800251e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002520:	9301      	str	r3, [sp, #4]
 8002522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	68b9      	ldr	r1, [r7, #8]
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 f80e 	bl	800254c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002530:	69f8      	ldr	r0, [r7, #28]
 8002532:	f000 f8a1 	bl	8002678 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002536:	2301      	movs	r3, #1
 8002538:	61bb      	str	r3, [r7, #24]
 800253a:	e002      	b.n	8002542 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800253c:	f04f 33ff 	mov.w	r3, #4294967295
 8002540:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002542:	69bb      	ldr	r3, [r7, #24]
	}
 8002544:	4618      	mov	r0, r3
 8002546:	3720      	adds	r7, #32
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b088      	sub	sp, #32
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
 8002558:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800255a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002564:	3b01      	subs	r3, #1
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	f023 0307 	bic.w	r3, r3, #7
 8002572:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00a      	beq.n	8002594 <prvInitialiseNewTask+0x48>
	__asm volatile
 800257e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002582:	f383 8811 	msr	BASEPRI, r3
 8002586:	f3bf 8f6f 	isb	sy
 800258a:	f3bf 8f4f 	dsb	sy
 800258e:	617b      	str	r3, [r7, #20]
}
 8002590:	bf00      	nop
 8002592:	e7fe      	b.n	8002592 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002594:	2300      	movs	r3, #0
 8002596:	61fb      	str	r3, [r7, #28]
 8002598:	e012      	b.n	80025c0 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	4413      	add	r3, r2
 80025a0:	7819      	ldrb	r1, [r3, #0]
 80025a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	4413      	add	r3, r2
 80025a8:	3334      	adds	r3, #52	; 0x34
 80025aa:	460a      	mov	r2, r1
 80025ac:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	4413      	add	r3, r2
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d006      	beq.n	80025c8 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	3301      	adds	r3, #1
 80025be:	61fb      	str	r3, [r7, #28]
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	2b0f      	cmp	r3, #15
 80025c4:	d9e9      	bls.n	800259a <prvInitialiseNewTask+0x4e>
 80025c6:	e000      	b.n	80025ca <prvInitialiseNewTask+0x7e>
		{
			break;
 80025c8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80025ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80025d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d4:	2b06      	cmp	r3, #6
 80025d6:	d901      	bls.n	80025dc <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80025d8:	2306      	movs	r3, #6
 80025da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80025dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80025e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025e6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80025e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ea:	2200      	movs	r2, #0
 80025ec:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80025ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f0:	3304      	adds	r3, #4
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff fe79 	bl	80022ea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80025f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fa:	3318      	adds	r3, #24
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff fe74 	bl	80022ea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002606:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260a:	f1c3 0207 	rsb	r2, r3, #7
 800260e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002610:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002616:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261a:	2200      	movs	r2, #0
 800261c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002622:	2200      	movs	r2, #0
 8002624:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262a:	334c      	adds	r3, #76	; 0x4c
 800262c:	2260      	movs	r2, #96	; 0x60
 800262e:	2100      	movs	r1, #0
 8002630:	4618      	mov	r0, r3
 8002632:	f000 ffeb 	bl	800360c <memset>
 8002636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002638:	4a0c      	ldr	r2, [pc, #48]	; (800266c <prvInitialiseNewTask+0x120>)
 800263a:	651a      	str	r2, [r3, #80]	; 0x50
 800263c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263e:	4a0c      	ldr	r2, [pc, #48]	; (8002670 <prvInitialiseNewTask+0x124>)
 8002640:	655a      	str	r2, [r3, #84]	; 0x54
 8002642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002644:	4a0b      	ldr	r2, [pc, #44]	; (8002674 <prvInitialiseNewTask+0x128>)
 8002646:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	68f9      	ldr	r1, [r7, #12]
 800264c:	69b8      	ldr	r0, [r7, #24]
 800264e:	f000 fc29 	bl	8002ea4 <pxPortInitialiseStack>
 8002652:	4602      	mov	r2, r0
 8002654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002656:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800265e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002662:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002664:	bf00      	nop
 8002666:	3720      	adds	r7, #32
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	08003824 	.word	0x08003824
 8002670:	08003844 	.word	0x08003844
 8002674:	08003804 	.word	0x08003804

08002678 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002680:	f000 fd04 	bl	800308c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002684:	4b2a      	ldr	r3, [pc, #168]	; (8002730 <prvAddNewTaskToReadyList+0xb8>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	3301      	adds	r3, #1
 800268a:	4a29      	ldr	r2, [pc, #164]	; (8002730 <prvAddNewTaskToReadyList+0xb8>)
 800268c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800268e:	4b29      	ldr	r3, [pc, #164]	; (8002734 <prvAddNewTaskToReadyList+0xbc>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d109      	bne.n	80026aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002696:	4a27      	ldr	r2, [pc, #156]	; (8002734 <prvAddNewTaskToReadyList+0xbc>)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800269c:	4b24      	ldr	r3, [pc, #144]	; (8002730 <prvAddNewTaskToReadyList+0xb8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d110      	bne.n	80026c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80026a4:	f000 fad2 	bl	8002c4c <prvInitialiseTaskLists>
 80026a8:	e00d      	b.n	80026c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80026aa:	4b23      	ldr	r3, [pc, #140]	; (8002738 <prvAddNewTaskToReadyList+0xc0>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d109      	bne.n	80026c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80026b2:	4b20      	ldr	r3, [pc, #128]	; (8002734 <prvAddNewTaskToReadyList+0xbc>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026bc:	429a      	cmp	r2, r3
 80026be:	d802      	bhi.n	80026c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80026c0:	4a1c      	ldr	r2, [pc, #112]	; (8002734 <prvAddNewTaskToReadyList+0xbc>)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80026c6:	4b1d      	ldr	r3, [pc, #116]	; (800273c <prvAddNewTaskToReadyList+0xc4>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	3301      	adds	r3, #1
 80026cc:	4a1b      	ldr	r2, [pc, #108]	; (800273c <prvAddNewTaskToReadyList+0xc4>)
 80026ce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	2201      	movs	r2, #1
 80026d6:	409a      	lsls	r2, r3
 80026d8:	4b19      	ldr	r3, [pc, #100]	; (8002740 <prvAddNewTaskToReadyList+0xc8>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4313      	orrs	r3, r2
 80026de:	4a18      	ldr	r2, [pc, #96]	; (8002740 <prvAddNewTaskToReadyList+0xc8>)
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026e6:	4613      	mov	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4413      	add	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4a15      	ldr	r2, [pc, #84]	; (8002744 <prvAddNewTaskToReadyList+0xcc>)
 80026f0:	441a      	add	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3304      	adds	r3, #4
 80026f6:	4619      	mov	r1, r3
 80026f8:	4610      	mov	r0, r2
 80026fa:	f7ff fe02 	bl	8002302 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80026fe:	f000 fcf5 	bl	80030ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002702:	4b0d      	ldr	r3, [pc, #52]	; (8002738 <prvAddNewTaskToReadyList+0xc0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00e      	beq.n	8002728 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800270a:	4b0a      	ldr	r3, [pc, #40]	; (8002734 <prvAddNewTaskToReadyList+0xbc>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002714:	429a      	cmp	r2, r3
 8002716:	d207      	bcs.n	8002728 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002718:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <prvAddNewTaskToReadyList+0xd0>)
 800271a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	f3bf 8f4f 	dsb	sy
 8002724:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002728:	bf00      	nop
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	200004d4 	.word	0x200004d4
 8002734:	200003d4 	.word	0x200003d4
 8002738:	200004e0 	.word	0x200004e0
 800273c:	200004f0 	.word	0x200004f0
 8002740:	200004dc 	.word	0x200004dc
 8002744:	200003d8 	.word	0x200003d8
 8002748:	e000ed04 	.word	0xe000ed04

0800274c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002754:	2300      	movs	r3, #0
 8002756:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d017      	beq.n	800278e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800275e:	4b13      	ldr	r3, [pc, #76]	; (80027ac <vTaskDelay+0x60>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00a      	beq.n	800277c <vTaskDelay+0x30>
	__asm volatile
 8002766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800276a:	f383 8811 	msr	BASEPRI, r3
 800276e:	f3bf 8f6f 	isb	sy
 8002772:	f3bf 8f4f 	dsb	sy
 8002776:	60bb      	str	r3, [r7, #8]
}
 8002778:	bf00      	nop
 800277a:	e7fe      	b.n	800277a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800277c:	f000 f884 	bl	8002888 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002780:	2100      	movs	r1, #0
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 fb28 	bl	8002dd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002788:	f000 f88c 	bl	80028a4 <xTaskResumeAll>
 800278c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d107      	bne.n	80027a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <vTaskDelay+0x64>)
 8002796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	f3bf 8f4f 	dsb	sy
 80027a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80027a4:	bf00      	nop
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	200004fc 	.word	0x200004fc
 80027b0:	e000ed04 	.word	0xe000ed04

080027b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08a      	sub	sp, #40	; 0x28
 80027b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80027c2:	463a      	mov	r2, r7
 80027c4:	1d39      	adds	r1, r7, #4
 80027c6:	f107 0308 	add.w	r3, r7, #8
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fd fe5c 	bl	8000488 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80027d0:	6839      	ldr	r1, [r7, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	9202      	str	r2, [sp, #8]
 80027d8:	9301      	str	r3, [sp, #4]
 80027da:	2300      	movs	r3, #0
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	2300      	movs	r3, #0
 80027e0:	460a      	mov	r2, r1
 80027e2:	4921      	ldr	r1, [pc, #132]	; (8002868 <vTaskStartScheduler+0xb4>)
 80027e4:	4821      	ldr	r0, [pc, #132]	; (800286c <vTaskStartScheduler+0xb8>)
 80027e6:	f7ff fe10 	bl	800240a <xTaskCreateStatic>
 80027ea:	4603      	mov	r3, r0
 80027ec:	4a20      	ldr	r2, [pc, #128]	; (8002870 <vTaskStartScheduler+0xbc>)
 80027ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80027f0:	4b1f      	ldr	r3, [pc, #124]	; (8002870 <vTaskStartScheduler+0xbc>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d002      	beq.n	80027fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80027f8:	2301      	movs	r3, #1
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	e001      	b.n	8002802 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d11b      	bne.n	8002840 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800280c:	f383 8811 	msr	BASEPRI, r3
 8002810:	f3bf 8f6f 	isb	sy
 8002814:	f3bf 8f4f 	dsb	sy
 8002818:	613b      	str	r3, [r7, #16]
}
 800281a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800281c:	4b15      	ldr	r3, [pc, #84]	; (8002874 <vTaskStartScheduler+0xc0>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	334c      	adds	r3, #76	; 0x4c
 8002822:	4a15      	ldr	r2, [pc, #84]	; (8002878 <vTaskStartScheduler+0xc4>)
 8002824:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002826:	4b15      	ldr	r3, [pc, #84]	; (800287c <vTaskStartScheduler+0xc8>)
 8002828:	f04f 32ff 	mov.w	r2, #4294967295
 800282c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800282e:	4b14      	ldr	r3, [pc, #80]	; (8002880 <vTaskStartScheduler+0xcc>)
 8002830:	2201      	movs	r2, #1
 8002832:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002834:	4b13      	ldr	r3, [pc, #76]	; (8002884 <vTaskStartScheduler+0xd0>)
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800283a:	f000 fbb5 	bl	8002fa8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800283e:	e00e      	b.n	800285e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002846:	d10a      	bne.n	800285e <vTaskStartScheduler+0xaa>
	__asm volatile
 8002848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800284c:	f383 8811 	msr	BASEPRI, r3
 8002850:	f3bf 8f6f 	isb	sy
 8002854:	f3bf 8f4f 	dsb	sy
 8002858:	60fb      	str	r3, [r7, #12]
}
 800285a:	bf00      	nop
 800285c:	e7fe      	b.n	800285c <vTaskStartScheduler+0xa8>
}
 800285e:	bf00      	nop
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	080037d8 	.word	0x080037d8
 800286c:	08002c1d 	.word	0x08002c1d
 8002870:	200004f8 	.word	0x200004f8
 8002874:	200003d4 	.word	0x200003d4
 8002878:	20000010 	.word	0x20000010
 800287c:	200004f4 	.word	0x200004f4
 8002880:	200004e0 	.word	0x200004e0
 8002884:	200004d8 	.word	0x200004d8

08002888 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800288c:	4b04      	ldr	r3, [pc, #16]	; (80028a0 <vTaskSuspendAll+0x18>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	3301      	adds	r3, #1
 8002892:	4a03      	ldr	r2, [pc, #12]	; (80028a0 <vTaskSuspendAll+0x18>)
 8002894:	6013      	str	r3, [r2, #0]
}
 8002896:	bf00      	nop
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	200004fc 	.word	0x200004fc

080028a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80028ae:	2300      	movs	r3, #0
 80028b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80028b2:	4b41      	ldr	r3, [pc, #260]	; (80029b8 <xTaskResumeAll+0x114>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10a      	bne.n	80028d0 <xTaskResumeAll+0x2c>
	__asm volatile
 80028ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028be:	f383 8811 	msr	BASEPRI, r3
 80028c2:	f3bf 8f6f 	isb	sy
 80028c6:	f3bf 8f4f 	dsb	sy
 80028ca:	603b      	str	r3, [r7, #0]
}
 80028cc:	bf00      	nop
 80028ce:	e7fe      	b.n	80028ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80028d0:	f000 fbdc 	bl	800308c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80028d4:	4b38      	ldr	r3, [pc, #224]	; (80029b8 <xTaskResumeAll+0x114>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	3b01      	subs	r3, #1
 80028da:	4a37      	ldr	r2, [pc, #220]	; (80029b8 <xTaskResumeAll+0x114>)
 80028dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028de:	4b36      	ldr	r3, [pc, #216]	; (80029b8 <xTaskResumeAll+0x114>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d161      	bne.n	80029aa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80028e6:	4b35      	ldr	r3, [pc, #212]	; (80029bc <xTaskResumeAll+0x118>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d05d      	beq.n	80029aa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80028ee:	e02e      	b.n	800294e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80028f0:	4b33      	ldr	r3, [pc, #204]	; (80029c0 <xTaskResumeAll+0x11c>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	3318      	adds	r3, #24
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff fd5b 	bl	80023b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	3304      	adds	r3, #4
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff fd56 	bl	80023b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002910:	2201      	movs	r2, #1
 8002912:	409a      	lsls	r2, r3
 8002914:	4b2b      	ldr	r3, [pc, #172]	; (80029c4 <xTaskResumeAll+0x120>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4313      	orrs	r3, r2
 800291a:	4a2a      	ldr	r2, [pc, #168]	; (80029c4 <xTaskResumeAll+0x120>)
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002922:	4613      	mov	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4a27      	ldr	r2, [pc, #156]	; (80029c8 <xTaskResumeAll+0x124>)
 800292c:	441a      	add	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	3304      	adds	r3, #4
 8002932:	4619      	mov	r1, r3
 8002934:	4610      	mov	r0, r2
 8002936:	f7ff fce4 	bl	8002302 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800293e:	4b23      	ldr	r3, [pc, #140]	; (80029cc <xTaskResumeAll+0x128>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	429a      	cmp	r2, r3
 8002946:	d302      	bcc.n	800294e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002948:	4b21      	ldr	r3, [pc, #132]	; (80029d0 <xTaskResumeAll+0x12c>)
 800294a:	2201      	movs	r2, #1
 800294c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800294e:	4b1c      	ldr	r3, [pc, #112]	; (80029c0 <xTaskResumeAll+0x11c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1cc      	bne.n	80028f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800295c:	f000 fa18 	bl	8002d90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002960:	4b1c      	ldr	r3, [pc, #112]	; (80029d4 <xTaskResumeAll+0x130>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d010      	beq.n	800298e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800296c:	f000 f836 	bl	80029dc <xTaskIncrementTick>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d002      	beq.n	800297c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002976:	4b16      	ldr	r3, [pc, #88]	; (80029d0 <xTaskResumeAll+0x12c>)
 8002978:	2201      	movs	r2, #1
 800297a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3b01      	subs	r3, #1
 8002980:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1f1      	bne.n	800296c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002988:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <xTaskResumeAll+0x130>)
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800298e:	4b10      	ldr	r3, [pc, #64]	; (80029d0 <xTaskResumeAll+0x12c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d009      	beq.n	80029aa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002996:	2301      	movs	r3, #1
 8002998:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800299a:	4b0f      	ldr	r3, [pc, #60]	; (80029d8 <xTaskResumeAll+0x134>)
 800299c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	f3bf 8f4f 	dsb	sy
 80029a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80029aa:	f000 fb9f 	bl	80030ec <vPortExitCritical>

	return xAlreadyYielded;
 80029ae:	68bb      	ldr	r3, [r7, #8]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	200004fc 	.word	0x200004fc
 80029bc:	200004d4 	.word	0x200004d4
 80029c0:	20000494 	.word	0x20000494
 80029c4:	200004dc 	.word	0x200004dc
 80029c8:	200003d8 	.word	0x200003d8
 80029cc:	200003d4 	.word	0x200003d4
 80029d0:	200004e8 	.word	0x200004e8
 80029d4:	200004e4 	.word	0x200004e4
 80029d8:	e000ed04 	.word	0xe000ed04

080029dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80029e2:	2300      	movs	r3, #0
 80029e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029e6:	4b51      	ldr	r3, [pc, #324]	; (8002b2c <xTaskIncrementTick+0x150>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f040 808d 	bne.w	8002b0a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80029f0:	4b4f      	ldr	r3, [pc, #316]	; (8002b30 <xTaskIncrementTick+0x154>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	3301      	adds	r3, #1
 80029f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80029f8:	4a4d      	ldr	r2, [pc, #308]	; (8002b30 <xTaskIncrementTick+0x154>)
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d120      	bne.n	8002a46 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002a04:	4b4b      	ldr	r3, [pc, #300]	; (8002b34 <xTaskIncrementTick+0x158>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00a      	beq.n	8002a24 <xTaskIncrementTick+0x48>
	__asm volatile
 8002a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a12:	f383 8811 	msr	BASEPRI, r3
 8002a16:	f3bf 8f6f 	isb	sy
 8002a1a:	f3bf 8f4f 	dsb	sy
 8002a1e:	603b      	str	r3, [r7, #0]
}
 8002a20:	bf00      	nop
 8002a22:	e7fe      	b.n	8002a22 <xTaskIncrementTick+0x46>
 8002a24:	4b43      	ldr	r3, [pc, #268]	; (8002b34 <xTaskIncrementTick+0x158>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	4b43      	ldr	r3, [pc, #268]	; (8002b38 <xTaskIncrementTick+0x15c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a41      	ldr	r2, [pc, #260]	; (8002b34 <xTaskIncrementTick+0x158>)
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	4a41      	ldr	r2, [pc, #260]	; (8002b38 <xTaskIncrementTick+0x15c>)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6013      	str	r3, [r2, #0]
 8002a38:	4b40      	ldr	r3, [pc, #256]	; (8002b3c <xTaskIncrementTick+0x160>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	4a3f      	ldr	r2, [pc, #252]	; (8002b3c <xTaskIncrementTick+0x160>)
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	f000 f9a5 	bl	8002d90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002a46:	4b3e      	ldr	r3, [pc, #248]	; (8002b40 <xTaskIncrementTick+0x164>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d34d      	bcc.n	8002aec <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a50:	4b38      	ldr	r3, [pc, #224]	; (8002b34 <xTaskIncrementTick+0x158>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <xTaskIncrementTick+0x82>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e000      	b.n	8002a60 <xTaskIncrementTick+0x84>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d004      	beq.n	8002a6e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a64:	4b36      	ldr	r3, [pc, #216]	; (8002b40 <xTaskIncrementTick+0x164>)
 8002a66:	f04f 32ff 	mov.w	r2, #4294967295
 8002a6a:	601a      	str	r2, [r3, #0]
					break;
 8002a6c:	e03e      	b.n	8002aec <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002a6e:	4b31      	ldr	r3, [pc, #196]	; (8002b34 <xTaskIncrementTick+0x158>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d203      	bcs.n	8002a8e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002a86:	4a2e      	ldr	r2, [pc, #184]	; (8002b40 <xTaskIncrementTick+0x164>)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6013      	str	r3, [r2, #0]
						break;
 8002a8c:	e02e      	b.n	8002aec <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	3304      	adds	r3, #4
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff fc90 	bl	80023b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d004      	beq.n	8002aaa <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	3318      	adds	r3, #24
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff fc87 	bl	80023b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aae:	2201      	movs	r2, #1
 8002ab0:	409a      	lsls	r2, r3
 8002ab2:	4b24      	ldr	r3, [pc, #144]	; (8002b44 <xTaskIncrementTick+0x168>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	4a22      	ldr	r2, [pc, #136]	; (8002b44 <xTaskIncrementTick+0x168>)
 8002aba:	6013      	str	r3, [r2, #0]
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4a1f      	ldr	r2, [pc, #124]	; (8002b48 <xTaskIncrementTick+0x16c>)
 8002aca:	441a      	add	r2, r3
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	3304      	adds	r3, #4
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4610      	mov	r0, r2
 8002ad4:	f7ff fc15 	bl	8002302 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002adc:	4b1b      	ldr	r3, [pc, #108]	; (8002b4c <xTaskIncrementTick+0x170>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d3b4      	bcc.n	8002a50 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002aea:	e7b1      	b.n	8002a50 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002aec:	4b17      	ldr	r3, [pc, #92]	; (8002b4c <xTaskIncrementTick+0x170>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af2:	4915      	ldr	r1, [pc, #84]	; (8002b48 <xTaskIncrementTick+0x16c>)
 8002af4:	4613      	mov	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d907      	bls.n	8002b14 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002b04:	2301      	movs	r3, #1
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	e004      	b.n	8002b14 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002b0a:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <xTaskIncrementTick+0x174>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	4a0f      	ldr	r2, [pc, #60]	; (8002b50 <xTaskIncrementTick+0x174>)
 8002b12:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002b14:	4b0f      	ldr	r3, [pc, #60]	; (8002b54 <xTaskIncrementTick+0x178>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002b20:	697b      	ldr	r3, [r7, #20]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	200004fc 	.word	0x200004fc
 8002b30:	200004d8 	.word	0x200004d8
 8002b34:	2000048c 	.word	0x2000048c
 8002b38:	20000490 	.word	0x20000490
 8002b3c:	200004ec 	.word	0x200004ec
 8002b40:	200004f4 	.word	0x200004f4
 8002b44:	200004dc 	.word	0x200004dc
 8002b48:	200003d8 	.word	0x200003d8
 8002b4c:	200003d4 	.word	0x200003d4
 8002b50:	200004e4 	.word	0x200004e4
 8002b54:	200004e8 	.word	0x200004e8

08002b58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b087      	sub	sp, #28
 8002b5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002b5e:	4b29      	ldr	r3, [pc, #164]	; (8002c04 <vTaskSwitchContext+0xac>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002b66:	4b28      	ldr	r3, [pc, #160]	; (8002c08 <vTaskSwitchContext+0xb0>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002b6c:	e044      	b.n	8002bf8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8002b6e:	4b26      	ldr	r3, [pc, #152]	; (8002c08 <vTaskSwitchContext+0xb0>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002b74:	4b25      	ldr	r3, [pc, #148]	; (8002c0c <vTaskSwitchContext+0xb4>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	fab3 f383 	clz	r3, r3
 8002b80:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002b82:	7afb      	ldrb	r3, [r7, #11]
 8002b84:	f1c3 031f 	rsb	r3, r3, #31
 8002b88:	617b      	str	r3, [r7, #20]
 8002b8a:	4921      	ldr	r1, [pc, #132]	; (8002c10 <vTaskSwitchContext+0xb8>)
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10a      	bne.n	8002bb4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8002b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba2:	f383 8811 	msr	BASEPRI, r3
 8002ba6:	f3bf 8f6f 	isb	sy
 8002baa:	f3bf 8f4f 	dsb	sy
 8002bae:	607b      	str	r3, [r7, #4]
}
 8002bb0:	bf00      	nop
 8002bb2:	e7fe      	b.n	8002bb2 <vTaskSwitchContext+0x5a>
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4a14      	ldr	r2, [pc, #80]	; (8002c10 <vTaskSwitchContext+0xb8>)
 8002bc0:	4413      	add	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	605a      	str	r2, [r3, #4]
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	3308      	adds	r3, #8
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d104      	bne.n	8002be4 <vTaskSwitchContext+0x8c>
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	605a      	str	r2, [r3, #4]
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	4a0a      	ldr	r2, [pc, #40]	; (8002c14 <vTaskSwitchContext+0xbc>)
 8002bec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002bee:	4b09      	ldr	r3, [pc, #36]	; (8002c14 <vTaskSwitchContext+0xbc>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	334c      	adds	r3, #76	; 0x4c
 8002bf4:	4a08      	ldr	r2, [pc, #32]	; (8002c18 <vTaskSwitchContext+0xc0>)
 8002bf6:	6013      	str	r3, [r2, #0]
}
 8002bf8:	bf00      	nop
 8002bfa:	371c      	adds	r7, #28
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bc80      	pop	{r7}
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	200004fc 	.word	0x200004fc
 8002c08:	200004e8 	.word	0x200004e8
 8002c0c:	200004dc 	.word	0x200004dc
 8002c10:	200003d8 	.word	0x200003d8
 8002c14:	200003d4 	.word	0x200003d4
 8002c18:	20000010 	.word	0x20000010

08002c1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002c24:	f000 f852 	bl	8002ccc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <prvIdleTask+0x28>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d9f9      	bls.n	8002c24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002c30:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <prvIdleTask+0x2c>)
 8002c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	f3bf 8f4f 	dsb	sy
 8002c3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002c40:	e7f0      	b.n	8002c24 <prvIdleTask+0x8>
 8002c42:	bf00      	nop
 8002c44:	200003d8 	.word	0x200003d8
 8002c48:	e000ed04 	.word	0xe000ed04

08002c4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c52:	2300      	movs	r3, #0
 8002c54:	607b      	str	r3, [r7, #4]
 8002c56:	e00c      	b.n	8002c72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4a12      	ldr	r2, [pc, #72]	; (8002cac <prvInitialiseTaskLists+0x60>)
 8002c64:	4413      	add	r3, r2
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff fb20 	bl	80022ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	607b      	str	r3, [r7, #4]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b06      	cmp	r3, #6
 8002c76:	d9ef      	bls.n	8002c58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002c78:	480d      	ldr	r0, [pc, #52]	; (8002cb0 <prvInitialiseTaskLists+0x64>)
 8002c7a:	f7ff fb17 	bl	80022ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002c7e:	480d      	ldr	r0, [pc, #52]	; (8002cb4 <prvInitialiseTaskLists+0x68>)
 8002c80:	f7ff fb14 	bl	80022ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002c84:	480c      	ldr	r0, [pc, #48]	; (8002cb8 <prvInitialiseTaskLists+0x6c>)
 8002c86:	f7ff fb11 	bl	80022ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002c8a:	480c      	ldr	r0, [pc, #48]	; (8002cbc <prvInitialiseTaskLists+0x70>)
 8002c8c:	f7ff fb0e 	bl	80022ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002c90:	480b      	ldr	r0, [pc, #44]	; (8002cc0 <prvInitialiseTaskLists+0x74>)
 8002c92:	f7ff fb0b 	bl	80022ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002c96:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <prvInitialiseTaskLists+0x78>)
 8002c98:	4a05      	ldr	r2, [pc, #20]	; (8002cb0 <prvInitialiseTaskLists+0x64>)
 8002c9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002c9c:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <prvInitialiseTaskLists+0x7c>)
 8002c9e:	4a05      	ldr	r2, [pc, #20]	; (8002cb4 <prvInitialiseTaskLists+0x68>)
 8002ca0:	601a      	str	r2, [r3, #0]
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	200003d8 	.word	0x200003d8
 8002cb0:	20000464 	.word	0x20000464
 8002cb4:	20000478 	.word	0x20000478
 8002cb8:	20000494 	.word	0x20000494
 8002cbc:	200004a8 	.word	0x200004a8
 8002cc0:	200004c0 	.word	0x200004c0
 8002cc4:	2000048c 	.word	0x2000048c
 8002cc8:	20000490 	.word	0x20000490

08002ccc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002cd2:	e019      	b.n	8002d08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002cd4:	f000 f9da 	bl	800308c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002cd8:	4b10      	ldr	r3, [pc, #64]	; (8002d1c <prvCheckTasksWaitingTermination+0x50>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff fb67 	bl	80023b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002cea:	4b0d      	ldr	r3, [pc, #52]	; (8002d20 <prvCheckTasksWaitingTermination+0x54>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	4a0b      	ldr	r2, [pc, #44]	; (8002d20 <prvCheckTasksWaitingTermination+0x54>)
 8002cf2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <prvCheckTasksWaitingTermination+0x58>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	4a0a      	ldr	r2, [pc, #40]	; (8002d24 <prvCheckTasksWaitingTermination+0x58>)
 8002cfc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002cfe:	f000 f9f5 	bl	80030ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f810 	bl	8002d28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d08:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <prvCheckTasksWaitingTermination+0x58>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1e1      	bne.n	8002cd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002d10:	bf00      	nop
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	200004a8 	.word	0x200004a8
 8002d20:	200004d4 	.word	0x200004d4
 8002d24:	200004bc 	.word	0x200004bc

08002d28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	334c      	adds	r3, #76	; 0x4c
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 fc7f 	bl	8003638 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d108      	bne.n	8002d56 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 fb25 	bl	8003398 <vPortFree>
				vPortFree( pxTCB );
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 fb22 	bl	8003398 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002d54:	e018      	b.n	8002d88 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d103      	bne.n	8002d68 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 fb19 	bl	8003398 <vPortFree>
	}
 8002d66:	e00f      	b.n	8002d88 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d00a      	beq.n	8002d88 <prvDeleteTCB+0x60>
	__asm volatile
 8002d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d76:	f383 8811 	msr	BASEPRI, r3
 8002d7a:	f3bf 8f6f 	isb	sy
 8002d7e:	f3bf 8f4f 	dsb	sy
 8002d82:	60fb      	str	r3, [r7, #12]
}
 8002d84:	bf00      	nop
 8002d86:	e7fe      	b.n	8002d86 <prvDeleteTCB+0x5e>
	}
 8002d88:	bf00      	nop
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d96:	4b0e      	ldr	r3, [pc, #56]	; (8002dd0 <prvResetNextTaskUnblockTime+0x40>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <prvResetNextTaskUnblockTime+0x14>
 8002da0:	2301      	movs	r3, #1
 8002da2:	e000      	b.n	8002da6 <prvResetNextTaskUnblockTime+0x16>
 8002da4:	2300      	movs	r3, #0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d004      	beq.n	8002db4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002daa:	4b0a      	ldr	r3, [pc, #40]	; (8002dd4 <prvResetNextTaskUnblockTime+0x44>)
 8002dac:	f04f 32ff 	mov.w	r2, #4294967295
 8002db0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002db2:	e008      	b.n	8002dc6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002db4:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <prvResetNextTaskUnblockTime+0x40>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	4a04      	ldr	r2, [pc, #16]	; (8002dd4 <prvResetNextTaskUnblockTime+0x44>)
 8002dc4:	6013      	str	r3, [r2, #0]
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr
 8002dd0:	2000048c 	.word	0x2000048c
 8002dd4:	200004f4 	.word	0x200004f4

08002dd8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002de2:	4b29      	ldr	r3, [pc, #164]	; (8002e88 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002de8:	4b28      	ldr	r3, [pc, #160]	; (8002e8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	3304      	adds	r3, #4
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff fae2 	bl	80023b8 <uxListRemove>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10b      	bne.n	8002e12 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002dfa:	4b24      	ldr	r3, [pc, #144]	; (8002e8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e00:	2201      	movs	r2, #1
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	43da      	mvns	r2, r3
 8002e08:	4b21      	ldr	r3, [pc, #132]	; (8002e90 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	4a20      	ldr	r2, [pc, #128]	; (8002e90 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002e10:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e18:	d10a      	bne.n	8002e30 <prvAddCurrentTaskToDelayedList+0x58>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d007      	beq.n	8002e30 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e20:	4b1a      	ldr	r3, [pc, #104]	; (8002e8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	3304      	adds	r3, #4
 8002e26:	4619      	mov	r1, r3
 8002e28:	481a      	ldr	r0, [pc, #104]	; (8002e94 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002e2a:	f7ff fa6a 	bl	8002302 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002e2e:	e026      	b.n	8002e7e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4413      	add	r3, r2
 8002e36:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002e38:	4b14      	ldr	r3, [pc, #80]	; (8002e8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d209      	bcs.n	8002e5c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e48:	4b13      	ldr	r3, [pc, #76]	; (8002e98 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	4b0f      	ldr	r3, [pc, #60]	; (8002e8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	3304      	adds	r3, #4
 8002e52:	4619      	mov	r1, r3
 8002e54:	4610      	mov	r0, r2
 8002e56:	f7ff fa77 	bl	8002348 <vListInsert>
}
 8002e5a:	e010      	b.n	8002e7e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e5c:	4b0f      	ldr	r3, [pc, #60]	; (8002e9c <prvAddCurrentTaskToDelayedList+0xc4>)
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	3304      	adds	r3, #4
 8002e66:	4619      	mov	r1, r3
 8002e68:	4610      	mov	r0, r2
 8002e6a:	f7ff fa6d 	bl	8002348 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002e6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d202      	bcs.n	8002e7e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002e78:	4a09      	ldr	r2, [pc, #36]	; (8002ea0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	6013      	str	r3, [r2, #0]
}
 8002e7e:	bf00      	nop
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	200004d8 	.word	0x200004d8
 8002e8c:	200003d4 	.word	0x200003d4
 8002e90:	200004dc 	.word	0x200004dc
 8002e94:	200004c0 	.word	0x200004c0
 8002e98:	20000490 	.word	0x20000490
 8002e9c:	2000048c 	.word	0x2000048c
 8002ea0:	200004f4 	.word	0x200004f4

08002ea4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	3b04      	subs	r3, #4
 8002eb4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ebc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	3b04      	subs	r3, #4
 8002ec2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	f023 0201 	bic.w	r2, r3, #1
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	3b04      	subs	r3, #4
 8002ed2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002ed4:	4a08      	ldr	r2, [pc, #32]	; (8002ef8 <pxPortInitialiseStack+0x54>)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	3b14      	subs	r3, #20
 8002ede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	3b20      	subs	r3, #32
 8002eea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002eec:	68fb      	ldr	r3, [r7, #12]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr
 8002ef8:	08002efd 	.word	0x08002efd

08002efc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002f02:	2300      	movs	r3, #0
 8002f04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002f06:	4b12      	ldr	r3, [pc, #72]	; (8002f50 <prvTaskExitError+0x54>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0e:	d00a      	beq.n	8002f26 <prvTaskExitError+0x2a>
	__asm volatile
 8002f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f14:	f383 8811 	msr	BASEPRI, r3
 8002f18:	f3bf 8f6f 	isb	sy
 8002f1c:	f3bf 8f4f 	dsb	sy
 8002f20:	60fb      	str	r3, [r7, #12]
}
 8002f22:	bf00      	nop
 8002f24:	e7fe      	b.n	8002f24 <prvTaskExitError+0x28>
	__asm volatile
 8002f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2a:	f383 8811 	msr	BASEPRI, r3
 8002f2e:	f3bf 8f6f 	isb	sy
 8002f32:	f3bf 8f4f 	dsb	sy
 8002f36:	60bb      	str	r3, [r7, #8]
}
 8002f38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002f3a:	bf00      	nop
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0fc      	beq.n	8002f3c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002f42:	bf00      	nop
 8002f44:	bf00      	nop
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bc80      	pop	{r7}
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	2000000c 	.word	0x2000000c
	...

08002f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002f60:	4b07      	ldr	r3, [pc, #28]	; (8002f80 <pxCurrentTCBConst2>)
 8002f62:	6819      	ldr	r1, [r3, #0]
 8002f64:	6808      	ldr	r0, [r1, #0]
 8002f66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002f6a:	f380 8809 	msr	PSP, r0
 8002f6e:	f3bf 8f6f 	isb	sy
 8002f72:	f04f 0000 	mov.w	r0, #0
 8002f76:	f380 8811 	msr	BASEPRI, r0
 8002f7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8002f7e:	4770      	bx	lr

08002f80 <pxCurrentTCBConst2>:
 8002f80:	200003d4 	.word	0x200003d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002f84:	bf00      	nop
 8002f86:	bf00      	nop

08002f88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002f88:	4806      	ldr	r0, [pc, #24]	; (8002fa4 <prvPortStartFirstTask+0x1c>)
 8002f8a:	6800      	ldr	r0, [r0, #0]
 8002f8c:	6800      	ldr	r0, [r0, #0]
 8002f8e:	f380 8808 	msr	MSP, r0
 8002f92:	b662      	cpsie	i
 8002f94:	b661      	cpsie	f
 8002f96:	f3bf 8f4f 	dsb	sy
 8002f9a:	f3bf 8f6f 	isb	sy
 8002f9e:	df00      	svc	0
 8002fa0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002fa2:	bf00      	nop
 8002fa4:	e000ed08 	.word	0xe000ed08

08002fa8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002fae:	4b32      	ldr	r3, [pc, #200]	; (8003078 <xPortStartScheduler+0xd0>)
 8002fb0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	22ff      	movs	r2, #255	; 0xff
 8002fbe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002fc8:	78fb      	ldrb	r3, [r7, #3]
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	4b2a      	ldr	r3, [pc, #168]	; (800307c <xPortStartScheduler+0xd4>)
 8002fd4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002fd6:	4b2a      	ldr	r3, [pc, #168]	; (8003080 <xPortStartScheduler+0xd8>)
 8002fd8:	2207      	movs	r2, #7
 8002fda:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002fdc:	e009      	b.n	8002ff2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8002fde:	4b28      	ldr	r3, [pc, #160]	; (8003080 <xPortStartScheduler+0xd8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	4a26      	ldr	r2, [pc, #152]	; (8003080 <xPortStartScheduler+0xd8>)
 8002fe6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002fe8:	78fb      	ldrb	r3, [r7, #3]
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ff2:	78fb      	ldrb	r3, [r7, #3]
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffa:	2b80      	cmp	r3, #128	; 0x80
 8002ffc:	d0ef      	beq.n	8002fde <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002ffe:	4b20      	ldr	r3, [pc, #128]	; (8003080 <xPortStartScheduler+0xd8>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f1c3 0307 	rsb	r3, r3, #7
 8003006:	2b04      	cmp	r3, #4
 8003008:	d00a      	beq.n	8003020 <xPortStartScheduler+0x78>
	__asm volatile
 800300a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300e:	f383 8811 	msr	BASEPRI, r3
 8003012:	f3bf 8f6f 	isb	sy
 8003016:	f3bf 8f4f 	dsb	sy
 800301a:	60bb      	str	r3, [r7, #8]
}
 800301c:	bf00      	nop
 800301e:	e7fe      	b.n	800301e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003020:	4b17      	ldr	r3, [pc, #92]	; (8003080 <xPortStartScheduler+0xd8>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	021b      	lsls	r3, r3, #8
 8003026:	4a16      	ldr	r2, [pc, #88]	; (8003080 <xPortStartScheduler+0xd8>)
 8003028:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800302a:	4b15      	ldr	r3, [pc, #84]	; (8003080 <xPortStartScheduler+0xd8>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003032:	4a13      	ldr	r2, [pc, #76]	; (8003080 <xPortStartScheduler+0xd8>)
 8003034:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	b2da      	uxtb	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800303e:	4b11      	ldr	r3, [pc, #68]	; (8003084 <xPortStartScheduler+0xdc>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a10      	ldr	r2, [pc, #64]	; (8003084 <xPortStartScheduler+0xdc>)
 8003044:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003048:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800304a:	4b0e      	ldr	r3, [pc, #56]	; (8003084 <xPortStartScheduler+0xdc>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a0d      	ldr	r2, [pc, #52]	; (8003084 <xPortStartScheduler+0xdc>)
 8003050:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003054:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003056:	f000 f8b9 	bl	80031cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800305a:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <xPortStartScheduler+0xe0>)
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003060:	f7ff ff92 	bl	8002f88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003064:	f7ff fd78 	bl	8002b58 <vTaskSwitchContext>
	prvTaskExitError();
 8003068:	f7ff ff48 	bl	8002efc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	e000e400 	.word	0xe000e400
 800307c:	20000500 	.word	0x20000500
 8003080:	20000504 	.word	0x20000504
 8003084:	e000ed20 	.word	0xe000ed20
 8003088:	2000000c 	.word	0x2000000c

0800308c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
	__asm volatile
 8003092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003096:	f383 8811 	msr	BASEPRI, r3
 800309a:	f3bf 8f6f 	isb	sy
 800309e:	f3bf 8f4f 	dsb	sy
 80030a2:	607b      	str	r3, [r7, #4]
}
 80030a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80030a6:	4b0f      	ldr	r3, [pc, #60]	; (80030e4 <vPortEnterCritical+0x58>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	3301      	adds	r3, #1
 80030ac:	4a0d      	ldr	r2, [pc, #52]	; (80030e4 <vPortEnterCritical+0x58>)
 80030ae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80030b0:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <vPortEnterCritical+0x58>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d10f      	bne.n	80030d8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80030b8:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <vPortEnterCritical+0x5c>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00a      	beq.n	80030d8 <vPortEnterCritical+0x4c>
	__asm volatile
 80030c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c6:	f383 8811 	msr	BASEPRI, r3
 80030ca:	f3bf 8f6f 	isb	sy
 80030ce:	f3bf 8f4f 	dsb	sy
 80030d2:	603b      	str	r3, [r7, #0]
}
 80030d4:	bf00      	nop
 80030d6:	e7fe      	b.n	80030d6 <vPortEnterCritical+0x4a>
	}
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	2000000c 	.word	0x2000000c
 80030e8:	e000ed04 	.word	0xe000ed04

080030ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80030f2:	4b11      	ldr	r3, [pc, #68]	; (8003138 <vPortExitCritical+0x4c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10a      	bne.n	8003110 <vPortExitCritical+0x24>
	__asm volatile
 80030fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fe:	f383 8811 	msr	BASEPRI, r3
 8003102:	f3bf 8f6f 	isb	sy
 8003106:	f3bf 8f4f 	dsb	sy
 800310a:	607b      	str	r3, [r7, #4]
}
 800310c:	bf00      	nop
 800310e:	e7fe      	b.n	800310e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003110:	4b09      	ldr	r3, [pc, #36]	; (8003138 <vPortExitCritical+0x4c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	3b01      	subs	r3, #1
 8003116:	4a08      	ldr	r2, [pc, #32]	; (8003138 <vPortExitCritical+0x4c>)
 8003118:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800311a:	4b07      	ldr	r3, [pc, #28]	; (8003138 <vPortExitCritical+0x4c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d105      	bne.n	800312e <vPortExitCritical+0x42>
 8003122:	2300      	movs	r3, #0
 8003124:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800312c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr
 8003138:	2000000c 	.word	0x2000000c
 800313c:	00000000 	.word	0x00000000

08003140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003140:	f3ef 8009 	mrs	r0, PSP
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	4b0d      	ldr	r3, [pc, #52]	; (8003180 <pxCurrentTCBConst>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003150:	6010      	str	r0, [r2, #0]
 8003152:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003156:	f04f 0050 	mov.w	r0, #80	; 0x50
 800315a:	f380 8811 	msr	BASEPRI, r0
 800315e:	f7ff fcfb 	bl	8002b58 <vTaskSwitchContext>
 8003162:	f04f 0000 	mov.w	r0, #0
 8003166:	f380 8811 	msr	BASEPRI, r0
 800316a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800316e:	6819      	ldr	r1, [r3, #0]
 8003170:	6808      	ldr	r0, [r1, #0]
 8003172:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003176:	f380 8809 	msr	PSP, r0
 800317a:	f3bf 8f6f 	isb	sy
 800317e:	4770      	bx	lr

08003180 <pxCurrentTCBConst>:
 8003180:	200003d4 	.word	0x200003d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003184:	bf00      	nop
 8003186:	bf00      	nop

08003188 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
	__asm volatile
 800318e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003192:	f383 8811 	msr	BASEPRI, r3
 8003196:	f3bf 8f6f 	isb	sy
 800319a:	f3bf 8f4f 	dsb	sy
 800319e:	607b      	str	r3, [r7, #4]
}
 80031a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80031a2:	f7ff fc1b 	bl	80029dc <xTaskIncrementTick>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80031ac:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <SysTick_Handler+0x40>)
 80031ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	2300      	movs	r3, #0
 80031b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	f383 8811 	msr	BASEPRI, r3
}
 80031be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80031c0:	bf00      	nop
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	e000ed04 	.word	0xe000ed04

080031cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80031d0:	4b0a      	ldr	r3, [pc, #40]	; (80031fc <vPortSetupTimerInterrupt+0x30>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80031d6:	4b0a      	ldr	r3, [pc, #40]	; (8003200 <vPortSetupTimerInterrupt+0x34>)
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80031dc:	4b09      	ldr	r3, [pc, #36]	; (8003204 <vPortSetupTimerInterrupt+0x38>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a09      	ldr	r2, [pc, #36]	; (8003208 <vPortSetupTimerInterrupt+0x3c>)
 80031e2:	fba2 2303 	umull	r2, r3, r2, r3
 80031e6:	099b      	lsrs	r3, r3, #6
 80031e8:	4a08      	ldr	r2, [pc, #32]	; (800320c <vPortSetupTimerInterrupt+0x40>)
 80031ea:	3b01      	subs	r3, #1
 80031ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80031ee:	4b03      	ldr	r3, [pc, #12]	; (80031fc <vPortSetupTimerInterrupt+0x30>)
 80031f0:	2207      	movs	r2, #7
 80031f2:	601a      	str	r2, [r3, #0]
}
 80031f4:	bf00      	nop
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr
 80031fc:	e000e010 	.word	0xe000e010
 8003200:	e000e018 	.word	0xe000e018
 8003204:	20000000 	.word	0x20000000
 8003208:	10624dd3 	.word	0x10624dd3
 800320c:	e000e014 	.word	0xe000e014

08003210 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08a      	sub	sp, #40	; 0x28
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003218:	2300      	movs	r3, #0
 800321a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800321c:	f7ff fb34 	bl	8002888 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003220:	4b58      	ldr	r3, [pc, #352]	; (8003384 <pvPortMalloc+0x174>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003228:	f000 f910 	bl	800344c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800322c:	4b56      	ldr	r3, [pc, #344]	; (8003388 <pvPortMalloc+0x178>)
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4013      	ands	r3, r2
 8003234:	2b00      	cmp	r3, #0
 8003236:	f040 808e 	bne.w	8003356 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d01d      	beq.n	800327c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003240:	2208      	movs	r2, #8
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4413      	add	r3, r2
 8003246:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	2b00      	cmp	r3, #0
 8003250:	d014      	beq.n	800327c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f023 0307 	bic.w	r3, r3, #7
 8003258:	3308      	adds	r3, #8
 800325a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00a      	beq.n	800327c <pvPortMalloc+0x6c>
	__asm volatile
 8003266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326a:	f383 8811 	msr	BASEPRI, r3
 800326e:	f3bf 8f6f 	isb	sy
 8003272:	f3bf 8f4f 	dsb	sy
 8003276:	617b      	str	r3, [r7, #20]
}
 8003278:	bf00      	nop
 800327a:	e7fe      	b.n	800327a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d069      	beq.n	8003356 <pvPortMalloc+0x146>
 8003282:	4b42      	ldr	r3, [pc, #264]	; (800338c <pvPortMalloc+0x17c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	429a      	cmp	r2, r3
 800328a:	d864      	bhi.n	8003356 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800328c:	4b40      	ldr	r3, [pc, #256]	; (8003390 <pvPortMalloc+0x180>)
 800328e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003290:	4b3f      	ldr	r3, [pc, #252]	; (8003390 <pvPortMalloc+0x180>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003296:	e004      	b.n	80032a2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d903      	bls.n	80032b4 <pvPortMalloc+0xa4>
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1f1      	bne.n	8003298 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80032b4:	4b33      	ldr	r3, [pc, #204]	; (8003384 <pvPortMalloc+0x174>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d04b      	beq.n	8003356 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80032be:	6a3b      	ldr	r3, [r7, #32]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2208      	movs	r2, #8
 80032c4:	4413      	add	r3, r2
 80032c6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	6a3b      	ldr	r3, [r7, #32]
 80032ce:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80032d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	1ad2      	subs	r2, r2, r3
 80032d8:	2308      	movs	r3, #8
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	429a      	cmp	r2, r3
 80032de:	d91f      	bls.n	8003320 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80032e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4413      	add	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00a      	beq.n	8003308 <pvPortMalloc+0xf8>
	__asm volatile
 80032f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f6:	f383 8811 	msr	BASEPRI, r3
 80032fa:	f3bf 8f6f 	isb	sy
 80032fe:	f3bf 8f4f 	dsb	sy
 8003302:	613b      	str	r3, [r7, #16]
}
 8003304:	bf00      	nop
 8003306:	e7fe      	b.n	8003306 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	1ad2      	subs	r2, r2, r3
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800331a:	69b8      	ldr	r0, [r7, #24]
 800331c:	f000 f8f8 	bl	8003510 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003320:	4b1a      	ldr	r3, [pc, #104]	; (800338c <pvPortMalloc+0x17c>)
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	4a18      	ldr	r2, [pc, #96]	; (800338c <pvPortMalloc+0x17c>)
 800332c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800332e:	4b17      	ldr	r3, [pc, #92]	; (800338c <pvPortMalloc+0x17c>)
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	4b18      	ldr	r3, [pc, #96]	; (8003394 <pvPortMalloc+0x184>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	d203      	bcs.n	8003342 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800333a:	4b14      	ldr	r3, [pc, #80]	; (800338c <pvPortMalloc+0x17c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a15      	ldr	r2, [pc, #84]	; (8003394 <pvPortMalloc+0x184>)
 8003340:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	4b10      	ldr	r3, [pc, #64]	; (8003388 <pvPortMalloc+0x178>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	431a      	orrs	r2, r3
 800334c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003356:	f7ff faa5 	bl	80028a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00a      	beq.n	800337a <pvPortMalloc+0x16a>
	__asm volatile
 8003364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003368:	f383 8811 	msr	BASEPRI, r3
 800336c:	f3bf 8f6f 	isb	sy
 8003370:	f3bf 8f4f 	dsb	sy
 8003374:	60fb      	str	r3, [r7, #12]
}
 8003376:	bf00      	nop
 8003378:	e7fe      	b.n	8003378 <pvPortMalloc+0x168>
	return pvReturn;
 800337a:	69fb      	ldr	r3, [r7, #28]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3728      	adds	r7, #40	; 0x28
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	20001110 	.word	0x20001110
 8003388:	2000111c 	.word	0x2000111c
 800338c:	20001114 	.word	0x20001114
 8003390:	20001108 	.word	0x20001108
 8003394:	20001118 	.word	0x20001118

08003398 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d048      	beq.n	800343c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80033aa:	2308      	movs	r3, #8
 80033ac:	425b      	negs	r3, r3
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	4413      	add	r3, r2
 80033b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	4b21      	ldr	r3, [pc, #132]	; (8003444 <vPortFree+0xac>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4013      	ands	r3, r2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10a      	bne.n	80033dc <vPortFree+0x44>
	__asm volatile
 80033c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ca:	f383 8811 	msr	BASEPRI, r3
 80033ce:	f3bf 8f6f 	isb	sy
 80033d2:	f3bf 8f4f 	dsb	sy
 80033d6:	60fb      	str	r3, [r7, #12]
}
 80033d8:	bf00      	nop
 80033da:	e7fe      	b.n	80033da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00a      	beq.n	80033fa <vPortFree+0x62>
	__asm volatile
 80033e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e8:	f383 8811 	msr	BASEPRI, r3
 80033ec:	f3bf 8f6f 	isb	sy
 80033f0:	f3bf 8f4f 	dsb	sy
 80033f4:	60bb      	str	r3, [r7, #8]
}
 80033f6:	bf00      	nop
 80033f8:	e7fe      	b.n	80033f8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	4b11      	ldr	r3, [pc, #68]	; (8003444 <vPortFree+0xac>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4013      	ands	r3, r2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d019      	beq.n	800343c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d115      	bne.n	800343c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <vPortFree+0xac>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	43db      	mvns	r3, r3
 800341a:	401a      	ands	r2, r3
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003420:	f7ff fa32 	bl	8002888 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	4b07      	ldr	r3, [pc, #28]	; (8003448 <vPortFree+0xb0>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4413      	add	r3, r2
 800342e:	4a06      	ldr	r2, [pc, #24]	; (8003448 <vPortFree+0xb0>)
 8003430:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003432:	6938      	ldr	r0, [r7, #16]
 8003434:	f000 f86c 	bl	8003510 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003438:	f7ff fa34 	bl	80028a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800343c:	bf00      	nop
 800343e:	3718      	adds	r7, #24
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	2000111c 	.word	0x2000111c
 8003448:	20001114 	.word	0x20001114

0800344c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003452:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003456:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003458:	4b27      	ldr	r3, [pc, #156]	; (80034f8 <prvHeapInit+0xac>)
 800345a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00c      	beq.n	8003480 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	3307      	adds	r3, #7
 800346a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f023 0307 	bic.w	r3, r3, #7
 8003472:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	4a1f      	ldr	r2, [pc, #124]	; (80034f8 <prvHeapInit+0xac>)
 800347c:	4413      	add	r3, r2
 800347e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003484:	4a1d      	ldr	r2, [pc, #116]	; (80034fc <prvHeapInit+0xb0>)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800348a:	4b1c      	ldr	r3, [pc, #112]	; (80034fc <prvHeapInit+0xb0>)
 800348c:	2200      	movs	r2, #0
 800348e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	4413      	add	r3, r2
 8003496:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003498:	2208      	movs	r2, #8
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	1a9b      	subs	r3, r3, r2
 800349e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f023 0307 	bic.w	r3, r3, #7
 80034a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4a15      	ldr	r2, [pc, #84]	; (8003500 <prvHeapInit+0xb4>)
 80034ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80034ae:	4b14      	ldr	r3, [pc, #80]	; (8003500 <prvHeapInit+0xb4>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2200      	movs	r2, #0
 80034b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80034b6:	4b12      	ldr	r3, [pc, #72]	; (8003500 <prvHeapInit+0xb4>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	1ad2      	subs	r2, r2, r3
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80034cc:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <prvHeapInit+0xb4>)
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	4a0a      	ldr	r2, [pc, #40]	; (8003504 <prvHeapInit+0xb8>)
 80034da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	4a09      	ldr	r2, [pc, #36]	; (8003508 <prvHeapInit+0xbc>)
 80034e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80034e4:	4b09      	ldr	r3, [pc, #36]	; (800350c <prvHeapInit+0xc0>)
 80034e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80034ea:	601a      	str	r2, [r3, #0]
}
 80034ec:	bf00      	nop
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	20000508 	.word	0x20000508
 80034fc:	20001108 	.word	0x20001108
 8003500:	20001110 	.word	0x20001110
 8003504:	20001118 	.word	0x20001118
 8003508:	20001114 	.word	0x20001114
 800350c:	2000111c 	.word	0x2000111c

08003510 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003518:	4b27      	ldr	r3, [pc, #156]	; (80035b8 <prvInsertBlockIntoFreeList+0xa8>)
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	e002      	b.n	8003524 <prvInsertBlockIntoFreeList+0x14>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	429a      	cmp	r2, r3
 800352c:	d8f7      	bhi.n	800351e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	4413      	add	r3, r2
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	429a      	cmp	r2, r3
 800353e:	d108      	bne.n	8003552 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	441a      	add	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	441a      	add	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	429a      	cmp	r2, r3
 8003564:	d118      	bne.n	8003598 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	4b14      	ldr	r3, [pc, #80]	; (80035bc <prvInsertBlockIntoFreeList+0xac>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	429a      	cmp	r2, r3
 8003570:	d00d      	beq.n	800358e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	441a      	add	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	e008      	b.n	80035a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800358e:	4b0b      	ldr	r3, [pc, #44]	; (80035bc <prvInsertBlockIntoFreeList+0xac>)
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	e003      	b.n	80035a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d002      	beq.n	80035ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035ae:	bf00      	nop
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bc80      	pop	{r7}
 80035b6:	4770      	bx	lr
 80035b8:	20001108 	.word	0x20001108
 80035bc:	20001110 	.word	0x20001110

080035c0 <__libc_init_array>:
 80035c0:	b570      	push	{r4, r5, r6, lr}
 80035c2:	2600      	movs	r6, #0
 80035c4:	4d0c      	ldr	r5, [pc, #48]	; (80035f8 <__libc_init_array+0x38>)
 80035c6:	4c0d      	ldr	r4, [pc, #52]	; (80035fc <__libc_init_array+0x3c>)
 80035c8:	1b64      	subs	r4, r4, r5
 80035ca:	10a4      	asrs	r4, r4, #2
 80035cc:	42a6      	cmp	r6, r4
 80035ce:	d109      	bne.n	80035e4 <__libc_init_array+0x24>
 80035d0:	f000 f8e2 	bl	8003798 <_init>
 80035d4:	2600      	movs	r6, #0
 80035d6:	4d0a      	ldr	r5, [pc, #40]	; (8003600 <__libc_init_array+0x40>)
 80035d8:	4c0a      	ldr	r4, [pc, #40]	; (8003604 <__libc_init_array+0x44>)
 80035da:	1b64      	subs	r4, r4, r5
 80035dc:	10a4      	asrs	r4, r4, #2
 80035de:	42a6      	cmp	r6, r4
 80035e0:	d105      	bne.n	80035ee <__libc_init_array+0x2e>
 80035e2:	bd70      	pop	{r4, r5, r6, pc}
 80035e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80035e8:	4798      	blx	r3
 80035ea:	3601      	adds	r6, #1
 80035ec:	e7ee      	b.n	80035cc <__libc_init_array+0xc>
 80035ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80035f2:	4798      	blx	r3
 80035f4:	3601      	adds	r6, #1
 80035f6:	e7f2      	b.n	80035de <__libc_init_array+0x1e>
 80035f8:	0800386c 	.word	0x0800386c
 80035fc:	0800386c 	.word	0x0800386c
 8003600:	0800386c 	.word	0x0800386c
 8003604:	08003870 	.word	0x08003870

08003608 <__retarget_lock_acquire_recursive>:
 8003608:	4770      	bx	lr

0800360a <__retarget_lock_release_recursive>:
 800360a:	4770      	bx	lr

0800360c <memset>:
 800360c:	4603      	mov	r3, r0
 800360e:	4402      	add	r2, r0
 8003610:	4293      	cmp	r3, r2
 8003612:	d100      	bne.n	8003616 <memset+0xa>
 8003614:	4770      	bx	lr
 8003616:	f803 1b01 	strb.w	r1, [r3], #1
 800361a:	e7f9      	b.n	8003610 <memset+0x4>

0800361c <cleanup_glue>:
 800361c:	b538      	push	{r3, r4, r5, lr}
 800361e:	460c      	mov	r4, r1
 8003620:	6809      	ldr	r1, [r1, #0]
 8003622:	4605      	mov	r5, r0
 8003624:	b109      	cbz	r1, 800362a <cleanup_glue+0xe>
 8003626:	f7ff fff9 	bl	800361c <cleanup_glue>
 800362a:	4621      	mov	r1, r4
 800362c:	4628      	mov	r0, r5
 800362e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003632:	f000 b869 	b.w	8003708 <_free_r>
	...

08003638 <_reclaim_reent>:
 8003638:	4b2c      	ldr	r3, [pc, #176]	; (80036ec <_reclaim_reent+0xb4>)
 800363a:	b570      	push	{r4, r5, r6, lr}
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4604      	mov	r4, r0
 8003640:	4283      	cmp	r3, r0
 8003642:	d051      	beq.n	80036e8 <_reclaim_reent+0xb0>
 8003644:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003646:	b143      	cbz	r3, 800365a <_reclaim_reent+0x22>
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d14a      	bne.n	80036e4 <_reclaim_reent+0xac>
 800364e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003650:	6819      	ldr	r1, [r3, #0]
 8003652:	b111      	cbz	r1, 800365a <_reclaim_reent+0x22>
 8003654:	4620      	mov	r0, r4
 8003656:	f000 f857 	bl	8003708 <_free_r>
 800365a:	6961      	ldr	r1, [r4, #20]
 800365c:	b111      	cbz	r1, 8003664 <_reclaim_reent+0x2c>
 800365e:	4620      	mov	r0, r4
 8003660:	f000 f852 	bl	8003708 <_free_r>
 8003664:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003666:	b111      	cbz	r1, 800366e <_reclaim_reent+0x36>
 8003668:	4620      	mov	r0, r4
 800366a:	f000 f84d 	bl	8003708 <_free_r>
 800366e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003670:	b111      	cbz	r1, 8003678 <_reclaim_reent+0x40>
 8003672:	4620      	mov	r0, r4
 8003674:	f000 f848 	bl	8003708 <_free_r>
 8003678:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800367a:	b111      	cbz	r1, 8003682 <_reclaim_reent+0x4a>
 800367c:	4620      	mov	r0, r4
 800367e:	f000 f843 	bl	8003708 <_free_r>
 8003682:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003684:	b111      	cbz	r1, 800368c <_reclaim_reent+0x54>
 8003686:	4620      	mov	r0, r4
 8003688:	f000 f83e 	bl	8003708 <_free_r>
 800368c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800368e:	b111      	cbz	r1, 8003696 <_reclaim_reent+0x5e>
 8003690:	4620      	mov	r0, r4
 8003692:	f000 f839 	bl	8003708 <_free_r>
 8003696:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003698:	b111      	cbz	r1, 80036a0 <_reclaim_reent+0x68>
 800369a:	4620      	mov	r0, r4
 800369c:	f000 f834 	bl	8003708 <_free_r>
 80036a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036a2:	b111      	cbz	r1, 80036aa <_reclaim_reent+0x72>
 80036a4:	4620      	mov	r0, r4
 80036a6:	f000 f82f 	bl	8003708 <_free_r>
 80036aa:	69a3      	ldr	r3, [r4, #24]
 80036ac:	b1e3      	cbz	r3, 80036e8 <_reclaim_reent+0xb0>
 80036ae:	4620      	mov	r0, r4
 80036b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80036b2:	4798      	blx	r3
 80036b4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80036b6:	b1b9      	cbz	r1, 80036e8 <_reclaim_reent+0xb0>
 80036b8:	4620      	mov	r0, r4
 80036ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80036be:	f7ff bfad 	b.w	800361c <cleanup_glue>
 80036c2:	5949      	ldr	r1, [r1, r5]
 80036c4:	b941      	cbnz	r1, 80036d8 <_reclaim_reent+0xa0>
 80036c6:	3504      	adds	r5, #4
 80036c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036ca:	2d80      	cmp	r5, #128	; 0x80
 80036cc:	68d9      	ldr	r1, [r3, #12]
 80036ce:	d1f8      	bne.n	80036c2 <_reclaim_reent+0x8a>
 80036d0:	4620      	mov	r0, r4
 80036d2:	f000 f819 	bl	8003708 <_free_r>
 80036d6:	e7ba      	b.n	800364e <_reclaim_reent+0x16>
 80036d8:	680e      	ldr	r6, [r1, #0]
 80036da:	4620      	mov	r0, r4
 80036dc:	f000 f814 	bl	8003708 <_free_r>
 80036e0:	4631      	mov	r1, r6
 80036e2:	e7ef      	b.n	80036c4 <_reclaim_reent+0x8c>
 80036e4:	2500      	movs	r5, #0
 80036e6:	e7ef      	b.n	80036c8 <_reclaim_reent+0x90>
 80036e8:	bd70      	pop	{r4, r5, r6, pc}
 80036ea:	bf00      	nop
 80036ec:	20000010 	.word	0x20000010

080036f0 <__malloc_lock>:
 80036f0:	4801      	ldr	r0, [pc, #4]	; (80036f8 <__malloc_lock+0x8>)
 80036f2:	f7ff bf89 	b.w	8003608 <__retarget_lock_acquire_recursive>
 80036f6:	bf00      	nop
 80036f8:	20001120 	.word	0x20001120

080036fc <__malloc_unlock>:
 80036fc:	4801      	ldr	r0, [pc, #4]	; (8003704 <__malloc_unlock+0x8>)
 80036fe:	f7ff bf84 	b.w	800360a <__retarget_lock_release_recursive>
 8003702:	bf00      	nop
 8003704:	20001120 	.word	0x20001120

08003708 <_free_r>:
 8003708:	b538      	push	{r3, r4, r5, lr}
 800370a:	4605      	mov	r5, r0
 800370c:	2900      	cmp	r1, #0
 800370e:	d040      	beq.n	8003792 <_free_r+0x8a>
 8003710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003714:	1f0c      	subs	r4, r1, #4
 8003716:	2b00      	cmp	r3, #0
 8003718:	bfb8      	it	lt
 800371a:	18e4      	addlt	r4, r4, r3
 800371c:	f7ff ffe8 	bl	80036f0 <__malloc_lock>
 8003720:	4a1c      	ldr	r2, [pc, #112]	; (8003794 <_free_r+0x8c>)
 8003722:	6813      	ldr	r3, [r2, #0]
 8003724:	b933      	cbnz	r3, 8003734 <_free_r+0x2c>
 8003726:	6063      	str	r3, [r4, #4]
 8003728:	6014      	str	r4, [r2, #0]
 800372a:	4628      	mov	r0, r5
 800372c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003730:	f7ff bfe4 	b.w	80036fc <__malloc_unlock>
 8003734:	42a3      	cmp	r3, r4
 8003736:	d908      	bls.n	800374a <_free_r+0x42>
 8003738:	6820      	ldr	r0, [r4, #0]
 800373a:	1821      	adds	r1, r4, r0
 800373c:	428b      	cmp	r3, r1
 800373e:	bf01      	itttt	eq
 8003740:	6819      	ldreq	r1, [r3, #0]
 8003742:	685b      	ldreq	r3, [r3, #4]
 8003744:	1809      	addeq	r1, r1, r0
 8003746:	6021      	streq	r1, [r4, #0]
 8003748:	e7ed      	b.n	8003726 <_free_r+0x1e>
 800374a:	461a      	mov	r2, r3
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	b10b      	cbz	r3, 8003754 <_free_r+0x4c>
 8003750:	42a3      	cmp	r3, r4
 8003752:	d9fa      	bls.n	800374a <_free_r+0x42>
 8003754:	6811      	ldr	r1, [r2, #0]
 8003756:	1850      	adds	r0, r2, r1
 8003758:	42a0      	cmp	r0, r4
 800375a:	d10b      	bne.n	8003774 <_free_r+0x6c>
 800375c:	6820      	ldr	r0, [r4, #0]
 800375e:	4401      	add	r1, r0
 8003760:	1850      	adds	r0, r2, r1
 8003762:	4283      	cmp	r3, r0
 8003764:	6011      	str	r1, [r2, #0]
 8003766:	d1e0      	bne.n	800372a <_free_r+0x22>
 8003768:	6818      	ldr	r0, [r3, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	4401      	add	r1, r0
 800376e:	6011      	str	r1, [r2, #0]
 8003770:	6053      	str	r3, [r2, #4]
 8003772:	e7da      	b.n	800372a <_free_r+0x22>
 8003774:	d902      	bls.n	800377c <_free_r+0x74>
 8003776:	230c      	movs	r3, #12
 8003778:	602b      	str	r3, [r5, #0]
 800377a:	e7d6      	b.n	800372a <_free_r+0x22>
 800377c:	6820      	ldr	r0, [r4, #0]
 800377e:	1821      	adds	r1, r4, r0
 8003780:	428b      	cmp	r3, r1
 8003782:	bf01      	itttt	eq
 8003784:	6819      	ldreq	r1, [r3, #0]
 8003786:	685b      	ldreq	r3, [r3, #4]
 8003788:	1809      	addeq	r1, r1, r0
 800378a:	6021      	streq	r1, [r4, #0]
 800378c:	6063      	str	r3, [r4, #4]
 800378e:	6054      	str	r4, [r2, #4]
 8003790:	e7cb      	b.n	800372a <_free_r+0x22>
 8003792:	bd38      	pop	{r3, r4, r5, pc}
 8003794:	20001124 	.word	0x20001124

08003798 <_init>:
 8003798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379a:	bf00      	nop
 800379c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800379e:	bc08      	pop	{r3}
 80037a0:	469e      	mov	lr, r3
 80037a2:	4770      	bx	lr

080037a4 <_fini>:
 80037a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a6:	bf00      	nop
 80037a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037aa:	bc08      	pop	{r3}
 80037ac:	469e      	mov	lr, r3
 80037ae:	4770      	bx	lr
