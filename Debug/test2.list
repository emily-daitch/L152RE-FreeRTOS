
test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041e0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08004320  08004320  00014320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043ec  080043ec  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080043ec  080043ec  000143ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043f4  080043f4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043f4  080043f4  000143f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043f8  080043f8  000143f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080043fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010c0  20000074  08004470  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001134  08004470  00021134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ffa  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029d2  00000000  00000000  00032097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  00034a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e80  00000000  00000000  000359f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186e1  00000000  00000000  00036878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107d4  00000000  00000000  0004ef59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095867  00000000  00000000  0005f72d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4f94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000469c  00000000  00000000  000f4fe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000074 	.word	0x20000074
 800015c:	00000000 	.word	0x00000000
 8000160:	08004308 	.word	0x08004308

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000078 	.word	0x20000078
 800017c:	08004308 	.word	0x08004308

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295
 8000190:	f04f 30ff 	movne.w	r0, #4294967295
 8000194:	f000 b976 	b.w	8000484 <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	9e08      	ldr	r6, [sp, #32]
 80001b6:	460d      	mov	r5, r1
 80001b8:	4604      	mov	r4, r0
 80001ba:	4688      	mov	r8, r1
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d14d      	bne.n	800025c <__udivmoddi4+0xac>
 80001c0:	428a      	cmp	r2, r1
 80001c2:	4694      	mov	ip, r2
 80001c4:	d968      	bls.n	8000298 <__udivmoddi4+0xe8>
 80001c6:	fab2 f282 	clz	r2, r2
 80001ca:	b152      	cbz	r2, 80001e2 <__udivmoddi4+0x32>
 80001cc:	fa01 f302 	lsl.w	r3, r1, r2
 80001d0:	f1c2 0120 	rsb	r1, r2, #32
 80001d4:	fa20 f101 	lsr.w	r1, r0, r1
 80001d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80001dc:	ea41 0803 	orr.w	r8, r1, r3
 80001e0:	4094      	lsls	r4, r2
 80001e2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e6:	fbb8 f7f1 	udiv	r7, r8, r1
 80001ea:	fa1f fe8c 	uxth.w	lr, ip
 80001ee:	fb01 8817 	mls	r8, r1, r7, r8
 80001f2:	fb07 f00e 	mul.w	r0, r7, lr
 80001f6:	0c23      	lsrs	r3, r4, #16
 80001f8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001fc:	4298      	cmp	r0, r3
 80001fe:	d90a      	bls.n	8000216 <__udivmoddi4+0x66>
 8000200:	eb1c 0303 	adds.w	r3, ip, r3
 8000204:	f107 35ff 	add.w	r5, r7, #4294967295
 8000208:	f080 811e 	bcs.w	8000448 <__udivmoddi4+0x298>
 800020c:	4298      	cmp	r0, r3
 800020e:	f240 811b 	bls.w	8000448 <__udivmoddi4+0x298>
 8000212:	3f02      	subs	r7, #2
 8000214:	4463      	add	r3, ip
 8000216:	1a1b      	subs	r3, r3, r0
 8000218:	fbb3 f0f1 	udiv	r0, r3, r1
 800021c:	fb01 3310 	mls	r3, r1, r0, r3
 8000220:	fb00 fe0e 	mul.w	lr, r0, lr
 8000224:	b2a4      	uxth	r4, r4
 8000226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800022a:	45a6      	cmp	lr, r4
 800022c:	d90a      	bls.n	8000244 <__udivmoddi4+0x94>
 800022e:	eb1c 0404 	adds.w	r4, ip, r4
 8000232:	f100 33ff 	add.w	r3, r0, #4294967295
 8000236:	f080 8109 	bcs.w	800044c <__udivmoddi4+0x29c>
 800023a:	45a6      	cmp	lr, r4
 800023c:	f240 8106 	bls.w	800044c <__udivmoddi4+0x29c>
 8000240:	4464      	add	r4, ip
 8000242:	3802      	subs	r0, #2
 8000244:	2100      	movs	r1, #0
 8000246:	eba4 040e 	sub.w	r4, r4, lr
 800024a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024e:	b11e      	cbz	r6, 8000258 <__udivmoddi4+0xa8>
 8000250:	2300      	movs	r3, #0
 8000252:	40d4      	lsrs	r4, r2
 8000254:	e9c6 4300 	strd	r4, r3, [r6]
 8000258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025c:	428b      	cmp	r3, r1
 800025e:	d908      	bls.n	8000272 <__udivmoddi4+0xc2>
 8000260:	2e00      	cmp	r6, #0
 8000262:	f000 80ee 	beq.w	8000442 <__udivmoddi4+0x292>
 8000266:	2100      	movs	r1, #0
 8000268:	e9c6 0500 	strd	r0, r5, [r6]
 800026c:	4608      	mov	r0, r1
 800026e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000272:	fab3 f183 	clz	r1, r3
 8000276:	2900      	cmp	r1, #0
 8000278:	d14a      	bne.n	8000310 <__udivmoddi4+0x160>
 800027a:	42ab      	cmp	r3, r5
 800027c:	d302      	bcc.n	8000284 <__udivmoddi4+0xd4>
 800027e:	4282      	cmp	r2, r0
 8000280:	f200 80fc 	bhi.w	800047c <__udivmoddi4+0x2cc>
 8000284:	1a84      	subs	r4, r0, r2
 8000286:	eb65 0303 	sbc.w	r3, r5, r3
 800028a:	2001      	movs	r0, #1
 800028c:	4698      	mov	r8, r3
 800028e:	2e00      	cmp	r6, #0
 8000290:	d0e2      	beq.n	8000258 <__udivmoddi4+0xa8>
 8000292:	e9c6 4800 	strd	r4, r8, [r6]
 8000296:	e7df      	b.n	8000258 <__udivmoddi4+0xa8>
 8000298:	b902      	cbnz	r2, 800029c <__udivmoddi4+0xec>
 800029a:	deff      	udf	#255	; 0xff
 800029c:	fab2 f282 	clz	r2, r2
 80002a0:	2a00      	cmp	r2, #0
 80002a2:	f040 8091 	bne.w	80003c8 <__udivmoddi4+0x218>
 80002a6:	eba1 000c 	sub.w	r0, r1, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002b0:	fa1f fe8c 	uxth.w	lr, ip
 80002b4:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b8:	fb07 0013 	mls	r0, r7, r3, r0
 80002bc:	0c25      	lsrs	r5, r4, #16
 80002be:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002c2:	fb0e f003 	mul.w	r0, lr, r3
 80002c6:	42a8      	cmp	r0, r5
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0x12c>
 80002ca:	eb1c 0505 	adds.w	r5, ip, r5
 80002ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0x12a>
 80002d4:	42a8      	cmp	r0, r5
 80002d6:	f200 80ce 	bhi.w	8000476 <__udivmoddi4+0x2c6>
 80002da:	4643      	mov	r3, r8
 80002dc:	1a2d      	subs	r5, r5, r0
 80002de:	fbb5 f0f7 	udiv	r0, r5, r7
 80002e2:	fb07 5510 	mls	r5, r7, r0, r5
 80002e6:	fb0e fe00 	mul.w	lr, lr, r0
 80002ea:	b2a4      	uxth	r4, r4
 80002ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002f0:	45a6      	cmp	lr, r4
 80002f2:	d908      	bls.n	8000306 <__udivmoddi4+0x156>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 35ff 	add.w	r5, r0, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x154>
 80002fe:	45a6      	cmp	lr, r4
 8000300:	f200 80b6 	bhi.w	8000470 <__udivmoddi4+0x2c0>
 8000304:	4628      	mov	r0, r5
 8000306:	eba4 040e 	sub.w	r4, r4, lr
 800030a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030e:	e79e      	b.n	800024e <__udivmoddi4+0x9e>
 8000310:	f1c1 0720 	rsb	r7, r1, #32
 8000314:	408b      	lsls	r3, r1
 8000316:	fa22 fc07 	lsr.w	ip, r2, r7
 800031a:	ea4c 0c03 	orr.w	ip, ip, r3
 800031e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fbba f8f9 	udiv	r8, sl, r9
 800032a:	fa20 f307 	lsr.w	r3, r0, r7
 800032e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000332:	408d      	lsls	r5, r1
 8000334:	fa1f fe8c 	uxth.w	lr, ip
 8000338:	431d      	orrs	r5, r3
 800033a:	fa00 f301 	lsl.w	r3, r0, r1
 800033e:	fb08 f00e 	mul.w	r0, r8, lr
 8000342:	0c2c      	lsrs	r4, r5, #16
 8000344:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000348:	42a0      	cmp	r0, r4
 800034a:	fa02 f201 	lsl.w	r2, r2, r1
 800034e:	d90b      	bls.n	8000368 <__udivmoddi4+0x1b8>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f108 3aff 	add.w	sl, r8, #4294967295
 8000358:	f080 8088 	bcs.w	800046c <__udivmoddi4+0x2bc>
 800035c:	42a0      	cmp	r0, r4
 800035e:	f240 8085 	bls.w	800046c <__udivmoddi4+0x2bc>
 8000362:	f1a8 0802 	sub.w	r8, r8, #2
 8000366:	4464      	add	r4, ip
 8000368:	1a24      	subs	r4, r4, r0
 800036a:	fbb4 f0f9 	udiv	r0, r4, r9
 800036e:	fb09 4410 	mls	r4, r9, r0, r4
 8000372:	fb00 fe0e 	mul.w	lr, r0, lr
 8000376:	b2ad      	uxth	r5, r5
 8000378:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800037c:	45a6      	cmp	lr, r4
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x1e2>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 35ff 	add.w	r5, r0, #4294967295
 8000388:	d26c      	bcs.n	8000464 <__udivmoddi4+0x2b4>
 800038a:	45a6      	cmp	lr, r4
 800038c:	d96a      	bls.n	8000464 <__udivmoddi4+0x2b4>
 800038e:	3802      	subs	r0, #2
 8000390:	4464      	add	r4, ip
 8000392:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000396:	fba0 9502 	umull	r9, r5, r0, r2
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	42ac      	cmp	r4, r5
 80003a0:	46c8      	mov	r8, r9
 80003a2:	46ae      	mov	lr, r5
 80003a4:	d356      	bcc.n	8000454 <__udivmoddi4+0x2a4>
 80003a6:	d053      	beq.n	8000450 <__udivmoddi4+0x2a0>
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d069      	beq.n	8000480 <__udivmoddi4+0x2d0>
 80003ac:	ebb3 0208 	subs.w	r2, r3, r8
 80003b0:	eb64 040e 	sbc.w	r4, r4, lr
 80003b4:	fa22 f301 	lsr.w	r3, r2, r1
 80003b8:	fa04 f707 	lsl.w	r7, r4, r7
 80003bc:	431f      	orrs	r7, r3
 80003be:	40cc      	lsrs	r4, r1
 80003c0:	e9c6 7400 	strd	r7, r4, [r6]
 80003c4:	2100      	movs	r1, #0
 80003c6:	e747      	b.n	8000258 <__udivmoddi4+0xa8>
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	f1c2 0120 	rsb	r1, r2, #32
 80003d0:	fa25 f301 	lsr.w	r3, r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa20 f101 	lsr.w	r1, r0, r1
 80003dc:	4095      	lsls	r5, r2
 80003de:	430d      	orrs	r5, r1
 80003e0:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e4:	fb07 3311 	mls	r3, r7, r1, r3
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	0c28      	lsrs	r0, r5, #16
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	fb01 f30e 	mul.w	r3, r1, lr
 80003f6:	4283      	cmp	r3, r0
 80003f8:	fa04 f402 	lsl.w	r4, r4, r2
 80003fc:	d908      	bls.n	8000410 <__udivmoddi4+0x260>
 80003fe:	eb1c 0000 	adds.w	r0, ip, r0
 8000402:	f101 38ff 	add.w	r8, r1, #4294967295
 8000406:	d22f      	bcs.n	8000468 <__udivmoddi4+0x2b8>
 8000408:	4283      	cmp	r3, r0
 800040a:	d92d      	bls.n	8000468 <__udivmoddi4+0x2b8>
 800040c:	3902      	subs	r1, #2
 800040e:	4460      	add	r0, ip
 8000410:	1ac0      	subs	r0, r0, r3
 8000412:	fbb0 f3f7 	udiv	r3, r0, r7
 8000416:	fb07 0013 	mls	r0, r7, r3, r0
 800041a:	b2ad      	uxth	r5, r5
 800041c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000420:	fb03 f00e 	mul.w	r0, r3, lr
 8000424:	42a8      	cmp	r0, r5
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x28a>
 8000428:	eb1c 0505 	adds.w	r5, ip, r5
 800042c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000430:	d216      	bcs.n	8000460 <__udivmoddi4+0x2b0>
 8000432:	42a8      	cmp	r0, r5
 8000434:	d914      	bls.n	8000460 <__udivmoddi4+0x2b0>
 8000436:	3b02      	subs	r3, #2
 8000438:	4465      	add	r5, ip
 800043a:	1a28      	subs	r0, r5, r0
 800043c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000440:	e738      	b.n	80002b4 <__udivmoddi4+0x104>
 8000442:	4631      	mov	r1, r6
 8000444:	4630      	mov	r0, r6
 8000446:	e707      	b.n	8000258 <__udivmoddi4+0xa8>
 8000448:	462f      	mov	r7, r5
 800044a:	e6e4      	b.n	8000216 <__udivmoddi4+0x66>
 800044c:	4618      	mov	r0, r3
 800044e:	e6f9      	b.n	8000244 <__udivmoddi4+0x94>
 8000450:	454b      	cmp	r3, r9
 8000452:	d2a9      	bcs.n	80003a8 <__udivmoddi4+0x1f8>
 8000454:	ebb9 0802 	subs.w	r8, r9, r2
 8000458:	eb65 0e0c 	sbc.w	lr, r5, ip
 800045c:	3801      	subs	r0, #1
 800045e:	e7a3      	b.n	80003a8 <__udivmoddi4+0x1f8>
 8000460:	4643      	mov	r3, r8
 8000462:	e7ea      	b.n	800043a <__udivmoddi4+0x28a>
 8000464:	4628      	mov	r0, r5
 8000466:	e794      	b.n	8000392 <__udivmoddi4+0x1e2>
 8000468:	4641      	mov	r1, r8
 800046a:	e7d1      	b.n	8000410 <__udivmoddi4+0x260>
 800046c:	46d0      	mov	r8, sl
 800046e:	e77b      	b.n	8000368 <__udivmoddi4+0x1b8>
 8000470:	4464      	add	r4, ip
 8000472:	3802      	subs	r0, #2
 8000474:	e747      	b.n	8000306 <__udivmoddi4+0x156>
 8000476:	3b02      	subs	r3, #2
 8000478:	4465      	add	r5, ip
 800047a:	e72f      	b.n	80002dc <__udivmoddi4+0x12c>
 800047c:	4608      	mov	r0, r1
 800047e:	e706      	b.n	800028e <__udivmoddi4+0xde>
 8000480:	4631      	mov	r1, r6
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0xa8>

08000484 <__aeabi_idiv0>:
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop

08000488 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000488:	b480      	push	{r7}
 800048a:	b085      	sub	sp, #20
 800048c:	af00      	add	r7, sp, #0
 800048e:	60f8      	str	r0, [r7, #12]
 8000490:	60b9      	str	r1, [r7, #8]
 8000492:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	4a06      	ldr	r2, [pc, #24]	; (80004b0 <vApplicationGetIdleTaskMemory+0x28>)
 8000498:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	4a05      	ldr	r2, [pc, #20]	; (80004b4 <vApplicationGetIdleTaskMemory+0x2c>)
 800049e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	2280      	movs	r2, #128	; 0x80
 80004a4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004a6:	bf00      	nop
 80004a8:	3714      	adds	r7, #20
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr
 80004b0:	20000090 	.word	0x20000090
 80004b4:	20000144 	.word	0x20000144

080004b8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004c4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80004c8:	f003 0301 	and.w	r3, r3, #1
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d013      	beq.n	80004f8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004d4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80004d8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d00b      	beq.n	80004f8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004e0:	e000      	b.n	80004e4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80004e2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80004e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d0f9      	beq.n	80004e2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80004ee:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	b2d2      	uxtb	r2, r2
 80004f6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80004f8:	687b      	ldr	r3, [r7, #4]
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr

08000504 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++) {
 8000510:	2300      	movs	r3, #0
 8000512:	617b      	str	r3, [r7, #20]
 8000514:	e009      	b.n	800052a <_write+0x26>
		ITM_SendChar(*ptr++);
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	1c5a      	adds	r2, r3, #1
 800051a:	60ba      	str	r2, [r7, #8]
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	4618      	mov	r0, r3
 8000520:	f7ff ffca 	bl	80004b8 <ITM_SendChar>
	for(int i = 0; i < len; i++) {
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	3301      	adds	r3, #1
 8000528:	617b      	str	r3, [r7, #20]
 800052a:	697a      	ldr	r2, [r7, #20]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	429a      	cmp	r2, r3
 8000530:	dbf1      	blt.n	8000516 <_write+0x12>
	}
	return len;
 8000532:	687b      	ldr	r3, [r7, #4]
}
 8000534:	4618      	mov	r0, r3
 8000536:	3718      	adds	r7, #24
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b5b0      	push	{r4, r5, r7, lr}
 800053e:	b0a0      	sub	sp, #128	; 0x80
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000542:	f000 fb08 	bl	8000b56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000546:	f000 f831 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054a:	f000 f8a7 	bl	800069c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800054e:	f000 f87b 	bl	8000648 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000552:	4b13      	ldr	r3, [pc, #76]	; (80005a0 <main+0x64>)
 8000554:	463c      	mov	r4, r7
 8000556:	461d      	mov	r5, r3
 8000558:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800055a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800055c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000560:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000564:	463b      	mov	r3, r7
 8000566:	2100      	movs	r1, #0
 8000568:	4618      	mov	r0, r3
 800056a:	f001 ff55 	bl	8002418 <osThreadCreate>
 800056e:	4603      	mov	r3, r0
 8000570:	4a0c      	ldr	r2, [pc, #48]	; (80005a4 <main+0x68>)
 8000572:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000574:	f001 ff49 	bl	800240a <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000578:	2201      	movs	r2, #1
 800057a:	2120      	movs	r1, #32
 800057c:	480a      	ldr	r0, [pc, #40]	; (80005a8 <main+0x6c>)
 800057e:	f000 fdb1 	bl	80010e4 <HAL_GPIO_WritePin>
	  	HAL_Delay(1000);
 8000582:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000586:	f000 fb1b 	bl	8000bc0 <HAL_Delay>
	  	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	2120      	movs	r1, #32
 800058e:	4806      	ldr	r0, [pc, #24]	; (80005a8 <main+0x6c>)
 8000590:	f000 fda8 	bl	80010e4 <HAL_GPIO_WritePin>
	  	HAL_Delay(1000);
 8000594:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000598:	f000 fb12 	bl	8000bc0 <HAL_Delay>
	  	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800059c:	e7ec      	b.n	8000578 <main+0x3c>
 800059e:	bf00      	nop
 80005a0:	0800432c 	.word	0x0800432c
 80005a4:	2000038c 	.word	0x2000038c
 80005a8:	40020000 	.word	0x40020000

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b092      	sub	sp, #72	; 0x48
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	2234      	movs	r2, #52	; 0x34
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f003 fa33 	bl	8003a26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	463b      	mov	r3, r7
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]
 80005cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ce:	4b1d      	ldr	r3, [pc, #116]	; (8000644 <SystemClock_Config+0x98>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80005d6:	4a1b      	ldr	r2, [pc, #108]	; (8000644 <SystemClock_Config+0x98>)
 80005d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005dc:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005de:	2302      	movs	r3, #2
 80005e0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e2:	2301      	movs	r3, #1
 80005e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e6:	2310      	movs	r3, #16
 80005e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ea:	2302      	movs	r3, #2
 80005ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ee:	2300      	movs	r3, #0
 80005f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80005f2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80005f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80005f8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80005fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	4618      	mov	r0, r3
 8000604:	f000 fd86 	bl	8001114 <HAL_RCC_OscConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800060e:	f000 f8dc 	bl	80007ca <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000612:	230f      	movs	r3, #15
 8000614:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000616:	2303      	movs	r3, #3
 8000618:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000626:	463b      	mov	r3, r7
 8000628:	2101      	movs	r1, #1
 800062a:	4618      	mov	r0, r3
 800062c:	f001 f8a2 	bl	8001774 <HAL_RCC_ClockConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000636:	f000 f8c8 	bl	80007ca <Error_Handler>
  }
}
 800063a:	bf00      	nop
 800063c:	3748      	adds	r7, #72	; 0x48
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40007000 	.word	0x40007000

08000648 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_USART2_UART_Init+0x4c>)
 800064e:	4a12      	ldr	r2, [pc, #72]	; (8000698 <MX_USART2_UART_Init+0x50>)
 8000650:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000652:	4b10      	ldr	r3, [pc, #64]	; (8000694 <MX_USART2_UART_Init+0x4c>)
 8000654:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000658:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <MX_USART2_UART_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_USART2_UART_Init+0x4c>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000666:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <MX_USART2_UART_Init+0x4c>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_USART2_UART_Init+0x4c>)
 800066e:	220c      	movs	r2, #12
 8000670:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <MX_USART2_UART_Init+0x4c>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_USART2_UART_Init+0x4c>)
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800067e:	4805      	ldr	r0, [pc, #20]	; (8000694 <MX_USART2_UART_Init+0x4c>)
 8000680:	f001 fd78 	bl	8002174 <HAL_UART_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800068a:	f000 f89e 	bl	80007ca <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000344 	.word	0x20000344
 8000698:	40004400 	.word	0x40004400

0800069c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	; 0x28
 80006a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b2:	4b2a      	ldr	r3, [pc, #168]	; (800075c <MX_GPIO_Init+0xc0>)
 80006b4:	69db      	ldr	r3, [r3, #28]
 80006b6:	4a29      	ldr	r2, [pc, #164]	; (800075c <MX_GPIO_Init+0xc0>)
 80006b8:	f043 0304 	orr.w	r3, r3, #4
 80006bc:	61d3      	str	r3, [r2, #28]
 80006be:	4b27      	ldr	r3, [pc, #156]	; (800075c <MX_GPIO_Init+0xc0>)
 80006c0:	69db      	ldr	r3, [r3, #28]
 80006c2:	f003 0304 	and.w	r3, r3, #4
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ca:	4b24      	ldr	r3, [pc, #144]	; (800075c <MX_GPIO_Init+0xc0>)
 80006cc:	69db      	ldr	r3, [r3, #28]
 80006ce:	4a23      	ldr	r2, [pc, #140]	; (800075c <MX_GPIO_Init+0xc0>)
 80006d0:	f043 0320 	orr.w	r3, r3, #32
 80006d4:	61d3      	str	r3, [r2, #28]
 80006d6:	4b21      	ldr	r3, [pc, #132]	; (800075c <MX_GPIO_Init+0xc0>)
 80006d8:	69db      	ldr	r3, [r3, #28]
 80006da:	f003 0320 	and.w	r3, r3, #32
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	4b1e      	ldr	r3, [pc, #120]	; (800075c <MX_GPIO_Init+0xc0>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	4a1d      	ldr	r2, [pc, #116]	; (800075c <MX_GPIO_Init+0xc0>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	61d3      	str	r3, [r2, #28]
 80006ee:	4b1b      	ldr	r3, [pc, #108]	; (800075c <MX_GPIO_Init+0xc0>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	4b18      	ldr	r3, [pc, #96]	; (800075c <MX_GPIO_Init+0xc0>)
 80006fc:	69db      	ldr	r3, [r3, #28]
 80006fe:	4a17      	ldr	r2, [pc, #92]	; (800075c <MX_GPIO_Init+0xc0>)
 8000700:	f043 0302 	orr.w	r3, r3, #2
 8000704:	61d3      	str	r3, [r2, #28]
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <MX_GPIO_Init+0xc0>)
 8000708:	69db      	ldr	r3, [r3, #28]
 800070a:	f003 0302 	and.w	r3, r3, #2
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2120      	movs	r1, #32
 8000716:	4812      	ldr	r0, [pc, #72]	; (8000760 <MX_GPIO_Init+0xc4>)
 8000718:	f000 fce4 	bl	80010e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800071c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000722:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	4619      	mov	r1, r3
 8000732:	480c      	ldr	r0, [pc, #48]	; (8000764 <MX_GPIO_Init+0xc8>)
 8000734:	f000 fb46 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000738:	2320      	movs	r3, #32
 800073a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073c:	2301      	movs	r3, #1
 800073e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000744:	2300      	movs	r3, #0
 8000746:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	4619      	mov	r1, r3
 800074e:	4804      	ldr	r0, [pc, #16]	; (8000760 <MX_GPIO_Init+0xc4>)
 8000750:	f000 fb38 	bl	8000dc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000754:	bf00      	nop
 8000756:	3728      	adds	r7, #40	; 0x28
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40023800 	.word	0x40023800
 8000760:	40020000 	.word	0x40020000
 8000764:	40020800 	.word	0x40020800

08000768 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000770:	2201      	movs	r2, #1
 8000772:	2120      	movs	r1, #32
 8000774:	480b      	ldr	r0, [pc, #44]	; (80007a4 <StartDefaultTask+0x3c>)
 8000776:	f000 fcb5 	bl	80010e4 <HAL_GPIO_WritePin>
	  	HAL_Delay(1000);
 800077a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800077e:	f000 fa1f 	bl	8000bc0 <HAL_Delay>
	  	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	2120      	movs	r1, #32
 8000786:	4807      	ldr	r0, [pc, #28]	; (80007a4 <StartDefaultTask+0x3c>)
 8000788:	f000 fcac 	bl	80010e4 <HAL_GPIO_WritePin>
	  	HAL_Delay(1000);
 800078c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000790:	f000 fa16 	bl	8000bc0 <HAL_Delay>
	  	printf("\r\nHello, World!\r\n");
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <StartDefaultTask+0x40>)
 8000796:	f003 fa51 	bl	8003c3c <puts>

    osDelay(1);
 800079a:	2001      	movs	r0, #1
 800079c:	f001 fe88 	bl	80024b0 <osDelay>
	  	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80007a0:	e7e6      	b.n	8000770 <StartDefaultTask+0x8>
 80007a2:	bf00      	nop
 80007a4:	40020000 	.word	0x40020000
 80007a8:	08004348 	.word	0x08004348

080007ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007bc:	d101      	bne.n	80007c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007be:	f000 f9e3 	bl	8000b88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ce:	b672      	cpsid	i
}
 80007d0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <Error_Handler+0x8>

080007d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80007da:	4b17      	ldr	r3, [pc, #92]	; (8000838 <HAL_MspInit+0x64>)
 80007dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007de:	4a16      	ldr	r2, [pc, #88]	; (8000838 <HAL_MspInit+0x64>)
 80007e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007e4:	6253      	str	r3, [r2, #36]	; 0x24
 80007e6:	4b14      	ldr	r3, [pc, #80]	; (8000838 <HAL_MspInit+0x64>)
 80007e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <HAL_MspInit+0x64>)
 80007f4:	6a1b      	ldr	r3, [r3, #32]
 80007f6:	4a10      	ldr	r2, [pc, #64]	; (8000838 <HAL_MspInit+0x64>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6213      	str	r3, [r2, #32]
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <HAL_MspInit+0x64>)
 8000800:	6a1b      	ldr	r3, [r3, #32]
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <HAL_MspInit+0x64>)
 800080c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800080e:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <HAL_MspInit+0x64>)
 8000810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000814:	6253      	str	r3, [r2, #36]	; 0x24
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <HAL_MspInit+0x64>)
 8000818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800081a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	210f      	movs	r1, #15
 8000826:	f06f 0001 	mvn.w	r0, #1
 800082a:	f000 faa0 	bl	8000d6e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082e:	bf00      	nop
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800

0800083c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	; 0x28
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a17      	ldr	r2, [pc, #92]	; (80008b8 <HAL_UART_MspInit+0x7c>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d127      	bne.n	80008ae <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800085e:	4b17      	ldr	r3, [pc, #92]	; (80008bc <HAL_UART_MspInit+0x80>)
 8000860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000862:	4a16      	ldr	r2, [pc, #88]	; (80008bc <HAL_UART_MspInit+0x80>)
 8000864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000868:	6253      	str	r3, [r2, #36]	; 0x24
 800086a:	4b14      	ldr	r3, [pc, #80]	; (80008bc <HAL_UART_MspInit+0x80>)
 800086c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800086e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <HAL_UART_MspInit+0x80>)
 8000878:	69db      	ldr	r3, [r3, #28]
 800087a:	4a10      	ldr	r2, [pc, #64]	; (80008bc <HAL_UART_MspInit+0x80>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	61d3      	str	r3, [r2, #28]
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <HAL_UART_MspInit+0x80>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800088e:	230c      	movs	r3, #12
 8000890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089a:	2303      	movs	r3, #3
 800089c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800089e:	2307      	movs	r3, #7
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	4619      	mov	r1, r3
 80008a8:	4805      	ldr	r0, [pc, #20]	; (80008c0 <HAL_UART_MspInit+0x84>)
 80008aa:	f000 fa8b 	bl	8000dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008ae:	bf00      	nop
 80008b0:	3728      	adds	r7, #40	; 0x28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40004400 	.word	0x40004400
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020000 	.word	0x40020000

080008c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08e      	sub	sp, #56	; 0x38
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80008d4:	2300      	movs	r3, #0
 80008d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80008da:	4b33      	ldr	r3, [pc, #204]	; (80009a8 <HAL_InitTick+0xe4>)
 80008dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008de:	4a32      	ldr	r2, [pc, #200]	; (80009a8 <HAL_InitTick+0xe4>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6253      	str	r3, [r2, #36]	; 0x24
 80008e6:	4b30      	ldr	r3, [pc, #192]	; (80009a8 <HAL_InitTick+0xe4>)
 80008e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008f2:	f107 0210 	add.w	r2, r7, #16
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4611      	mov	r1, r2
 80008fc:	4618      	mov	r0, r3
 80008fe:	f001 f99f 	bl	8001c40 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000902:	6a3b      	ldr	r3, [r7, #32]
 8000904:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000908:	2b00      	cmp	r3, #0
 800090a:	d103      	bne.n	8000914 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800090c:	f001 f970 	bl	8001bf0 <HAL_RCC_GetPCLK1Freq>
 8000910:	6378      	str	r0, [r7, #52]	; 0x34
 8000912:	e004      	b.n	800091e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000914:	f001 f96c 	bl	8001bf0 <HAL_RCC_GetPCLK1Freq>
 8000918:	4603      	mov	r3, r0
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800091e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000920:	4a22      	ldr	r2, [pc, #136]	; (80009ac <HAL_InitTick+0xe8>)
 8000922:	fba2 2303 	umull	r2, r3, r2, r3
 8000926:	0c9b      	lsrs	r3, r3, #18
 8000928:	3b01      	subs	r3, #1
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800092c:	4b20      	ldr	r3, [pc, #128]	; (80009b0 <HAL_InitTick+0xec>)
 800092e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000932:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000934:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <HAL_InitTick+0xec>)
 8000936:	f240 32e7 	movw	r2, #999	; 0x3e7
 800093a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800093c:	4a1c      	ldr	r2, [pc, #112]	; (80009b0 <HAL_InitTick+0xec>)
 800093e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000940:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000942:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <HAL_InitTick+0xec>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000948:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <HAL_InitTick+0xec>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 800094e:	4818      	ldr	r0, [pc, #96]	; (80009b0 <HAL_InitTick+0xec>)
 8000950:	f001 fa06 	bl	8001d60 <HAL_TIM_Base_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800095a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800095e:	2b00      	cmp	r3, #0
 8000960:	d11b      	bne.n	800099a <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000962:	4813      	ldr	r0, [pc, #76]	; (80009b0 <HAL_InitTick+0xec>)
 8000964:	f001 fa44 	bl	8001df0 <HAL_TIM_Base_Start_IT>
 8000968:	4603      	mov	r3, r0
 800096a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800096e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000972:	2b00      	cmp	r3, #0
 8000974:	d111      	bne.n	800099a <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000976:	201c      	movs	r0, #28
 8000978:	f000 fa15 	bl	8000da6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b0f      	cmp	r3, #15
 8000980:	d808      	bhi.n	8000994 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000982:	2200      	movs	r2, #0
 8000984:	6879      	ldr	r1, [r7, #4]
 8000986:	201c      	movs	r0, #28
 8000988:	f000 f9f1 	bl	8000d6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800098c:	4a09      	ldr	r2, [pc, #36]	; (80009b4 <HAL_InitTick+0xf0>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6013      	str	r3, [r2, #0]
 8000992:	e002      	b.n	800099a <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8000994:	2301      	movs	r3, #1
 8000996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800099a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3738      	adds	r7, #56	; 0x38
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800
 80009ac:	431bde83 	.word	0x431bde83
 80009b0:	20000390 	.word	0x20000390
 80009b4:	20000004 	.word	0x20000004

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <NMI_Handler+0x4>

080009be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <HardFault_Handler+0x4>

080009c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <MemManage_Handler+0x4>

080009ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <BusFault_Handler+0x4>

080009d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <UsageFault_Handler+0x4>

080009d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr
	...

080009e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009e8:	4802      	ldr	r0, [pc, #8]	; (80009f4 <TIM2_IRQHandler+0x10>)
 80009ea:	f001 fa53 	bl	8001e94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000390 	.word	0x20000390

080009f8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	e00a      	b.n	8000a20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a0a:	f3af 8000 	nop.w
 8000a0e:	4601      	mov	r1, r0
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	1c5a      	adds	r2, r3, #1
 8000a14:	60ba      	str	r2, [r7, #8]
 8000a16:	b2ca      	uxtb	r2, r1
 8000a18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	697a      	ldr	r2, [r7, #20]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	dbf0      	blt.n	8000a0a <_read+0x12>
  }

  return len;
 8000a28:	687b      	ldr	r3, [r7, #4]
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr

08000a48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a58:	605a      	str	r2, [r3, #4]
  return 0;
 8000a5a:	2300      	movs	r3, #0
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr

08000a66 <_isatty>:

int _isatty(int file)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a6e:	2301      	movs	r3, #1
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr

08000a7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	b085      	sub	sp, #20
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	60f8      	str	r0, [r7, #12]
 8000a82:	60b9      	str	r1, [r7, #8]
 8000a84:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a86:	2300      	movs	r3, #0
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr
	...

08000a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a9c:	4a14      	ldr	r2, [pc, #80]	; (8000af0 <_sbrk+0x5c>)
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <_sbrk+0x60>)
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa8:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <_sbrk+0x64>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d102      	bne.n	8000ab6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <_sbrk+0x64>)
 8000ab2:	4a12      	ldr	r2, [pc, #72]	; (8000afc <_sbrk+0x68>)
 8000ab4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <_sbrk+0x64>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d207      	bcs.n	8000ad4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ac4:	f002 fe8c 	bl	80037e0 <__errno>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	220c      	movs	r2, #12
 8000acc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ace:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad2:	e009      	b.n	8000ae8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad4:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <_sbrk+0x64>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ada:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <_sbrk+0x64>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	4a05      	ldr	r2, [pc, #20]	; (8000af8 <_sbrk+0x64>)
 8000ae4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3718      	adds	r7, #24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20014000 	.word	0x20014000
 8000af4:	00000400 	.word	0x00000400
 8000af8:	200003d0 	.word	0x200003d0
 8000afc:	20001138 	.word	0x20001138

08000b00 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr

08000b0c <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b0c:	f7ff fff8 	bl	8000b00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b10:	480b      	ldr	r0, [pc, #44]	; (8000b40 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b12:	490c      	ldr	r1, [pc, #48]	; (8000b44 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b14:	4a0c      	ldr	r2, [pc, #48]	; (8000b48 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b18:	e002      	b.n	8000b20 <LoopCopyDataInit>

08000b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1e:	3304      	adds	r3, #4

08000b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b24:	d3f9      	bcc.n	8000b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b26:	4a09      	ldr	r2, [pc, #36]	; (8000b4c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b28:	4c09      	ldr	r4, [pc, #36]	; (8000b50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b2c:	e001      	b.n	8000b32 <LoopFillZerobss>

08000b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b30:	3204      	adds	r2, #4

08000b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b34:	d3fb      	bcc.n	8000b2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b36:	f002 ff4f 	bl	80039d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b3a:	f7ff fcff 	bl	800053c <main>
  bx lr
 8000b3e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b48:	080043fc 	.word	0x080043fc
  ldr r2, =_sbss
 8000b4c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b50:	20001134 	.word	0x20001134

08000b54 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC1_IRQHandler>

08000b56 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b60:	2003      	movs	r0, #3
 8000b62:	f000 f8f9 	bl	8000d58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b66:	200f      	movs	r0, #15
 8000b68:	f7ff feac 	bl	80008c4 <HAL_InitTick>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d002      	beq.n	8000b78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	71fb      	strb	r3, [r7, #7]
 8000b76:	e001      	b.n	8000b7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b78:	f7ff fe2c 	bl	80007d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <HAL_IncTick+0x1c>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <HAL_IncTick+0x20>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4413      	add	r3, r2
 8000b96:	4a03      	ldr	r2, [pc, #12]	; (8000ba4 <HAL_IncTick+0x1c>)
 8000b98:	6013      	str	r3, [r2, #0]
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	200003d4 	.word	0x200003d4
 8000ba8:	20000008 	.word	0x20000008

08000bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb0:	4b02      	ldr	r3, [pc, #8]	; (8000bbc <HAL_GetTick+0x10>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	200003d4 	.word	0x200003d4

08000bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc8:	f7ff fff0 	bl	8000bac <HAL_GetTick>
 8000bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd8:	d004      	beq.n	8000be4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <HAL_Delay+0x40>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	4413      	add	r3, r2
 8000be2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000be4:	bf00      	nop
 8000be6:	f7ff ffe1 	bl	8000bac <HAL_GetTick>
 8000bea:	4602      	mov	r2, r0
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	1ad3      	subs	r3, r2, r3
 8000bf0:	68fa      	ldr	r2, [r7, #12]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d8f7      	bhi.n	8000be6 <HAL_Delay+0x26>
  {
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	bf00      	nop
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000008 	.word	0x20000008

08000c04 <__NVIC_SetPriorityGrouping>:
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <__NVIC_SetPriorityGrouping+0x44>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c1a:	68ba      	ldr	r2, [r7, #8]
 8000c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c20:	4013      	ands	r3, r2
 8000c22:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c36:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <__NVIC_SetPriorityGrouping+0x44>)
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	60d3      	str	r3, [r2, #12]
}
 8000c3c:	bf00      	nop
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <__NVIC_GetPriorityGrouping>:
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c50:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <__NVIC_GetPriorityGrouping+0x18>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	0a1b      	lsrs	r3, r3, #8
 8000c56:	f003 0307 	and.w	r3, r3, #7
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <__NVIC_EnableIRQ>:
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db0b      	blt.n	8000c92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	f003 021f 	and.w	r2, r3, #31
 8000c80:	4906      	ldr	r1, [pc, #24]	; (8000c9c <__NVIC_EnableIRQ+0x34>)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	095b      	lsrs	r3, r3, #5
 8000c88:	2001      	movs	r0, #1
 8000c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr
 8000c9c:	e000e100 	.word	0xe000e100

08000ca0 <__NVIC_SetPriority>:
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	6039      	str	r1, [r7, #0]
 8000caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db0a      	blt.n	8000cca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	490c      	ldr	r1, [pc, #48]	; (8000cec <__NVIC_SetPriority+0x4c>)
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	0112      	lsls	r2, r2, #4
 8000cc0:	b2d2      	uxtb	r2, r2
 8000cc2:	440b      	add	r3, r1
 8000cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000cc8:	e00a      	b.n	8000ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4908      	ldr	r1, [pc, #32]	; (8000cf0 <__NVIC_SetPriority+0x50>)
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	f003 030f 	and.w	r3, r3, #15
 8000cd6:	3b04      	subs	r3, #4
 8000cd8:	0112      	lsls	r2, r2, #4
 8000cda:	b2d2      	uxtb	r2, r2
 8000cdc:	440b      	add	r3, r1
 8000cde:	761a      	strb	r2, [r3, #24]
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000e100 	.word	0xe000e100
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <NVIC_EncodePriority>:
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b089      	sub	sp, #36	; 0x24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	f1c3 0307 	rsb	r3, r3, #7
 8000d0e:	2b04      	cmp	r3, #4
 8000d10:	bf28      	it	cs
 8000d12:	2304      	movcs	r3, #4
 8000d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3304      	adds	r3, #4
 8000d1a:	2b06      	cmp	r3, #6
 8000d1c:	d902      	bls.n	8000d24 <NVIC_EncodePriority+0x30>
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3b03      	subs	r3, #3
 8000d22:	e000      	b.n	8000d26 <NVIC_EncodePriority+0x32>
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	f04f 32ff 	mov.w	r2, #4294967295
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43da      	mvns	r2, r3
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	401a      	ands	r2, r3
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa01 f303 	lsl.w	r3, r1, r3
 8000d46:	43d9      	mvns	r1, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	4313      	orrs	r3, r2
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3724      	adds	r7, #36	; 0x24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr

08000d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff ff4f 	bl	8000c04 <__NVIC_SetPriorityGrouping>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b086      	sub	sp, #24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
 8000d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d80:	f7ff ff64 	bl	8000c4c <__NVIC_GetPriorityGrouping>
 8000d84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	68b9      	ldr	r1, [r7, #8]
 8000d8a:	6978      	ldr	r0, [r7, #20]
 8000d8c:	f7ff ffb2 	bl	8000cf4 <NVIC_EncodePriority>
 8000d90:	4602      	mov	r2, r0
 8000d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d96:	4611      	mov	r1, r2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff81 	bl	8000ca0 <__NVIC_SetPriority>
}
 8000d9e:	bf00      	nop
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	4603      	mov	r3, r0
 8000dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff57 	bl	8000c68 <__NVIC_EnableIRQ>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b087      	sub	sp, #28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000dda:	e160      	b.n	800109e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	2101      	movs	r1, #1
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	fa01 f303 	lsl.w	r3, r1, r3
 8000de8:	4013      	ands	r3, r2
 8000dea:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f000 8152 	beq.w	8001098 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 0303 	and.w	r3, r3, #3
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d005      	beq.n	8000e0c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d130      	bne.n	8000e6e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	2203      	movs	r2, #3
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	68da      	ldr	r2, [r3, #12]
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000e42:	2201      	movs	r2, #1
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	091b      	lsrs	r3, r3, #4
 8000e58:	f003 0201 	and.w	r2, r3, #1
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f003 0303 	and.w	r3, r3, #3
 8000e76:	2b03      	cmp	r3, #3
 8000e78:	d017      	beq.n	8000eaa <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	2203      	movs	r2, #3
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	689a      	ldr	r2, [r3, #8]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d123      	bne.n	8000efe <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	08da      	lsrs	r2, r3, #3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3208      	adds	r2, #8
 8000ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	220f      	movs	r2, #15
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	691a      	ldr	r2, [r3, #16]
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	f003 0307 	and.w	r3, r3, #7
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	08da      	lsrs	r2, r3, #3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3208      	adds	r2, #8
 8000ef8:	6939      	ldr	r1, [r7, #16]
 8000efa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	2203      	movs	r2, #3
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4013      	ands	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f003 0203 	and.w	r2, r3, #3
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f000 80ac 	beq.w	8001098 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f40:	4b5e      	ldr	r3, [pc, #376]	; (80010bc <HAL_GPIO_Init+0x2f8>)
 8000f42:	6a1b      	ldr	r3, [r3, #32]
 8000f44:	4a5d      	ldr	r2, [pc, #372]	; (80010bc <HAL_GPIO_Init+0x2f8>)
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	6213      	str	r3, [r2, #32]
 8000f4c:	4b5b      	ldr	r3, [pc, #364]	; (80010bc <HAL_GPIO_Init+0x2f8>)
 8000f4e:	6a1b      	ldr	r3, [r3, #32]
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f58:	4a59      	ldr	r2, [pc, #356]	; (80010c0 <HAL_GPIO_Init+0x2fc>)
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	089b      	lsrs	r3, r3, #2
 8000f5e:	3302      	adds	r3, #2
 8000f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f64:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	f003 0303 	and.w	r3, r3, #3
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	220f      	movs	r2, #15
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a51      	ldr	r2, [pc, #324]	; (80010c4 <HAL_GPIO_Init+0x300>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d025      	beq.n	8000fd0 <HAL_GPIO_Init+0x20c>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a50      	ldr	r2, [pc, #320]	; (80010c8 <HAL_GPIO_Init+0x304>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d01f      	beq.n	8000fcc <HAL_GPIO_Init+0x208>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a4f      	ldr	r2, [pc, #316]	; (80010cc <HAL_GPIO_Init+0x308>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d019      	beq.n	8000fc8 <HAL_GPIO_Init+0x204>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a4e      	ldr	r2, [pc, #312]	; (80010d0 <HAL_GPIO_Init+0x30c>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d013      	beq.n	8000fc4 <HAL_GPIO_Init+0x200>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a4d      	ldr	r2, [pc, #308]	; (80010d4 <HAL_GPIO_Init+0x310>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d00d      	beq.n	8000fc0 <HAL_GPIO_Init+0x1fc>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a4c      	ldr	r2, [pc, #304]	; (80010d8 <HAL_GPIO_Init+0x314>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d007      	beq.n	8000fbc <HAL_GPIO_Init+0x1f8>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a4b      	ldr	r2, [pc, #300]	; (80010dc <HAL_GPIO_Init+0x318>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d101      	bne.n	8000fb8 <HAL_GPIO_Init+0x1f4>
 8000fb4:	2306      	movs	r3, #6
 8000fb6:	e00c      	b.n	8000fd2 <HAL_GPIO_Init+0x20e>
 8000fb8:	2307      	movs	r3, #7
 8000fba:	e00a      	b.n	8000fd2 <HAL_GPIO_Init+0x20e>
 8000fbc:	2305      	movs	r3, #5
 8000fbe:	e008      	b.n	8000fd2 <HAL_GPIO_Init+0x20e>
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	e006      	b.n	8000fd2 <HAL_GPIO_Init+0x20e>
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e004      	b.n	8000fd2 <HAL_GPIO_Init+0x20e>
 8000fc8:	2302      	movs	r3, #2
 8000fca:	e002      	b.n	8000fd2 <HAL_GPIO_Init+0x20e>
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e000      	b.n	8000fd2 <HAL_GPIO_Init+0x20e>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	f002 0203 	and.w	r2, r2, #3
 8000fd8:	0092      	lsls	r2, r2, #2
 8000fda:	4093      	lsls	r3, r2
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000fe2:	4937      	ldr	r1, [pc, #220]	; (80010c0 <HAL_GPIO_Init+0x2fc>)
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	089b      	lsrs	r3, r3, #2
 8000fe8:	3302      	adds	r3, #2
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ff0:	4b3b      	ldr	r3, [pc, #236]	; (80010e0 <HAL_GPIO_Init+0x31c>)
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001014:	4a32      	ldr	r2, [pc, #200]	; (80010e0 <HAL_GPIO_Init+0x31c>)
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800101a:	4b31      	ldr	r3, [pc, #196]	; (80010e0 <HAL_GPIO_Init+0x31c>)
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	43db      	mvns	r3, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800103e:	4a28      	ldr	r2, [pc, #160]	; (80010e0 <HAL_GPIO_Init+0x31c>)
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001044:	4b26      	ldr	r3, [pc, #152]	; (80010e0 <HAL_GPIO_Init+0x31c>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	43db      	mvns	r3, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d003      	beq.n	8001068 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001068:	4a1d      	ldr	r2, [pc, #116]	; (80010e0 <HAL_GPIO_Init+0x31c>)
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800106e:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <HAL_GPIO_Init+0x31c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	43db      	mvns	r3, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4013      	ands	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4313      	orrs	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001092:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <HAL_GPIO_Init+0x31c>)
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	3301      	adds	r3, #1
 800109c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	fa22 f303 	lsr.w	r3, r2, r3
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	f47f ae97 	bne.w	8000ddc <HAL_GPIO_Init+0x18>
  }
}
 80010ae:	bf00      	nop
 80010b0:	bf00      	nop
 80010b2:	371c      	adds	r7, #28
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40010000 	.word	0x40010000
 80010c4:	40020000 	.word	0x40020000
 80010c8:	40020400 	.word	0x40020400
 80010cc:	40020800 	.word	0x40020800
 80010d0:	40020c00 	.word	0x40020c00
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40021400 	.word	0x40021400
 80010dc:	40021800 	.word	0x40021800
 80010e0:	40010400 	.word	0x40010400

080010e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	460b      	mov	r3, r1
 80010ee:	807b      	strh	r3, [r7, #2]
 80010f0:	4613      	mov	r3, r2
 80010f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010f4:	787b      	ldrb	r3, [r7, #1]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010fa:	887a      	ldrh	r2, [r7, #2]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001100:	e003      	b.n	800110a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001102:	887b      	ldrh	r3, [r7, #2]
 8001104:	041a      	lsls	r2, r3, #16
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	619a      	str	r2, [r3, #24]
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e31d      	b.n	8001762 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001126:	4b94      	ldr	r3, [pc, #592]	; (8001378 <HAL_RCC_OscConfig+0x264>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f003 030c 	and.w	r3, r3, #12
 800112e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001130:	4b91      	ldr	r3, [pc, #580]	; (8001378 <HAL_RCC_OscConfig+0x264>)
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001138:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	2b00      	cmp	r3, #0
 8001144:	d07b      	beq.n	800123e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	2b08      	cmp	r3, #8
 800114a:	d006      	beq.n	800115a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	2b0c      	cmp	r3, #12
 8001150:	d10f      	bne.n	8001172 <HAL_RCC_OscConfig+0x5e>
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001158:	d10b      	bne.n	8001172 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800115a:	4b87      	ldr	r3, [pc, #540]	; (8001378 <HAL_RCC_OscConfig+0x264>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d06a      	beq.n	800123c <HAL_RCC_OscConfig+0x128>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d166      	bne.n	800123c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e2f7      	b.n	8001762 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d106      	bne.n	8001188 <HAL_RCC_OscConfig+0x74>
 800117a:	4b7f      	ldr	r3, [pc, #508]	; (8001378 <HAL_RCC_OscConfig+0x264>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a7e      	ldr	r2, [pc, #504]	; (8001378 <HAL_RCC_OscConfig+0x264>)
 8001180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	e02d      	b.n	80011e4 <HAL_RCC_OscConfig+0xd0>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d10c      	bne.n	80011aa <HAL_RCC_OscConfig+0x96>
 8001190:	4b79      	ldr	r3, [pc, #484]	; (8001378 <HAL_RCC_OscConfig+0x264>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a78      	ldr	r2, [pc, #480]	; (8001378 <HAL_RCC_OscConfig+0x264>)
 8001196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	4b76      	ldr	r3, [pc, #472]	; (8001378 <HAL_RCC_OscConfig+0x264>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a75      	ldr	r2, [pc, #468]	; (8001378 <HAL_RCC_OscConfig+0x264>)
 80011a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011a6:	6013      	str	r3, [r2, #0]
 80011a8:	e01c      	b.n	80011e4 <HAL_RCC_OscConfig+0xd0>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2b05      	cmp	r3, #5
 80011b0:	d10c      	bne.n	80011cc <HAL_RCC_OscConfig+0xb8>
 80011b2:	4b71      	ldr	r3, [pc, #452]	; (8001378 <HAL_RCC_OscConfig+0x264>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a70      	ldr	r2, [pc, #448]	; (8001378 <HAL_RCC_OscConfig+0x264>)
 80011b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	4b6e      	ldr	r3, [pc, #440]	; (8001378 <HAL_RCC_OscConfig+0x264>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a6d      	ldr	r2, [pc, #436]	; (8001378 <HAL_RCC_OscConfig+0x264>)
 80011c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	e00b      	b.n	80011e4 <HAL_RCC_OscConfig+0xd0>
 80011cc:	4b6a      	ldr	r3, [pc, #424]	; (8001378 <HAL_RCC_OscConfig+0x264>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a69      	ldr	r2, [pc, #420]	; (8001378 <HAL_RCC_OscConfig+0x264>)
 80011d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	4b67      	ldr	r3, [pc, #412]	; (8001378 <HAL_RCC_OscConfig+0x264>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a66      	ldr	r2, [pc, #408]	; (8001378 <HAL_RCC_OscConfig+0x264>)
 80011de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d013      	beq.n	8001214 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ec:	f7ff fcde 	bl	8000bac <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011f4:	f7ff fcda 	bl	8000bac <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b64      	cmp	r3, #100	; 0x64
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e2ad      	b.n	8001762 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001206:	4b5c      	ldr	r3, [pc, #368]	; (8001378 <HAL_RCC_OscConfig+0x264>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0f0      	beq.n	80011f4 <HAL_RCC_OscConfig+0xe0>
 8001212:	e014      	b.n	800123e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001214:	f7ff fcca 	bl	8000bac <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800121c:	f7ff fcc6 	bl	8000bac <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b64      	cmp	r3, #100	; 0x64
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e299      	b.n	8001762 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800122e:	4b52      	ldr	r3, [pc, #328]	; (8001378 <HAL_RCC_OscConfig+0x264>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f0      	bne.n	800121c <HAL_RCC_OscConfig+0x108>
 800123a:	e000      	b.n	800123e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800123c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d05a      	beq.n	8001300 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	2b04      	cmp	r3, #4
 800124e:	d005      	beq.n	800125c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	2b0c      	cmp	r3, #12
 8001254:	d119      	bne.n	800128a <HAL_RCC_OscConfig+0x176>
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d116      	bne.n	800128a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800125c:	4b46      	ldr	r3, [pc, #280]	; (8001378 <HAL_RCC_OscConfig+0x264>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d005      	beq.n	8001274 <HAL_RCC_OscConfig+0x160>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d001      	beq.n	8001274 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e276      	b.n	8001762 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001274:	4b40      	ldr	r3, [pc, #256]	; (8001378 <HAL_RCC_OscConfig+0x264>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	691b      	ldr	r3, [r3, #16]
 8001280:	021b      	lsls	r3, r3, #8
 8001282:	493d      	ldr	r1, [pc, #244]	; (8001378 <HAL_RCC_OscConfig+0x264>)
 8001284:	4313      	orrs	r3, r2
 8001286:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001288:	e03a      	b.n	8001300 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d020      	beq.n	80012d4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001292:	4b3a      	ldr	r3, [pc, #232]	; (800137c <HAL_RCC_OscConfig+0x268>)
 8001294:	2201      	movs	r2, #1
 8001296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001298:	f7ff fc88 	bl	8000bac <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012a0:	f7ff fc84 	bl	8000bac <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e257      	b.n	8001762 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012b2:	4b31      	ldr	r3, [pc, #196]	; (8001378 <HAL_RCC_OscConfig+0x264>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0f0      	beq.n	80012a0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012be:	4b2e      	ldr	r3, [pc, #184]	; (8001378 <HAL_RCC_OscConfig+0x264>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	021b      	lsls	r3, r3, #8
 80012cc:	492a      	ldr	r1, [pc, #168]	; (8001378 <HAL_RCC_OscConfig+0x264>)
 80012ce:	4313      	orrs	r3, r2
 80012d0:	604b      	str	r3, [r1, #4]
 80012d2:	e015      	b.n	8001300 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012d4:	4b29      	ldr	r3, [pc, #164]	; (800137c <HAL_RCC_OscConfig+0x268>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012da:	f7ff fc67 	bl	8000bac <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012e2:	f7ff fc63 	bl	8000bac <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e236      	b.n	8001762 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012f4:	4b20      	ldr	r3, [pc, #128]	; (8001378 <HAL_RCC_OscConfig+0x264>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1f0      	bne.n	80012e2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0310 	and.w	r3, r3, #16
 8001308:	2b00      	cmp	r3, #0
 800130a:	f000 80b8 	beq.w	800147e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d170      	bne.n	80013f6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001314:	4b18      	ldr	r3, [pc, #96]	; (8001378 <HAL_RCC_OscConfig+0x264>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800131c:	2b00      	cmp	r3, #0
 800131e:	d005      	beq.n	800132c <HAL_RCC_OscConfig+0x218>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d101      	bne.n	800132c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e21a      	b.n	8001762 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a1a      	ldr	r2, [r3, #32]
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <HAL_RCC_OscConfig+0x264>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001338:	429a      	cmp	r2, r3
 800133a:	d921      	bls.n	8001380 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	4618      	mov	r0, r3
 8001342:	f000 fcad 	bl	8001ca0 <RCC_SetFlashLatencyFromMSIRange>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e208      	b.n	8001762 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <HAL_RCC_OscConfig+0x264>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	4906      	ldr	r1, [pc, #24]	; (8001378 <HAL_RCC_OscConfig+0x264>)
 800135e:	4313      	orrs	r3, r2
 8001360:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001362:	4b05      	ldr	r3, [pc, #20]	; (8001378 <HAL_RCC_OscConfig+0x264>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	061b      	lsls	r3, r3, #24
 8001370:	4901      	ldr	r1, [pc, #4]	; (8001378 <HAL_RCC_OscConfig+0x264>)
 8001372:	4313      	orrs	r3, r2
 8001374:	604b      	str	r3, [r1, #4]
 8001376:	e020      	b.n	80013ba <HAL_RCC_OscConfig+0x2a6>
 8001378:	40023800 	.word	0x40023800
 800137c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001380:	4b99      	ldr	r3, [pc, #612]	; (80015e8 <HAL_RCC_OscConfig+0x4d4>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	4996      	ldr	r1, [pc, #600]	; (80015e8 <HAL_RCC_OscConfig+0x4d4>)
 800138e:	4313      	orrs	r3, r2
 8001390:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001392:	4b95      	ldr	r3, [pc, #596]	; (80015e8 <HAL_RCC_OscConfig+0x4d4>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	061b      	lsls	r3, r3, #24
 80013a0:	4991      	ldr	r1, [pc, #580]	; (80015e8 <HAL_RCC_OscConfig+0x4d4>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a1b      	ldr	r3, [r3, #32]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 fc78 	bl	8001ca0 <RCC_SetFlashLatencyFromMSIRange>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e1d3      	b.n	8001762 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a1b      	ldr	r3, [r3, #32]
 80013be:	0b5b      	lsrs	r3, r3, #13
 80013c0:	3301      	adds	r3, #1
 80013c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80013ca:	4a87      	ldr	r2, [pc, #540]	; (80015e8 <HAL_RCC_OscConfig+0x4d4>)
 80013cc:	6892      	ldr	r2, [r2, #8]
 80013ce:	0912      	lsrs	r2, r2, #4
 80013d0:	f002 020f 	and.w	r2, r2, #15
 80013d4:	4985      	ldr	r1, [pc, #532]	; (80015ec <HAL_RCC_OscConfig+0x4d8>)
 80013d6:	5c8a      	ldrb	r2, [r1, r2]
 80013d8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80013da:	4a85      	ldr	r2, [pc, #532]	; (80015f0 <HAL_RCC_OscConfig+0x4dc>)
 80013dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013de:	4b85      	ldr	r3, [pc, #532]	; (80015f4 <HAL_RCC_OscConfig+0x4e0>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fa6e 	bl	80008c4 <HAL_InitTick>
 80013e8:	4603      	mov	r3, r0
 80013ea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d045      	beq.n	800147e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	e1b5      	b.n	8001762 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d029      	beq.n	8001452 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013fe:	4b7e      	ldr	r3, [pc, #504]	; (80015f8 <HAL_RCC_OscConfig+0x4e4>)
 8001400:	2201      	movs	r2, #1
 8001402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001404:	f7ff fbd2 	bl	8000bac <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800140c:	f7ff fbce 	bl	8000bac <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e1a1      	b.n	8001762 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800141e:	4b72      	ldr	r3, [pc, #456]	; (80015e8 <HAL_RCC_OscConfig+0x4d4>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f0      	beq.n	800140c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800142a:	4b6f      	ldr	r3, [pc, #444]	; (80015e8 <HAL_RCC_OscConfig+0x4d4>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a1b      	ldr	r3, [r3, #32]
 8001436:	496c      	ldr	r1, [pc, #432]	; (80015e8 <HAL_RCC_OscConfig+0x4d4>)
 8001438:	4313      	orrs	r3, r2
 800143a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800143c:	4b6a      	ldr	r3, [pc, #424]	; (80015e8 <HAL_RCC_OscConfig+0x4d4>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69db      	ldr	r3, [r3, #28]
 8001448:	061b      	lsls	r3, r3, #24
 800144a:	4967      	ldr	r1, [pc, #412]	; (80015e8 <HAL_RCC_OscConfig+0x4d4>)
 800144c:	4313      	orrs	r3, r2
 800144e:	604b      	str	r3, [r1, #4]
 8001450:	e015      	b.n	800147e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001452:	4b69      	ldr	r3, [pc, #420]	; (80015f8 <HAL_RCC_OscConfig+0x4e4>)
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001458:	f7ff fba8 	bl	8000bac <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001460:	f7ff fba4 	bl	8000bac <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e177      	b.n	8001762 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001472:	4b5d      	ldr	r3, [pc, #372]	; (80015e8 <HAL_RCC_OscConfig+0x4d4>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f0      	bne.n	8001460 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	2b00      	cmp	r3, #0
 8001488:	d030      	beq.n	80014ec <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d016      	beq.n	80014c0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001492:	4b5a      	ldr	r3, [pc, #360]	; (80015fc <HAL_RCC_OscConfig+0x4e8>)
 8001494:	2201      	movs	r2, #1
 8001496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001498:	f7ff fb88 	bl	8000bac <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a0:	f7ff fb84 	bl	8000bac <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e157      	b.n	8001762 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014b2:	4b4d      	ldr	r3, [pc, #308]	; (80015e8 <HAL_RCC_OscConfig+0x4d4>)
 80014b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0x38c>
 80014be:	e015      	b.n	80014ec <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014c0:	4b4e      	ldr	r3, [pc, #312]	; (80015fc <HAL_RCC_OscConfig+0x4e8>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c6:	f7ff fb71 	bl	8000bac <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ce:	f7ff fb6d 	bl	8000bac <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e140      	b.n	8001762 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014e0:	4b41      	ldr	r3, [pc, #260]	; (80015e8 <HAL_RCC_OscConfig+0x4d4>)
 80014e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1f0      	bne.n	80014ce <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 80b5 	beq.w	8001664 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014fa:	2300      	movs	r3, #0
 80014fc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014fe:	4b3a      	ldr	r3, [pc, #232]	; (80015e8 <HAL_RCC_OscConfig+0x4d4>)
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10d      	bne.n	8001526 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800150a:	4b37      	ldr	r3, [pc, #220]	; (80015e8 <HAL_RCC_OscConfig+0x4d4>)
 800150c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150e:	4a36      	ldr	r2, [pc, #216]	; (80015e8 <HAL_RCC_OscConfig+0x4d4>)
 8001510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001514:	6253      	str	r3, [r2, #36]	; 0x24
 8001516:	4b34      	ldr	r3, [pc, #208]	; (80015e8 <HAL_RCC_OscConfig+0x4d4>)
 8001518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001522:	2301      	movs	r3, #1
 8001524:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001526:	4b36      	ldr	r3, [pc, #216]	; (8001600 <HAL_RCC_OscConfig+0x4ec>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152e:	2b00      	cmp	r3, #0
 8001530:	d118      	bne.n	8001564 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001532:	4b33      	ldr	r3, [pc, #204]	; (8001600 <HAL_RCC_OscConfig+0x4ec>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a32      	ldr	r2, [pc, #200]	; (8001600 <HAL_RCC_OscConfig+0x4ec>)
 8001538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800153c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800153e:	f7ff fb35 	bl	8000bac <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001546:	f7ff fb31 	bl	8000bac <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b64      	cmp	r3, #100	; 0x64
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e104      	b.n	8001762 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001558:	4b29      	ldr	r3, [pc, #164]	; (8001600 <HAL_RCC_OscConfig+0x4ec>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0f0      	beq.n	8001546 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d106      	bne.n	800157a <HAL_RCC_OscConfig+0x466>
 800156c:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <HAL_RCC_OscConfig+0x4d4>)
 800156e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001570:	4a1d      	ldr	r2, [pc, #116]	; (80015e8 <HAL_RCC_OscConfig+0x4d4>)
 8001572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001576:	6353      	str	r3, [r2, #52]	; 0x34
 8001578:	e02d      	b.n	80015d6 <HAL_RCC_OscConfig+0x4c2>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10c      	bne.n	800159c <HAL_RCC_OscConfig+0x488>
 8001582:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <HAL_RCC_OscConfig+0x4d4>)
 8001584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001586:	4a18      	ldr	r2, [pc, #96]	; (80015e8 <HAL_RCC_OscConfig+0x4d4>)
 8001588:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800158c:	6353      	str	r3, [r2, #52]	; 0x34
 800158e:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <HAL_RCC_OscConfig+0x4d4>)
 8001590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001592:	4a15      	ldr	r2, [pc, #84]	; (80015e8 <HAL_RCC_OscConfig+0x4d4>)
 8001594:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001598:	6353      	str	r3, [r2, #52]	; 0x34
 800159a:	e01c      	b.n	80015d6 <HAL_RCC_OscConfig+0x4c2>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	2b05      	cmp	r3, #5
 80015a2:	d10c      	bne.n	80015be <HAL_RCC_OscConfig+0x4aa>
 80015a4:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <HAL_RCC_OscConfig+0x4d4>)
 80015a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015a8:	4a0f      	ldr	r2, [pc, #60]	; (80015e8 <HAL_RCC_OscConfig+0x4d4>)
 80015aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ae:	6353      	str	r3, [r2, #52]	; 0x34
 80015b0:	4b0d      	ldr	r3, [pc, #52]	; (80015e8 <HAL_RCC_OscConfig+0x4d4>)
 80015b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b4:	4a0c      	ldr	r2, [pc, #48]	; (80015e8 <HAL_RCC_OscConfig+0x4d4>)
 80015b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ba:	6353      	str	r3, [r2, #52]	; 0x34
 80015bc:	e00b      	b.n	80015d6 <HAL_RCC_OscConfig+0x4c2>
 80015be:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <HAL_RCC_OscConfig+0x4d4>)
 80015c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c2:	4a09      	ldr	r2, [pc, #36]	; (80015e8 <HAL_RCC_OscConfig+0x4d4>)
 80015c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015c8:	6353      	str	r3, [r2, #52]	; 0x34
 80015ca:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <HAL_RCC_OscConfig+0x4d4>)
 80015cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ce:	4a06      	ldr	r2, [pc, #24]	; (80015e8 <HAL_RCC_OscConfig+0x4d4>)
 80015d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015d4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d024      	beq.n	8001628 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015de:	f7ff fae5 	bl	8000bac <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015e4:	e019      	b.n	800161a <HAL_RCC_OscConfig+0x506>
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800
 80015ec:	08004370 	.word	0x08004370
 80015f0:	20000000 	.word	0x20000000
 80015f4:	20000004 	.word	0x20000004
 80015f8:	42470020 	.word	0x42470020
 80015fc:	42470680 	.word	0x42470680
 8001600:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001604:	f7ff fad2 	bl	8000bac <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001612:	4293      	cmp	r3, r2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e0a3      	b.n	8001762 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800161a:	4b54      	ldr	r3, [pc, #336]	; (800176c <HAL_RCC_OscConfig+0x658>)
 800161c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800161e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0ee      	beq.n	8001604 <HAL_RCC_OscConfig+0x4f0>
 8001626:	e014      	b.n	8001652 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001628:	f7ff fac0 	bl	8000bac <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800162e:	e00a      	b.n	8001646 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001630:	f7ff fabc 	bl	8000bac <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	f241 3288 	movw	r2, #5000	; 0x1388
 800163e:	4293      	cmp	r3, r2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e08d      	b.n	8001762 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001646:	4b49      	ldr	r3, [pc, #292]	; (800176c <HAL_RCC_OscConfig+0x658>)
 8001648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800164a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1ee      	bne.n	8001630 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001652:	7ffb      	ldrb	r3, [r7, #31]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d105      	bne.n	8001664 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001658:	4b44      	ldr	r3, [pc, #272]	; (800176c <HAL_RCC_OscConfig+0x658>)
 800165a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165c:	4a43      	ldr	r2, [pc, #268]	; (800176c <HAL_RCC_OscConfig+0x658>)
 800165e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001662:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001668:	2b00      	cmp	r3, #0
 800166a:	d079      	beq.n	8001760 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	2b0c      	cmp	r3, #12
 8001670:	d056      	beq.n	8001720 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001676:	2b02      	cmp	r3, #2
 8001678:	d13b      	bne.n	80016f2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167a:	4b3d      	ldr	r3, [pc, #244]	; (8001770 <HAL_RCC_OscConfig+0x65c>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff fa94 	bl	8000bac <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001688:	f7ff fa90 	bl	8000bac <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e063      	b.n	8001762 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800169a:	4b34      	ldr	r3, [pc, #208]	; (800176c <HAL_RCC_OscConfig+0x658>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016a6:	4b31      	ldr	r3, [pc, #196]	; (800176c <HAL_RCC_OscConfig+0x658>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b6:	4319      	orrs	r1, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016bc:	430b      	orrs	r3, r1
 80016be:	492b      	ldr	r1, [pc, #172]	; (800176c <HAL_RCC_OscConfig+0x658>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c4:	4b2a      	ldr	r3, [pc, #168]	; (8001770 <HAL_RCC_OscConfig+0x65c>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ca:	f7ff fa6f 	bl	8000bac <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d2:	f7ff fa6b 	bl	8000bac <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e03e      	b.n	8001762 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016e4:	4b21      	ldr	r3, [pc, #132]	; (800176c <HAL_RCC_OscConfig+0x658>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0f0      	beq.n	80016d2 <HAL_RCC_OscConfig+0x5be>
 80016f0:	e036      	b.n	8001760 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f2:	4b1f      	ldr	r3, [pc, #124]	; (8001770 <HAL_RCC_OscConfig+0x65c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f8:	f7ff fa58 	bl	8000bac <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001700:	f7ff fa54 	bl	8000bac <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e027      	b.n	8001762 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001712:	4b16      	ldr	r3, [pc, #88]	; (800176c <HAL_RCC_OscConfig+0x658>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1f0      	bne.n	8001700 <HAL_RCC_OscConfig+0x5ec>
 800171e:	e01f      	b.n	8001760 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	2b01      	cmp	r3, #1
 8001726:	d101      	bne.n	800172c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e01a      	b.n	8001762 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800172c:	4b0f      	ldr	r3, [pc, #60]	; (800176c <HAL_RCC_OscConfig+0x658>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173c:	429a      	cmp	r2, r3
 800173e:	d10d      	bne.n	800175c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174a:	429a      	cmp	r2, r3
 800174c:	d106      	bne.n	800175c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001758:	429a      	cmp	r2, r3
 800175a:	d001      	beq.n	8001760 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e000      	b.n	8001762 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3720      	adds	r7, #32
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800
 8001770:	42470060 	.word	0x42470060

08001774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e11a      	b.n	80019be <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001788:	4b8f      	ldr	r3, [pc, #572]	; (80019c8 <HAL_RCC_ClockConfig+0x254>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	d919      	bls.n	80017ca <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d105      	bne.n	80017a8 <HAL_RCC_ClockConfig+0x34>
 800179c:	4b8a      	ldr	r3, [pc, #552]	; (80019c8 <HAL_RCC_ClockConfig+0x254>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a89      	ldr	r2, [pc, #548]	; (80019c8 <HAL_RCC_ClockConfig+0x254>)
 80017a2:	f043 0304 	orr.w	r3, r3, #4
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	4b87      	ldr	r3, [pc, #540]	; (80019c8 <HAL_RCC_ClockConfig+0x254>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f023 0201 	bic.w	r2, r3, #1
 80017b0:	4985      	ldr	r1, [pc, #532]	; (80019c8 <HAL_RCC_ClockConfig+0x254>)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b8:	4b83      	ldr	r3, [pc, #524]	; (80019c8 <HAL_RCC_ClockConfig+0x254>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d001      	beq.n	80017ca <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e0f9      	b.n	80019be <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d008      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017d6:	4b7d      	ldr	r3, [pc, #500]	; (80019cc <HAL_RCC_ClockConfig+0x258>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	497a      	ldr	r1, [pc, #488]	; (80019cc <HAL_RCC_ClockConfig+0x258>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f000 808e 	beq.w	8001912 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d107      	bne.n	800180e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017fe:	4b73      	ldr	r3, [pc, #460]	; (80019cc <HAL_RCC_ClockConfig+0x258>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d121      	bne.n	800184e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e0d7      	b.n	80019be <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b03      	cmp	r3, #3
 8001814:	d107      	bne.n	8001826 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001816:	4b6d      	ldr	r3, [pc, #436]	; (80019cc <HAL_RCC_ClockConfig+0x258>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d115      	bne.n	800184e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e0cb      	b.n	80019be <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d107      	bne.n	800183e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800182e:	4b67      	ldr	r3, [pc, #412]	; (80019cc <HAL_RCC_ClockConfig+0x258>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d109      	bne.n	800184e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e0bf      	b.n	80019be <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800183e:	4b63      	ldr	r3, [pc, #396]	; (80019cc <HAL_RCC_ClockConfig+0x258>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e0b7      	b.n	80019be <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800184e:	4b5f      	ldr	r3, [pc, #380]	; (80019cc <HAL_RCC_ClockConfig+0x258>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f023 0203 	bic.w	r2, r3, #3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	495c      	ldr	r1, [pc, #368]	; (80019cc <HAL_RCC_ClockConfig+0x258>)
 800185c:	4313      	orrs	r3, r2
 800185e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001860:	f7ff f9a4 	bl	8000bac <HAL_GetTick>
 8001864:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b02      	cmp	r3, #2
 800186c:	d112      	bne.n	8001894 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800186e:	e00a      	b.n	8001886 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001870:	f7ff f99c 	bl	8000bac <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	f241 3288 	movw	r2, #5000	; 0x1388
 800187e:	4293      	cmp	r3, r2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e09b      	b.n	80019be <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001886:	4b51      	ldr	r3, [pc, #324]	; (80019cc <HAL_RCC_ClockConfig+0x258>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 030c 	and.w	r3, r3, #12
 800188e:	2b08      	cmp	r3, #8
 8001890:	d1ee      	bne.n	8001870 <HAL_RCC_ClockConfig+0xfc>
 8001892:	e03e      	b.n	8001912 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b03      	cmp	r3, #3
 800189a:	d112      	bne.n	80018c2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800189c:	e00a      	b.n	80018b4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800189e:	f7ff f985 	bl	8000bac <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e084      	b.n	80019be <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018b4:	4b45      	ldr	r3, [pc, #276]	; (80019cc <HAL_RCC_ClockConfig+0x258>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 030c 	and.w	r3, r3, #12
 80018bc:	2b0c      	cmp	r3, #12
 80018be:	d1ee      	bne.n	800189e <HAL_RCC_ClockConfig+0x12a>
 80018c0:	e027      	b.n	8001912 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d11d      	bne.n	8001906 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ca:	e00a      	b.n	80018e2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018cc:	f7ff f96e 	bl	8000bac <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018da:	4293      	cmp	r3, r2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e06d      	b.n	80019be <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018e2:	4b3a      	ldr	r3, [pc, #232]	; (80019cc <HAL_RCC_ClockConfig+0x258>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 030c 	and.w	r3, r3, #12
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	d1ee      	bne.n	80018cc <HAL_RCC_ClockConfig+0x158>
 80018ee:	e010      	b.n	8001912 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f0:	f7ff f95c 	bl	8000bac <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fe:	4293      	cmp	r3, r2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e05b      	b.n	80019be <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001906:	4b31      	ldr	r3, [pc, #196]	; (80019cc <HAL_RCC_ClockConfig+0x258>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 030c 	and.w	r3, r3, #12
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1ee      	bne.n	80018f0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001912:	4b2d      	ldr	r3, [pc, #180]	; (80019c8 <HAL_RCC_ClockConfig+0x254>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d219      	bcs.n	8001954 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d105      	bne.n	8001932 <HAL_RCC_ClockConfig+0x1be>
 8001926:	4b28      	ldr	r3, [pc, #160]	; (80019c8 <HAL_RCC_ClockConfig+0x254>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a27      	ldr	r2, [pc, #156]	; (80019c8 <HAL_RCC_ClockConfig+0x254>)
 800192c:	f043 0304 	orr.w	r3, r3, #4
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <HAL_RCC_ClockConfig+0x254>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f023 0201 	bic.w	r2, r3, #1
 800193a:	4923      	ldr	r1, [pc, #140]	; (80019c8 <HAL_RCC_ClockConfig+0x254>)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	4313      	orrs	r3, r2
 8001940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001942:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <HAL_RCC_ClockConfig+0x254>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d001      	beq.n	8001954 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e034      	b.n	80019be <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	d008      	beq.n	8001972 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001960:	4b1a      	ldr	r3, [pc, #104]	; (80019cc <HAL_RCC_ClockConfig+0x258>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	4917      	ldr	r1, [pc, #92]	; (80019cc <HAL_RCC_ClockConfig+0x258>)
 800196e:	4313      	orrs	r3, r2
 8001970:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	2b00      	cmp	r3, #0
 800197c:	d009      	beq.n	8001992 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800197e:	4b13      	ldr	r3, [pc, #76]	; (80019cc <HAL_RCC_ClockConfig+0x258>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	490f      	ldr	r1, [pc, #60]	; (80019cc <HAL_RCC_ClockConfig+0x258>)
 800198e:	4313      	orrs	r3, r2
 8001990:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001992:	f000 f823 	bl	80019dc <HAL_RCC_GetSysClockFreq>
 8001996:	4602      	mov	r2, r0
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <HAL_RCC_ClockConfig+0x258>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	091b      	lsrs	r3, r3, #4
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	490b      	ldr	r1, [pc, #44]	; (80019d0 <HAL_RCC_ClockConfig+0x25c>)
 80019a4:	5ccb      	ldrb	r3, [r1, r3]
 80019a6:	fa22 f303 	lsr.w	r3, r2, r3
 80019aa:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <HAL_RCC_ClockConfig+0x260>)
 80019ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019ae:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <HAL_RCC_ClockConfig+0x264>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe ff86 	bl	80008c4 <HAL_InitTick>
 80019b8:	4603      	mov	r3, r0
 80019ba:	72fb      	strb	r3, [r7, #11]

  return status;
 80019bc:	7afb      	ldrb	r3, [r7, #11]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40023c00 	.word	0x40023c00
 80019cc:	40023800 	.word	0x40023800
 80019d0:	08004370 	.word	0x08004370
 80019d4:	20000000 	.word	0x20000000
 80019d8:	20000004 	.word	0x20000004

080019dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019e0:	b092      	sub	sp, #72	; 0x48
 80019e2:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80019e4:	4b79      	ldr	r3, [pc, #484]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ec:	f003 030c 	and.w	r3, r3, #12
 80019f0:	2b0c      	cmp	r3, #12
 80019f2:	d00d      	beq.n	8001a10 <HAL_RCC_GetSysClockFreq+0x34>
 80019f4:	2b0c      	cmp	r3, #12
 80019f6:	f200 80d5 	bhi.w	8001ba4 <HAL_RCC_GetSysClockFreq+0x1c8>
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	d002      	beq.n	8001a04 <HAL_RCC_GetSysClockFreq+0x28>
 80019fe:	2b08      	cmp	r3, #8
 8001a00:	d003      	beq.n	8001a0a <HAL_RCC_GetSysClockFreq+0x2e>
 8001a02:	e0cf      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a04:	4b72      	ldr	r3, [pc, #456]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8001a06:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001a08:	e0da      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a0a:	4b72      	ldr	r3, [pc, #456]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8001a0c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001a0e:	e0d7      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a12:	0c9b      	lsrs	r3, r3, #18
 8001a14:	f003 020f 	and.w	r2, r3, #15
 8001a18:	4b6f      	ldr	r3, [pc, #444]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001a1a:	5c9b      	ldrb	r3, [r3, r2]
 8001a1c:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a20:	0d9b      	lsrs	r3, r3, #22
 8001a22:	f003 0303 	and.w	r3, r3, #3
 8001a26:	3301      	adds	r3, #1
 8001a28:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a2a:	4b68      	ldr	r3, [pc, #416]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d05d      	beq.n	8001af2 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a38:	2200      	movs	r2, #0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	4611      	mov	r1, r2
 8001a3e:	4604      	mov	r4, r0
 8001a40:	460d      	mov	r5, r1
 8001a42:	4622      	mov	r2, r4
 8001a44:	462b      	mov	r3, r5
 8001a46:	f04f 0000 	mov.w	r0, #0
 8001a4a:	f04f 0100 	mov.w	r1, #0
 8001a4e:	0159      	lsls	r1, r3, #5
 8001a50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a54:	0150      	lsls	r0, r2, #5
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4621      	mov	r1, r4
 8001a5c:	1a51      	subs	r1, r2, r1
 8001a5e:	6139      	str	r1, [r7, #16]
 8001a60:	4629      	mov	r1, r5
 8001a62:	eb63 0301 	sbc.w	r3, r3, r1
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a74:	4659      	mov	r1, fp
 8001a76:	018b      	lsls	r3, r1, #6
 8001a78:	4651      	mov	r1, sl
 8001a7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a7e:	4651      	mov	r1, sl
 8001a80:	018a      	lsls	r2, r1, #6
 8001a82:	46d4      	mov	ip, sl
 8001a84:	ebb2 080c 	subs.w	r8, r2, ip
 8001a88:	4659      	mov	r1, fp
 8001a8a:	eb63 0901 	sbc.w	r9, r3, r1
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	f04f 0300 	mov.w	r3, #0
 8001a96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001aa2:	4690      	mov	r8, r2
 8001aa4:	4699      	mov	r9, r3
 8001aa6:	4623      	mov	r3, r4
 8001aa8:	eb18 0303 	adds.w	r3, r8, r3
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	462b      	mov	r3, r5
 8001ab0:	eb49 0303 	adc.w	r3, r9, r3
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	f04f 0300 	mov.w	r3, #0
 8001abe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ac2:	4629      	mov	r1, r5
 8001ac4:	024b      	lsls	r3, r1, #9
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	4629      	mov	r1, r5
 8001aca:	4604      	mov	r4, r0
 8001acc:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8001ad0:	4601      	mov	r1, r0
 8001ad2:	024a      	lsls	r2, r1, #9
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ada:	2200      	movs	r2, #0
 8001adc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ade:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ae0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ae4:	f7fe fb4c 	bl	8000180 <__aeabi_uldivmod>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4613      	mov	r3, r2
 8001aee:	647b      	str	r3, [r7, #68]	; 0x44
 8001af0:	e055      	b.n	8001b9e <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001af4:	2200      	movs	r2, #0
 8001af6:	623b      	str	r3, [r7, #32]
 8001af8:	627a      	str	r2, [r7, #36]	; 0x24
 8001afa:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001afe:	4642      	mov	r2, r8
 8001b00:	464b      	mov	r3, r9
 8001b02:	f04f 0000 	mov.w	r0, #0
 8001b06:	f04f 0100 	mov.w	r1, #0
 8001b0a:	0159      	lsls	r1, r3, #5
 8001b0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b10:	0150      	lsls	r0, r2, #5
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	46c4      	mov	ip, r8
 8001b18:	ebb2 0a0c 	subs.w	sl, r2, ip
 8001b1c:	4640      	mov	r0, r8
 8001b1e:	4649      	mov	r1, r9
 8001b20:	468c      	mov	ip, r1
 8001b22:	eb63 0b0c 	sbc.w	fp, r3, ip
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	f04f 0300 	mov.w	r3, #0
 8001b2e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b32:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b36:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b3a:	ebb2 040a 	subs.w	r4, r2, sl
 8001b3e:	eb63 050b 	sbc.w	r5, r3, fp
 8001b42:	f04f 0200 	mov.w	r2, #0
 8001b46:	f04f 0300 	mov.w	r3, #0
 8001b4a:	00eb      	lsls	r3, r5, #3
 8001b4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b50:	00e2      	lsls	r2, r4, #3
 8001b52:	4614      	mov	r4, r2
 8001b54:	461d      	mov	r5, r3
 8001b56:	4603      	mov	r3, r0
 8001b58:	18e3      	adds	r3, r4, r3
 8001b5a:	603b      	str	r3, [r7, #0]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	eb45 0303 	adc.w	r3, r5, r3
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	f04f 0200 	mov.w	r2, #0
 8001b68:	f04f 0300 	mov.w	r3, #0
 8001b6c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b70:	4629      	mov	r1, r5
 8001b72:	028b      	lsls	r3, r1, #10
 8001b74:	4620      	mov	r0, r4
 8001b76:	4629      	mov	r1, r5
 8001b78:	4604      	mov	r4, r0
 8001b7a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001b7e:	4601      	mov	r1, r0
 8001b80:	028a      	lsls	r2, r1, #10
 8001b82:	4610      	mov	r0, r2
 8001b84:	4619      	mov	r1, r3
 8001b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b88:	2200      	movs	r2, #0
 8001b8a:	61bb      	str	r3, [r7, #24]
 8001b8c:	61fa      	str	r2, [r7, #28]
 8001b8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b92:	f7fe faf5 	bl	8000180 <__aeabi_uldivmod>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8001b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ba0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001ba2:	e00d      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001ba4:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	0b5b      	lsrs	r3, r3, #13
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001bbe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3748      	adds	r7, #72	; 0x48
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	00f42400 	.word	0x00f42400
 8001bd4:	007a1200 	.word	0x007a1200
 8001bd8:	08004364 	.word	0x08004364

08001bdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001be0:	4b02      	ldr	r3, [pc, #8]	; (8001bec <HAL_RCC_GetHCLKFreq+0x10>)
 8001be2:	681b      	ldr	r3, [r3, #0]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr
 8001bec:	20000000 	.word	0x20000000

08001bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bf4:	f7ff fff2 	bl	8001bdc <HAL_RCC_GetHCLKFreq>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	0a1b      	lsrs	r3, r3, #8
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	4903      	ldr	r1, [pc, #12]	; (8001c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c06:	5ccb      	ldrb	r3, [r1, r3]
 8001c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40023800 	.word	0x40023800
 8001c14:	08004380 	.word	0x08004380

08001c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c1c:	f7ff ffde 	bl	8001bdc <HAL_RCC_GetHCLKFreq>
 8001c20:	4602      	mov	r2, r0
 8001c22:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	0adb      	lsrs	r3, r3, #11
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	4903      	ldr	r1, [pc, #12]	; (8001c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c2e:	5ccb      	ldrb	r3, [r1, r3]
 8001c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	08004380 	.word	0x08004380

08001c40 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	220f      	movs	r2, #15
 8001c4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <HAL_RCC_GetClockConfig+0x58>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 0203 	and.w	r2, r3, #3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c5c:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <HAL_RCC_GetClockConfig+0x58>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c68:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <HAL_RCC_GetClockConfig+0x58>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c74:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <HAL_RCC_GetClockConfig+0x58>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	08db      	lsrs	r3, r3, #3
 8001c7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <HAL_RCC_GetClockConfig+0x5c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0201 	and.w	r2, r3, #1
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	601a      	str	r2, [r3, #0]
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40023c00 	.word	0x40023c00

08001ca0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b087      	sub	sp, #28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ca8:	2300      	movs	r3, #0
 8001caa:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001cac:	4b29      	ldr	r3, [pc, #164]	; (8001d54 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d12c      	bne.n	8001d12 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001cb8:	4b26      	ldr	r3, [pc, #152]	; (8001d54 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d005      	beq.n	8001cd0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001cc4:	4b24      	ldr	r3, [pc, #144]	; (8001d58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	e016      	b.n	8001cfe <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cd0:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	4a1f      	ldr	r2, [pc, #124]	; (8001d54 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cda:	6253      	str	r3, [r2, #36]	; 0x24
 8001cdc:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001ce8:	4b1b      	ldr	r3, [pc, #108]	; (8001d58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001cf0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cf2:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf6:	4a17      	ldr	r2, [pc, #92]	; (8001d54 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001cf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001d04:	d105      	bne.n	8001d12 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001d0c:	d101      	bne.n	8001d12 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001d0e:	2301      	movs	r3, #1
 8001d10:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d105      	bne.n	8001d24 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001d18:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a0f      	ldr	r2, [pc, #60]	; (8001d5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d1e:	f043 0304 	orr.w	r3, r3, #4
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f023 0201 	bic.w	r2, r3, #1
 8001d2c:	490b      	ldr	r1, [pc, #44]	; (8001d5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d34:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d001      	beq.n	8001d46 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	371c      	adds	r7, #28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40007000 	.word	0x40007000
 8001d5c:	40023c00 	.word	0x40023c00

08001d60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e031      	b.n	8001dd6 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d106      	bne.n	8001d8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f829 	bl	8001dde <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2202      	movs	r2, #2
 8001d90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3304      	adds	r3, #4
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4610      	mov	r0, r2
 8001da0:	f000 f978 	bl	8002094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d001      	beq.n	8001e08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e03a      	b.n	8001e7e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0201 	orr.w	r2, r2, #1
 8001e1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e28:	d00e      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x58>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a16      	ldr	r2, [pc, #88]	; (8001e88 <HAL_TIM_Base_Start_IT+0x98>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d009      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x58>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a14      	ldr	r2, [pc, #80]	; (8001e8c <HAL_TIM_Base_Start_IT+0x9c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d004      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x58>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a13      	ldr	r2, [pc, #76]	; (8001e90 <HAL_TIM_Base_Start_IT+0xa0>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d111      	bne.n	8001e6c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2b06      	cmp	r3, #6
 8001e58:	d010      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f042 0201 	orr.w	r2, r2, #1
 8001e68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e6a:	e007      	b.n	8001e7c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0201 	orr.w	r2, r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr
 8001e88:	40000400 	.word	0x40000400
 8001e8c:	40000800 	.word	0x40000800
 8001e90:	40010800 	.word	0x40010800

08001e94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d122      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d11b      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f06f 0202 	mvn.w	r2, #2
 8001ec0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f8c1 	bl	800205e <HAL_TIM_IC_CaptureCallback>
 8001edc:	e005      	b.n	8001eea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f8b4 	bl	800204c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f8c3 	bl	8002070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d122      	bne.n	8001f44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	d11b      	bne.n	8001f44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f06f 0204 	mvn.w	r2, #4
 8001f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2202      	movs	r2, #2
 8001f1a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f897 	bl	800205e <HAL_TIM_IC_CaptureCallback>
 8001f30:	e005      	b.n	8001f3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f88a 	bl	800204c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f899 	bl	8002070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d122      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	d11b      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f06f 0208 	mvn.w	r2, #8
 8001f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2204      	movs	r2, #4
 8001f6e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f86d 	bl	800205e <HAL_TIM_IC_CaptureCallback>
 8001f84:	e005      	b.n	8001f92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f860 	bl	800204c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f86f 	bl	8002070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	f003 0310 	and.w	r3, r3, #16
 8001fa2:	2b10      	cmp	r3, #16
 8001fa4:	d122      	bne.n	8001fec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f003 0310 	and.w	r3, r3, #16
 8001fb0:	2b10      	cmp	r3, #16
 8001fb2:	d11b      	bne.n	8001fec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f06f 0210 	mvn.w	r2, #16
 8001fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2208      	movs	r2, #8
 8001fc2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f843 	bl	800205e <HAL_TIM_IC_CaptureCallback>
 8001fd8:	e005      	b.n	8001fe6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f836 	bl	800204c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f845 	bl	8002070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d10e      	bne.n	8002018 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b01      	cmp	r3, #1
 8002006:	d107      	bne.n	8002018 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f06f 0201 	mvn.w	r2, #1
 8002010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7fe fbca 	bl	80007ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002022:	2b40      	cmp	r3, #64	; 0x40
 8002024:	d10e      	bne.n	8002044 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002030:	2b40      	cmp	r3, #64	; 0x40
 8002032:	d107      	bne.n	8002044 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800203c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f81f 	bl	8002082 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002044:	bf00      	nop
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr

0800205e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	bc80      	pop	{r7}
 8002080:	4770      	bx	lr

08002082 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr

08002094 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020aa:	d00f      	beq.n	80020cc <TIM_Base_SetConfig+0x38>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a2b      	ldr	r2, [pc, #172]	; (800215c <TIM_Base_SetConfig+0xc8>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d00b      	beq.n	80020cc <TIM_Base_SetConfig+0x38>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a2a      	ldr	r2, [pc, #168]	; (8002160 <TIM_Base_SetConfig+0xcc>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d007      	beq.n	80020cc <TIM_Base_SetConfig+0x38>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a29      	ldr	r2, [pc, #164]	; (8002164 <TIM_Base_SetConfig+0xd0>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d003      	beq.n	80020cc <TIM_Base_SetConfig+0x38>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a28      	ldr	r2, [pc, #160]	; (8002168 <TIM_Base_SetConfig+0xd4>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d108      	bne.n	80020de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	4313      	orrs	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020e4:	d017      	beq.n	8002116 <TIM_Base_SetConfig+0x82>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a1c      	ldr	r2, [pc, #112]	; (800215c <TIM_Base_SetConfig+0xc8>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d013      	beq.n	8002116 <TIM_Base_SetConfig+0x82>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a1b      	ldr	r2, [pc, #108]	; (8002160 <TIM_Base_SetConfig+0xcc>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d00f      	beq.n	8002116 <TIM_Base_SetConfig+0x82>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a1a      	ldr	r2, [pc, #104]	; (8002164 <TIM_Base_SetConfig+0xd0>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d00b      	beq.n	8002116 <TIM_Base_SetConfig+0x82>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a19      	ldr	r2, [pc, #100]	; (8002168 <TIM_Base_SetConfig+0xd4>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d007      	beq.n	8002116 <TIM_Base_SetConfig+0x82>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a18      	ldr	r2, [pc, #96]	; (800216c <TIM_Base_SetConfig+0xd8>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d003      	beq.n	8002116 <TIM_Base_SetConfig+0x82>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a17      	ldr	r2, [pc, #92]	; (8002170 <TIM_Base_SetConfig+0xdc>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d108      	bne.n	8002128 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800211c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	4313      	orrs	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	615a      	str	r2, [r3, #20]
}
 8002152:	bf00      	nop
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr
 800215c:	40000400 	.word	0x40000400
 8002160:	40000800 	.word	0x40000800
 8002164:	40000c00 	.word	0x40000c00
 8002168:	40010800 	.word	0x40010800
 800216c:	40010c00 	.word	0x40010c00
 8002170:	40011000 	.word	0x40011000

08002174 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e042      	b.n	800220c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d106      	bne.n	80021a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7fe fb4e 	bl	800083c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2224      	movs	r2, #36	; 0x24
 80021a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68da      	ldr	r2, [r3, #12]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f82b 	bl	8002214 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	691a      	ldr	r2, [r3, #16]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	695a      	ldr	r2, [r3, #20]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2220      	movs	r2, #32
 80021f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2220      	movs	r2, #32
 8002200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	430a      	orrs	r2, r1
 8002230:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689a      	ldr	r2, [r3, #8]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	431a      	orrs	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	4313      	orrs	r3, r2
 8002248:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002254:	f023 030c 	bic.w	r3, r3, #12
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6812      	ldr	r2, [r2, #0]
 800225c:	68b9      	ldr	r1, [r7, #8]
 800225e:	430b      	orrs	r3, r1
 8002260:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	699a      	ldr	r2, [r3, #24]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	430a      	orrs	r2, r1
 8002276:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a55      	ldr	r2, [pc, #340]	; (80023d4 <UART_SetConfig+0x1c0>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d103      	bne.n	800228a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002282:	f7ff fcc9 	bl	8001c18 <HAL_RCC_GetPCLK2Freq>
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	e002      	b.n	8002290 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800228a:	f7ff fcb1 	bl	8001bf0 <HAL_RCC_GetPCLK1Freq>
 800228e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002298:	d14c      	bne.n	8002334 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	009a      	lsls	r2, r3, #2
 80022a4:	441a      	add	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b0:	4a49      	ldr	r2, [pc, #292]	; (80023d8 <UART_SetConfig+0x1c4>)
 80022b2:	fba2 2303 	umull	r2, r3, r2, r3
 80022b6:	095b      	lsrs	r3, r3, #5
 80022b8:	0119      	lsls	r1, r3, #4
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	4613      	mov	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	009a      	lsls	r2, r3, #2
 80022c4:	441a      	add	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80022d0:	4b41      	ldr	r3, [pc, #260]	; (80023d8 <UART_SetConfig+0x1c4>)
 80022d2:	fba3 0302 	umull	r0, r3, r3, r2
 80022d6:	095b      	lsrs	r3, r3, #5
 80022d8:	2064      	movs	r0, #100	; 0x64
 80022da:	fb00 f303 	mul.w	r3, r0, r3
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	3332      	adds	r3, #50	; 0x32
 80022e4:	4a3c      	ldr	r2, [pc, #240]	; (80023d8 <UART_SetConfig+0x1c4>)
 80022e6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ea:	095b      	lsrs	r3, r3, #5
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80022f2:	4419      	add	r1, r3
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	4613      	mov	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	009a      	lsls	r2, r3, #2
 80022fe:	441a      	add	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	fbb2 f2f3 	udiv	r2, r2, r3
 800230a:	4b33      	ldr	r3, [pc, #204]	; (80023d8 <UART_SetConfig+0x1c4>)
 800230c:	fba3 0302 	umull	r0, r3, r3, r2
 8002310:	095b      	lsrs	r3, r3, #5
 8002312:	2064      	movs	r0, #100	; 0x64
 8002314:	fb00 f303 	mul.w	r3, r0, r3
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	3332      	adds	r3, #50	; 0x32
 800231e:	4a2e      	ldr	r2, [pc, #184]	; (80023d8 <UART_SetConfig+0x1c4>)
 8002320:	fba2 2303 	umull	r2, r3, r2, r3
 8002324:	095b      	lsrs	r3, r3, #5
 8002326:	f003 0207 	and.w	r2, r3, #7
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	440a      	add	r2, r1
 8002330:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002332:	e04a      	b.n	80023ca <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	4613      	mov	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	009a      	lsls	r2, r3, #2
 800233e:	441a      	add	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	fbb2 f3f3 	udiv	r3, r2, r3
 800234a:	4a23      	ldr	r2, [pc, #140]	; (80023d8 <UART_SetConfig+0x1c4>)
 800234c:	fba2 2303 	umull	r2, r3, r2, r3
 8002350:	095b      	lsrs	r3, r3, #5
 8002352:	0119      	lsls	r1, r3, #4
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	4613      	mov	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	009a      	lsls	r2, r3, #2
 800235e:	441a      	add	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	fbb2 f2f3 	udiv	r2, r2, r3
 800236a:	4b1b      	ldr	r3, [pc, #108]	; (80023d8 <UART_SetConfig+0x1c4>)
 800236c:	fba3 0302 	umull	r0, r3, r3, r2
 8002370:	095b      	lsrs	r3, r3, #5
 8002372:	2064      	movs	r0, #100	; 0x64
 8002374:	fb00 f303 	mul.w	r3, r0, r3
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	3332      	adds	r3, #50	; 0x32
 800237e:	4a16      	ldr	r2, [pc, #88]	; (80023d8 <UART_SetConfig+0x1c4>)
 8002380:	fba2 2303 	umull	r2, r3, r2, r3
 8002384:	095b      	lsrs	r3, r3, #5
 8002386:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800238a:	4419      	add	r1, r3
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	4613      	mov	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	009a      	lsls	r2, r3, #2
 8002396:	441a      	add	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	fbb2 f2f3 	udiv	r2, r2, r3
 80023a2:	4b0d      	ldr	r3, [pc, #52]	; (80023d8 <UART_SetConfig+0x1c4>)
 80023a4:	fba3 0302 	umull	r0, r3, r3, r2
 80023a8:	095b      	lsrs	r3, r3, #5
 80023aa:	2064      	movs	r0, #100	; 0x64
 80023ac:	fb00 f303 	mul.w	r3, r0, r3
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	3332      	adds	r3, #50	; 0x32
 80023b6:	4a08      	ldr	r2, [pc, #32]	; (80023d8 <UART_SetConfig+0x1c4>)
 80023b8:	fba2 2303 	umull	r2, r3, r2, r3
 80023bc:	095b      	lsrs	r3, r3, #5
 80023be:	f003 020f 	and.w	r2, r3, #15
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	440a      	add	r2, r1
 80023c8:	609a      	str	r2, [r3, #8]
}
 80023ca:	bf00      	nop
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40013800 	.word	0x40013800
 80023d8:	51eb851f 	.word	0x51eb851f

080023dc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80023ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023ee:	2b84      	cmp	r3, #132	; 0x84
 80023f0:	d005      	beq.n	80023fe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80023f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	4413      	add	r3, r2
 80023fa:	3303      	adds	r3, #3
 80023fc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80023fe:	68fb      	ldr	r3, [r7, #12]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr

0800240a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800240e:	f000 fae7 	bl	80029e0 <vTaskStartScheduler>
  
  return osOK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	bd80      	pop	{r7, pc}

08002418 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800241a:	b089      	sub	sp, #36	; 0x24
 800241c:	af04      	add	r7, sp, #16
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d020      	beq.n	800246c <osThreadCreate+0x54>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d01c      	beq.n	800246c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685c      	ldr	r4, [r3, #4]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681d      	ldr	r5, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691e      	ldr	r6, [r3, #16]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ffc9 	bl	80023dc <makeFreeRtosPriority>
 800244a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002454:	9202      	str	r2, [sp, #8]
 8002456:	9301      	str	r3, [sp, #4]
 8002458:	9100      	str	r1, [sp, #0]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	4632      	mov	r2, r6
 800245e:	4629      	mov	r1, r5
 8002460:	4620      	mov	r0, r4
 8002462:	f000 f8e8 	bl	8002636 <xTaskCreateStatic>
 8002466:	4603      	mov	r3, r0
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	e01c      	b.n	80024a6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685c      	ldr	r4, [r3, #4]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002478:	b29e      	uxth	r6, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ffab 	bl	80023dc <makeFreeRtosPriority>
 8002486:	4602      	mov	r2, r0
 8002488:	f107 030c 	add.w	r3, r7, #12
 800248c:	9301      	str	r3, [sp, #4]
 800248e:	9200      	str	r2, [sp, #0]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	4632      	mov	r2, r6
 8002494:	4629      	mov	r1, r5
 8002496:	4620      	mov	r0, r4
 8002498:	f000 f929 	bl	80026ee <xTaskCreate>
 800249c:	4603      	mov	r3, r0
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d001      	beq.n	80024a6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	e000      	b.n	80024a8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80024a6:	68fb      	ldr	r3, [r7, #12]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024b0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <osDelay+0x16>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	e000      	b.n	80024c8 <osDelay+0x18>
 80024c6:	2301      	movs	r3, #1
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 fa55 	bl	8002978 <vTaskDelay>
  
  return osOK;
 80024ce:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f103 0208 	add.w	r2, r3, #8
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f04f 32ff 	mov.w	r2, #4294967295
 80024f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f103 0208 	add.w	r2, r3, #8
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f103 0208 	add.w	r2, r3, #8
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr

08002516 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr

0800252e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800252e:	b480      	push	{r7}
 8002530:	b085      	sub	sp, #20
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
 8002536:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	1c5a      	adds	r2, r3, #1
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	601a      	str	r2, [r3, #0]
}
 800256a:	bf00      	nop
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr

08002574 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258a:	d103      	bne.n	8002594 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	e00c      	b.n	80025ae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3308      	adds	r3, #8
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	e002      	b.n	80025a2 <vListInsert+0x2e>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68ba      	ldr	r2, [r7, #8]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d2f6      	bcs.n	800259c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	1c5a      	adds	r2, r3, #1
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	601a      	str	r2, [r3, #0]
}
 80025da:	bf00      	nop
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr

080025e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6892      	ldr	r2, [r2, #8]
 80025fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6852      	ldr	r2, [r2, #4]
 8002604:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	429a      	cmp	r2, r3
 800260e:	d103      	bne.n	8002618 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	1e5a      	subs	r2, r3, #1
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr

08002636 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002636:	b580      	push	{r7, lr}
 8002638:	b08e      	sub	sp, #56	; 0x38
 800263a:	af04      	add	r7, sp, #16
 800263c:	60f8      	str	r0, [r7, #12]
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	607a      	str	r2, [r7, #4]
 8002642:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10a      	bne.n	8002660 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800264a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264e:	f383 8811 	msr	BASEPRI, r3
 8002652:	f3bf 8f6f 	isb	sy
 8002656:	f3bf 8f4f 	dsb	sy
 800265a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800265c:	bf00      	nop
 800265e:	e7fe      	b.n	800265e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10a      	bne.n	800267c <xTaskCreateStatic+0x46>
	__asm volatile
 8002666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800266a:	f383 8811 	msr	BASEPRI, r3
 800266e:	f3bf 8f6f 	isb	sy
 8002672:	f3bf 8f4f 	dsb	sy
 8002676:	61fb      	str	r3, [r7, #28]
}
 8002678:	bf00      	nop
 800267a:	e7fe      	b.n	800267a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800267c:	23b4      	movs	r3, #180	; 0xb4
 800267e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	2bb4      	cmp	r3, #180	; 0xb4
 8002684:	d00a      	beq.n	800269c <xTaskCreateStatic+0x66>
	__asm volatile
 8002686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268a:	f383 8811 	msr	BASEPRI, r3
 800268e:	f3bf 8f6f 	isb	sy
 8002692:	f3bf 8f4f 	dsb	sy
 8002696:	61bb      	str	r3, [r7, #24]
}
 8002698:	bf00      	nop
 800269a:	e7fe      	b.n	800269a <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800269c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d01e      	beq.n	80026e0 <xTaskCreateStatic+0xaa>
 80026a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d01b      	beq.n	80026e0 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80026a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	2202      	movs	r2, #2
 80026b6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80026ba:	2300      	movs	r3, #0
 80026bc:	9303      	str	r3, [sp, #12]
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	9302      	str	r3, [sp, #8]
 80026c2:	f107 0314 	add.w	r3, r7, #20
 80026c6:	9301      	str	r3, [sp, #4]
 80026c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	68b9      	ldr	r1, [r7, #8]
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f000 f850 	bl	8002778 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80026d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026da:	f000 f8e3 	bl	80028a4 <prvAddNewTaskToReadyList>
 80026de:	e001      	b.n	80026e4 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80026e4:	697b      	ldr	r3, [r7, #20]
	}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3728      	adds	r7, #40	; 0x28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b08c      	sub	sp, #48	; 0x30
 80026f2:	af04      	add	r7, sp, #16
 80026f4:	60f8      	str	r0, [r7, #12]
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	603b      	str	r3, [r7, #0]
 80026fa:	4613      	mov	r3, r2
 80026fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026fe:	88fb      	ldrh	r3, [r7, #6]
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4618      	mov	r0, r3
 8002704:	f000 fe94 	bl	8003430 <pvPortMalloc>
 8002708:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00e      	beq.n	800272e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002710:	20b4      	movs	r0, #180	; 0xb4
 8002712:	f000 fe8d 	bl	8003430 <pvPortMalloc>
 8002716:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	631a      	str	r2, [r3, #48]	; 0x30
 8002724:	e005      	b.n	8002732 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002726:	6978      	ldr	r0, [r7, #20]
 8002728:	f000 ff46 	bl	80035b8 <vPortFree>
 800272c:	e001      	b.n	8002732 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800272e:	2300      	movs	r3, #0
 8002730:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d017      	beq.n	8002768 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002740:	88fa      	ldrh	r2, [r7, #6]
 8002742:	2300      	movs	r3, #0
 8002744:	9303      	str	r3, [sp, #12]
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	9302      	str	r3, [sp, #8]
 800274a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274c:	9301      	str	r3, [sp, #4]
 800274e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	68b9      	ldr	r1, [r7, #8]
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 f80e 	bl	8002778 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800275c:	69f8      	ldr	r0, [r7, #28]
 800275e:	f000 f8a1 	bl	80028a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002762:	2301      	movs	r3, #1
 8002764:	61bb      	str	r3, [r7, #24]
 8002766:	e002      	b.n	800276e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002768:	f04f 33ff 	mov.w	r3, #4294967295
 800276c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800276e:	69bb      	ldr	r3, [r7, #24]
	}
 8002770:	4618      	mov	r0, r3
 8002772:	3720      	adds	r7, #32
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
 8002784:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002790:	3b01      	subs	r3, #1
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	f023 0307 	bic.w	r3, r3, #7
 800279e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00a      	beq.n	80027c0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80027aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ae:	f383 8811 	msr	BASEPRI, r3
 80027b2:	f3bf 8f6f 	isb	sy
 80027b6:	f3bf 8f4f 	dsb	sy
 80027ba:	617b      	str	r3, [r7, #20]
}
 80027bc:	bf00      	nop
 80027be:	e7fe      	b.n	80027be <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027c0:	2300      	movs	r3, #0
 80027c2:	61fb      	str	r3, [r7, #28]
 80027c4:	e012      	b.n	80027ec <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	4413      	add	r3, r2
 80027cc:	7819      	ldrb	r1, [r3, #0]
 80027ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	4413      	add	r3, r2
 80027d4:	3334      	adds	r3, #52	; 0x34
 80027d6:	460a      	mov	r2, r1
 80027d8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	4413      	add	r3, r2
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d006      	beq.n	80027f4 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	3301      	adds	r3, #1
 80027ea:	61fb      	str	r3, [r7, #28]
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	2b0f      	cmp	r3, #15
 80027f0:	d9e9      	bls.n	80027c6 <prvInitialiseNewTask+0x4e>
 80027f2:	e000      	b.n	80027f6 <prvInitialiseNewTask+0x7e>
		{
			break;
 80027f4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80027f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80027fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002800:	2b06      	cmp	r3, #6
 8002802:	d901      	bls.n	8002808 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002804:	2306      	movs	r3, #6
 8002806:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800280c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800280e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002810:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002812:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002816:	2200      	movs	r2, #0
 8002818:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800281a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281c:	3304      	adds	r3, #4
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff fe79 	bl	8002516 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002826:	3318      	adds	r3, #24
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff fe74 	bl	8002516 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800282e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002832:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002836:	f1c3 0207 	rsb	r2, r3, #7
 800283a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800283e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002842:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002846:	2200      	movs	r2, #0
 8002848:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800284c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284e:	2200      	movs	r2, #0
 8002850:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002856:	334c      	adds	r3, #76	; 0x4c
 8002858:	2260      	movs	r2, #96	; 0x60
 800285a:	2100      	movs	r1, #0
 800285c:	4618      	mov	r0, r3
 800285e:	f001 f8e2 	bl	8003a26 <memset>
 8002862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002864:	4a0c      	ldr	r2, [pc, #48]	; (8002898 <prvInitialiseNewTask+0x120>)
 8002866:	651a      	str	r2, [r3, #80]	; 0x50
 8002868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800286a:	4a0c      	ldr	r2, [pc, #48]	; (800289c <prvInitialiseNewTask+0x124>)
 800286c:	655a      	str	r2, [r3, #84]	; 0x54
 800286e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002870:	4a0b      	ldr	r2, [pc, #44]	; (80028a0 <prvInitialiseNewTask+0x128>)
 8002872:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	68f9      	ldr	r1, [r7, #12]
 8002878:	69b8      	ldr	r0, [r7, #24]
 800287a:	f000 fc29 	bl	80030d0 <pxPortInitialiseStack>
 800287e:	4602      	mov	r2, r0
 8002880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002882:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002886:	2b00      	cmp	r3, #0
 8002888:	d002      	beq.n	8002890 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800288a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800288e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002890:	bf00      	nop
 8002892:	3720      	adds	r7, #32
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	080043a8 	.word	0x080043a8
 800289c:	080043c8 	.word	0x080043c8
 80028a0:	08004388 	.word	0x08004388

080028a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80028ac:	f000 fcfe 	bl	80032ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80028b0:	4b2a      	ldr	r3, [pc, #168]	; (800295c <prvAddNewTaskToReadyList+0xb8>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	3301      	adds	r3, #1
 80028b6:	4a29      	ldr	r2, [pc, #164]	; (800295c <prvAddNewTaskToReadyList+0xb8>)
 80028b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80028ba:	4b29      	ldr	r3, [pc, #164]	; (8002960 <prvAddNewTaskToReadyList+0xbc>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d109      	bne.n	80028d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80028c2:	4a27      	ldr	r2, [pc, #156]	; (8002960 <prvAddNewTaskToReadyList+0xbc>)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80028c8:	4b24      	ldr	r3, [pc, #144]	; (800295c <prvAddNewTaskToReadyList+0xb8>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d110      	bne.n	80028f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80028d0:	f000 fad2 	bl	8002e78 <prvInitialiseTaskLists>
 80028d4:	e00d      	b.n	80028f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80028d6:	4b23      	ldr	r3, [pc, #140]	; (8002964 <prvAddNewTaskToReadyList+0xc0>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d109      	bne.n	80028f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80028de:	4b20      	ldr	r3, [pc, #128]	; (8002960 <prvAddNewTaskToReadyList+0xbc>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d802      	bhi.n	80028f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80028ec:	4a1c      	ldr	r2, [pc, #112]	; (8002960 <prvAddNewTaskToReadyList+0xbc>)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80028f2:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <prvAddNewTaskToReadyList+0xc4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	3301      	adds	r3, #1
 80028f8:	4a1b      	ldr	r2, [pc, #108]	; (8002968 <prvAddNewTaskToReadyList+0xc4>)
 80028fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002900:	2201      	movs	r2, #1
 8002902:	409a      	lsls	r2, r3
 8002904:	4b19      	ldr	r3, [pc, #100]	; (800296c <prvAddNewTaskToReadyList+0xc8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4313      	orrs	r3, r2
 800290a:	4a18      	ldr	r2, [pc, #96]	; (800296c <prvAddNewTaskToReadyList+0xc8>)
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4a15      	ldr	r2, [pc, #84]	; (8002970 <prvAddNewTaskToReadyList+0xcc>)
 800291c:	441a      	add	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3304      	adds	r3, #4
 8002922:	4619      	mov	r1, r3
 8002924:	4610      	mov	r0, r2
 8002926:	f7ff fe02 	bl	800252e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800292a:	f000 fcef 	bl	800330c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800292e:	4b0d      	ldr	r3, [pc, #52]	; (8002964 <prvAddNewTaskToReadyList+0xc0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00e      	beq.n	8002954 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002936:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <prvAddNewTaskToReadyList+0xbc>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002940:	429a      	cmp	r2, r3
 8002942:	d207      	bcs.n	8002954 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <prvAddNewTaskToReadyList+0xd0>)
 8002946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	f3bf 8f4f 	dsb	sy
 8002950:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002954:	bf00      	nop
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	200004d8 	.word	0x200004d8
 8002960:	200003d8 	.word	0x200003d8
 8002964:	200004e4 	.word	0x200004e4
 8002968:	200004f4 	.word	0x200004f4
 800296c:	200004e0 	.word	0x200004e0
 8002970:	200003dc 	.word	0x200003dc
 8002974:	e000ed04 	.word	0xe000ed04

08002978 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002980:	2300      	movs	r3, #0
 8002982:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d017      	beq.n	80029ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800298a:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <vTaskDelay+0x60>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00a      	beq.n	80029a8 <vTaskDelay+0x30>
	__asm volatile
 8002992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002996:	f383 8811 	msr	BASEPRI, r3
 800299a:	f3bf 8f6f 	isb	sy
 800299e:	f3bf 8f4f 	dsb	sy
 80029a2:	60bb      	str	r3, [r7, #8]
}
 80029a4:	bf00      	nop
 80029a6:	e7fe      	b.n	80029a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80029a8:	f000 f884 	bl	8002ab4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80029ac:	2100      	movs	r1, #0
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 fb28 	bl	8003004 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80029b4:	f000 f88c 	bl	8002ad0 <xTaskResumeAll>
 80029b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d107      	bne.n	80029d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80029c0:	4b06      	ldr	r3, [pc, #24]	; (80029dc <vTaskDelay+0x64>)
 80029c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	f3bf 8f4f 	dsb	sy
 80029cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80029d0:	bf00      	nop
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	20000500 	.word	0x20000500
 80029dc:	e000ed04 	.word	0xe000ed04

080029e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08a      	sub	sp, #40	; 0x28
 80029e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80029ee:	463a      	mov	r2, r7
 80029f0:	1d39      	adds	r1, r7, #4
 80029f2:	f107 0308 	add.w	r3, r7, #8
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7fd fd46 	bl	8000488 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80029fc:	6839      	ldr	r1, [r7, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	9202      	str	r2, [sp, #8]
 8002a04:	9301      	str	r3, [sp, #4]
 8002a06:	2300      	movs	r3, #0
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	460a      	mov	r2, r1
 8002a0e:	4921      	ldr	r1, [pc, #132]	; (8002a94 <vTaskStartScheduler+0xb4>)
 8002a10:	4821      	ldr	r0, [pc, #132]	; (8002a98 <vTaskStartScheduler+0xb8>)
 8002a12:	f7ff fe10 	bl	8002636 <xTaskCreateStatic>
 8002a16:	4603      	mov	r3, r0
 8002a18:	4a20      	ldr	r2, [pc, #128]	; (8002a9c <vTaskStartScheduler+0xbc>)
 8002a1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002a1c:	4b1f      	ldr	r3, [pc, #124]	; (8002a9c <vTaskStartScheduler+0xbc>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d002      	beq.n	8002a2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002a24:	2301      	movs	r3, #1
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	e001      	b.n	8002a2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d11b      	bne.n	8002a6c <vTaskStartScheduler+0x8c>
	__asm volatile
 8002a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a38:	f383 8811 	msr	BASEPRI, r3
 8002a3c:	f3bf 8f6f 	isb	sy
 8002a40:	f3bf 8f4f 	dsb	sy
 8002a44:	613b      	str	r3, [r7, #16]
}
 8002a46:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002a48:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <vTaskStartScheduler+0xc0>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	334c      	adds	r3, #76	; 0x4c
 8002a4e:	4a15      	ldr	r2, [pc, #84]	; (8002aa4 <vTaskStartScheduler+0xc4>)
 8002a50:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002a52:	4b15      	ldr	r3, [pc, #84]	; (8002aa8 <vTaskStartScheduler+0xc8>)
 8002a54:	f04f 32ff 	mov.w	r2, #4294967295
 8002a58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002a5a:	4b14      	ldr	r3, [pc, #80]	; (8002aac <vTaskStartScheduler+0xcc>)
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002a60:	4b13      	ldr	r3, [pc, #76]	; (8002ab0 <vTaskStartScheduler+0xd0>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002a66:	f000 fbaf 	bl	80031c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002a6a:	e00e      	b.n	8002a8a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a72:	d10a      	bne.n	8002a8a <vTaskStartScheduler+0xaa>
	__asm volatile
 8002a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a78:	f383 8811 	msr	BASEPRI, r3
 8002a7c:	f3bf 8f6f 	isb	sy
 8002a80:	f3bf 8f4f 	dsb	sy
 8002a84:	60fb      	str	r3, [r7, #12]
}
 8002a86:	bf00      	nop
 8002a88:	e7fe      	b.n	8002a88 <vTaskStartScheduler+0xa8>
}
 8002a8a:	bf00      	nop
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	0800435c 	.word	0x0800435c
 8002a98:	08002e49 	.word	0x08002e49
 8002a9c:	200004fc 	.word	0x200004fc
 8002aa0:	200003d8 	.word	0x200003d8
 8002aa4:	20000010 	.word	0x20000010
 8002aa8:	200004f8 	.word	0x200004f8
 8002aac:	200004e4 	.word	0x200004e4
 8002ab0:	200004dc 	.word	0x200004dc

08002ab4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002ab8:	4b04      	ldr	r3, [pc, #16]	; (8002acc <vTaskSuspendAll+0x18>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	3301      	adds	r3, #1
 8002abe:	4a03      	ldr	r2, [pc, #12]	; (8002acc <vTaskSuspendAll+0x18>)
 8002ac0:	6013      	str	r3, [r2, #0]
}
 8002ac2:	bf00      	nop
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	20000500 	.word	0x20000500

08002ad0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002ada:	2300      	movs	r3, #0
 8002adc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002ade:	4b41      	ldr	r3, [pc, #260]	; (8002be4 <xTaskResumeAll+0x114>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10a      	bne.n	8002afc <xTaskResumeAll+0x2c>
	__asm volatile
 8002ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aea:	f383 8811 	msr	BASEPRI, r3
 8002aee:	f3bf 8f6f 	isb	sy
 8002af2:	f3bf 8f4f 	dsb	sy
 8002af6:	603b      	str	r3, [r7, #0]
}
 8002af8:	bf00      	nop
 8002afa:	e7fe      	b.n	8002afa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002afc:	f000 fbd6 	bl	80032ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002b00:	4b38      	ldr	r3, [pc, #224]	; (8002be4 <xTaskResumeAll+0x114>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	3b01      	subs	r3, #1
 8002b06:	4a37      	ldr	r2, [pc, #220]	; (8002be4 <xTaskResumeAll+0x114>)
 8002b08:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b0a:	4b36      	ldr	r3, [pc, #216]	; (8002be4 <xTaskResumeAll+0x114>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d161      	bne.n	8002bd6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b12:	4b35      	ldr	r3, [pc, #212]	; (8002be8 <xTaskResumeAll+0x118>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d05d      	beq.n	8002bd6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b1a:	e02e      	b.n	8002b7a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002b1c:	4b33      	ldr	r3, [pc, #204]	; (8002bec <xTaskResumeAll+0x11c>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	3318      	adds	r3, #24
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff fd5b 	bl	80025e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	3304      	adds	r3, #4
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff fd56 	bl	80025e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	4b2b      	ldr	r3, [pc, #172]	; (8002bf0 <xTaskResumeAll+0x120>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	4a2a      	ldr	r2, [pc, #168]	; (8002bf0 <xTaskResumeAll+0x120>)
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b4e:	4613      	mov	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4a27      	ldr	r2, [pc, #156]	; (8002bf4 <xTaskResumeAll+0x124>)
 8002b58:	441a      	add	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4610      	mov	r0, r2
 8002b62:	f7ff fce4 	bl	800252e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b6a:	4b23      	ldr	r3, [pc, #140]	; (8002bf8 <xTaskResumeAll+0x128>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d302      	bcc.n	8002b7a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002b74:	4b21      	ldr	r3, [pc, #132]	; (8002bfc <xTaskResumeAll+0x12c>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b7a:	4b1c      	ldr	r3, [pc, #112]	; (8002bec <xTaskResumeAll+0x11c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1cc      	bne.n	8002b1c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002b88:	f000 fa18 	bl	8002fbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002b8c:	4b1c      	ldr	r3, [pc, #112]	; (8002c00 <xTaskResumeAll+0x130>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d010      	beq.n	8002bba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002b98:	f000 f836 	bl	8002c08 <xTaskIncrementTick>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d002      	beq.n	8002ba8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002ba2:	4b16      	ldr	r3, [pc, #88]	; (8002bfc <xTaskResumeAll+0x12c>)
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1f1      	bne.n	8002b98 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002bb4:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <xTaskResumeAll+0x130>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002bba:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <xTaskResumeAll+0x12c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d009      	beq.n	8002bd6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002bc6:	4b0f      	ldr	r3, [pc, #60]	; (8002c04 <xTaskResumeAll+0x134>)
 8002bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	f3bf 8f4f 	dsb	sy
 8002bd2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002bd6:	f000 fb99 	bl	800330c <vPortExitCritical>

	return xAlreadyYielded;
 8002bda:	68bb      	ldr	r3, [r7, #8]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	20000500 	.word	0x20000500
 8002be8:	200004d8 	.word	0x200004d8
 8002bec:	20000498 	.word	0x20000498
 8002bf0:	200004e0 	.word	0x200004e0
 8002bf4:	200003dc 	.word	0x200003dc
 8002bf8:	200003d8 	.word	0x200003d8
 8002bfc:	200004ec 	.word	0x200004ec
 8002c00:	200004e8 	.word	0x200004e8
 8002c04:	e000ed04 	.word	0xe000ed04

08002c08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c12:	4b51      	ldr	r3, [pc, #324]	; (8002d58 <xTaskIncrementTick+0x150>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f040 808d 	bne.w	8002d36 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002c1c:	4b4f      	ldr	r3, [pc, #316]	; (8002d5c <xTaskIncrementTick+0x154>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	3301      	adds	r3, #1
 8002c22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002c24:	4a4d      	ldr	r2, [pc, #308]	; (8002d5c <xTaskIncrementTick+0x154>)
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d120      	bne.n	8002c72 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002c30:	4b4b      	ldr	r3, [pc, #300]	; (8002d60 <xTaskIncrementTick+0x158>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00a      	beq.n	8002c50 <xTaskIncrementTick+0x48>
	__asm volatile
 8002c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3e:	f383 8811 	msr	BASEPRI, r3
 8002c42:	f3bf 8f6f 	isb	sy
 8002c46:	f3bf 8f4f 	dsb	sy
 8002c4a:	603b      	str	r3, [r7, #0]
}
 8002c4c:	bf00      	nop
 8002c4e:	e7fe      	b.n	8002c4e <xTaskIncrementTick+0x46>
 8002c50:	4b43      	ldr	r3, [pc, #268]	; (8002d60 <xTaskIncrementTick+0x158>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	4b43      	ldr	r3, [pc, #268]	; (8002d64 <xTaskIncrementTick+0x15c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a41      	ldr	r2, [pc, #260]	; (8002d60 <xTaskIncrementTick+0x158>)
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	4a41      	ldr	r2, [pc, #260]	; (8002d64 <xTaskIncrementTick+0x15c>)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6013      	str	r3, [r2, #0]
 8002c64:	4b40      	ldr	r3, [pc, #256]	; (8002d68 <xTaskIncrementTick+0x160>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	4a3f      	ldr	r2, [pc, #252]	; (8002d68 <xTaskIncrementTick+0x160>)
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	f000 f9a5 	bl	8002fbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002c72:	4b3e      	ldr	r3, [pc, #248]	; (8002d6c <xTaskIncrementTick+0x164>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d34d      	bcc.n	8002d18 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c7c:	4b38      	ldr	r3, [pc, #224]	; (8002d60 <xTaskIncrementTick+0x158>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <xTaskIncrementTick+0x82>
 8002c86:	2301      	movs	r3, #1
 8002c88:	e000      	b.n	8002c8c <xTaskIncrementTick+0x84>
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d004      	beq.n	8002c9a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c90:	4b36      	ldr	r3, [pc, #216]	; (8002d6c <xTaskIncrementTick+0x164>)
 8002c92:	f04f 32ff 	mov.w	r2, #4294967295
 8002c96:	601a      	str	r2, [r3, #0]
					break;
 8002c98:	e03e      	b.n	8002d18 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002c9a:	4b31      	ldr	r3, [pc, #196]	; (8002d60 <xTaskIncrementTick+0x158>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d203      	bcs.n	8002cba <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002cb2:	4a2e      	ldr	r2, [pc, #184]	; (8002d6c <xTaskIncrementTick+0x164>)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6013      	str	r3, [r2, #0]
						break;
 8002cb8:	e02e      	b.n	8002d18 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff fc90 	bl	80025e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d004      	beq.n	8002cd6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	3318      	adds	r3, #24
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff fc87 	bl	80025e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cda:	2201      	movs	r2, #1
 8002cdc:	409a      	lsls	r2, r3
 8002cde:	4b24      	ldr	r3, [pc, #144]	; (8002d70 <xTaskIncrementTick+0x168>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	4a22      	ldr	r2, [pc, #136]	; (8002d70 <xTaskIncrementTick+0x168>)
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4a1f      	ldr	r2, [pc, #124]	; (8002d74 <xTaskIncrementTick+0x16c>)
 8002cf6:	441a      	add	r2, r3
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	3304      	adds	r3, #4
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4610      	mov	r0, r2
 8002d00:	f7ff fc15 	bl	800252e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d08:	4b1b      	ldr	r3, [pc, #108]	; (8002d78 <xTaskIncrementTick+0x170>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d3b4      	bcc.n	8002c7c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002d12:	2301      	movs	r3, #1
 8002d14:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d16:	e7b1      	b.n	8002c7c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002d18:	4b17      	ldr	r3, [pc, #92]	; (8002d78 <xTaskIncrementTick+0x170>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d1e:	4915      	ldr	r1, [pc, #84]	; (8002d74 <xTaskIncrementTick+0x16c>)
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d907      	bls.n	8002d40 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002d30:	2301      	movs	r3, #1
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	e004      	b.n	8002d40 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002d36:	4b11      	ldr	r3, [pc, #68]	; (8002d7c <xTaskIncrementTick+0x174>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	4a0f      	ldr	r2, [pc, #60]	; (8002d7c <xTaskIncrementTick+0x174>)
 8002d3e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002d40:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <xTaskIncrementTick+0x178>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002d4c:	697b      	ldr	r3, [r7, #20]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3718      	adds	r7, #24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20000500 	.word	0x20000500
 8002d5c:	200004dc 	.word	0x200004dc
 8002d60:	20000490 	.word	0x20000490
 8002d64:	20000494 	.word	0x20000494
 8002d68:	200004f0 	.word	0x200004f0
 8002d6c:	200004f8 	.word	0x200004f8
 8002d70:	200004e0 	.word	0x200004e0
 8002d74:	200003dc 	.word	0x200003dc
 8002d78:	200003d8 	.word	0x200003d8
 8002d7c:	200004e8 	.word	0x200004e8
 8002d80:	200004ec 	.word	0x200004ec

08002d84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002d84:	b480      	push	{r7}
 8002d86:	b087      	sub	sp, #28
 8002d88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002d8a:	4b29      	ldr	r3, [pc, #164]	; (8002e30 <vTaskSwitchContext+0xac>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002d92:	4b28      	ldr	r3, [pc, #160]	; (8002e34 <vTaskSwitchContext+0xb0>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002d98:	e044      	b.n	8002e24 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8002d9a:	4b26      	ldr	r3, [pc, #152]	; (8002e34 <vTaskSwitchContext+0xb0>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002da0:	4b25      	ldr	r3, [pc, #148]	; (8002e38 <vTaskSwitchContext+0xb4>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	fab3 f383 	clz	r3, r3
 8002dac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002dae:	7afb      	ldrb	r3, [r7, #11]
 8002db0:	f1c3 031f 	rsb	r3, r3, #31
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	4921      	ldr	r1, [pc, #132]	; (8002e3c <vTaskSwitchContext+0xb8>)
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10a      	bne.n	8002de0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8002dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dce:	f383 8811 	msr	BASEPRI, r3
 8002dd2:	f3bf 8f6f 	isb	sy
 8002dd6:	f3bf 8f4f 	dsb	sy
 8002dda:	607b      	str	r3, [r7, #4]
}
 8002ddc:	bf00      	nop
 8002dde:	e7fe      	b.n	8002dde <vTaskSwitchContext+0x5a>
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	4613      	mov	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4a14      	ldr	r2, [pc, #80]	; (8002e3c <vTaskSwitchContext+0xb8>)
 8002dec:	4413      	add	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	3308      	adds	r3, #8
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d104      	bne.n	8002e10 <vTaskSwitchContext+0x8c>
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	605a      	str	r2, [r3, #4]
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	4a0a      	ldr	r2, [pc, #40]	; (8002e40 <vTaskSwitchContext+0xbc>)
 8002e18:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002e1a:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <vTaskSwitchContext+0xbc>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	334c      	adds	r3, #76	; 0x4c
 8002e20:	4a08      	ldr	r2, [pc, #32]	; (8002e44 <vTaskSwitchContext+0xc0>)
 8002e22:	6013      	str	r3, [r2, #0]
}
 8002e24:	bf00      	nop
 8002e26:	371c      	adds	r7, #28
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	20000500 	.word	0x20000500
 8002e34:	200004ec 	.word	0x200004ec
 8002e38:	200004e0 	.word	0x200004e0
 8002e3c:	200003dc 	.word	0x200003dc
 8002e40:	200003d8 	.word	0x200003d8
 8002e44:	20000010 	.word	0x20000010

08002e48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002e50:	f000 f852 	bl	8002ef8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002e54:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <prvIdleTask+0x28>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d9f9      	bls.n	8002e50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002e5c:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <prvIdleTask+0x2c>)
 8002e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	f3bf 8f4f 	dsb	sy
 8002e68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002e6c:	e7f0      	b.n	8002e50 <prvIdleTask+0x8>
 8002e6e:	bf00      	nop
 8002e70:	200003dc 	.word	0x200003dc
 8002e74:	e000ed04 	.word	0xe000ed04

08002e78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e7e:	2300      	movs	r3, #0
 8002e80:	607b      	str	r3, [r7, #4]
 8002e82:	e00c      	b.n	8002e9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	4613      	mov	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4413      	add	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4a12      	ldr	r2, [pc, #72]	; (8002ed8 <prvInitialiseTaskLists+0x60>)
 8002e90:	4413      	add	r3, r2
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff fb20 	bl	80024d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	607b      	str	r3, [r7, #4]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b06      	cmp	r3, #6
 8002ea2:	d9ef      	bls.n	8002e84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002ea4:	480d      	ldr	r0, [pc, #52]	; (8002edc <prvInitialiseTaskLists+0x64>)
 8002ea6:	f7ff fb17 	bl	80024d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002eaa:	480d      	ldr	r0, [pc, #52]	; (8002ee0 <prvInitialiseTaskLists+0x68>)
 8002eac:	f7ff fb14 	bl	80024d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002eb0:	480c      	ldr	r0, [pc, #48]	; (8002ee4 <prvInitialiseTaskLists+0x6c>)
 8002eb2:	f7ff fb11 	bl	80024d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002eb6:	480c      	ldr	r0, [pc, #48]	; (8002ee8 <prvInitialiseTaskLists+0x70>)
 8002eb8:	f7ff fb0e 	bl	80024d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002ebc:	480b      	ldr	r0, [pc, #44]	; (8002eec <prvInitialiseTaskLists+0x74>)
 8002ebe:	f7ff fb0b 	bl	80024d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002ec2:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <prvInitialiseTaskLists+0x78>)
 8002ec4:	4a05      	ldr	r2, [pc, #20]	; (8002edc <prvInitialiseTaskLists+0x64>)
 8002ec6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002ec8:	4b0a      	ldr	r3, [pc, #40]	; (8002ef4 <prvInitialiseTaskLists+0x7c>)
 8002eca:	4a05      	ldr	r2, [pc, #20]	; (8002ee0 <prvInitialiseTaskLists+0x68>)
 8002ecc:	601a      	str	r2, [r3, #0]
}
 8002ece:	bf00      	nop
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	200003dc 	.word	0x200003dc
 8002edc:	20000468 	.word	0x20000468
 8002ee0:	2000047c 	.word	0x2000047c
 8002ee4:	20000498 	.word	0x20000498
 8002ee8:	200004ac 	.word	0x200004ac
 8002eec:	200004c4 	.word	0x200004c4
 8002ef0:	20000490 	.word	0x20000490
 8002ef4:	20000494 	.word	0x20000494

08002ef8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002efe:	e019      	b.n	8002f34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002f00:	f000 f9d4 	bl	80032ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002f04:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <prvCheckTasksWaitingTermination+0x50>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3304      	adds	r3, #4
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff fb67 	bl	80025e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002f16:	4b0d      	ldr	r3, [pc, #52]	; (8002f4c <prvCheckTasksWaitingTermination+0x54>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	4a0b      	ldr	r2, [pc, #44]	; (8002f4c <prvCheckTasksWaitingTermination+0x54>)
 8002f1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002f20:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <prvCheckTasksWaitingTermination+0x58>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	3b01      	subs	r3, #1
 8002f26:	4a0a      	ldr	r2, [pc, #40]	; (8002f50 <prvCheckTasksWaitingTermination+0x58>)
 8002f28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002f2a:	f000 f9ef 	bl	800330c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f810 	bl	8002f54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f34:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <prvCheckTasksWaitingTermination+0x58>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1e1      	bne.n	8002f00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002f3c:	bf00      	nop
 8002f3e:	bf00      	nop
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	200004ac 	.word	0x200004ac
 8002f4c:	200004d8 	.word	0x200004d8
 8002f50:	200004c0 	.word	0x200004c0

08002f54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	334c      	adds	r3, #76	; 0x4c
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 fe81 	bl	8003c68 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d108      	bne.n	8002f82 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 fb1f 	bl	80035b8 <vPortFree>
				vPortFree( pxTCB );
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 fb1c 	bl	80035b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002f80:	e018      	b.n	8002fb4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d103      	bne.n	8002f94 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 fb13 	bl	80035b8 <vPortFree>
	}
 8002f92:	e00f      	b.n	8002fb4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d00a      	beq.n	8002fb4 <prvDeleteTCB+0x60>
	__asm volatile
 8002f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa2:	f383 8811 	msr	BASEPRI, r3
 8002fa6:	f3bf 8f6f 	isb	sy
 8002faa:	f3bf 8f4f 	dsb	sy
 8002fae:	60fb      	str	r3, [r7, #12]
}
 8002fb0:	bf00      	nop
 8002fb2:	e7fe      	b.n	8002fb2 <prvDeleteTCB+0x5e>
	}
 8002fb4:	bf00      	nop
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fc2:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <prvResetNextTaskUnblockTime+0x40>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <prvResetNextTaskUnblockTime+0x14>
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e000      	b.n	8002fd2 <prvResetNextTaskUnblockTime+0x16>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d004      	beq.n	8002fe0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002fd6:	4b0a      	ldr	r3, [pc, #40]	; (8003000 <prvResetNextTaskUnblockTime+0x44>)
 8002fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fdc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002fde:	e008      	b.n	8002ff2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002fe0:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <prvResetNextTaskUnblockTime+0x40>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	4a04      	ldr	r2, [pc, #16]	; (8003000 <prvResetNextTaskUnblockTime+0x44>)
 8002ff0:	6013      	str	r3, [r2, #0]
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc80      	pop	{r7}
 8002ffa:	4770      	bx	lr
 8002ffc:	20000490 	.word	0x20000490
 8003000:	200004f8 	.word	0x200004f8

08003004 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800300e:	4b29      	ldr	r3, [pc, #164]	; (80030b4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003014:	4b28      	ldr	r3, [pc, #160]	; (80030b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	3304      	adds	r3, #4
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff fae2 	bl	80025e4 <uxListRemove>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10b      	bne.n	800303e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003026:	4b24      	ldr	r3, [pc, #144]	; (80030b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302c:	2201      	movs	r2, #1
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43da      	mvns	r2, r3
 8003034:	4b21      	ldr	r3, [pc, #132]	; (80030bc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4013      	ands	r3, r2
 800303a:	4a20      	ldr	r2, [pc, #128]	; (80030bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800303c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003044:	d10a      	bne.n	800305c <prvAddCurrentTaskToDelayedList+0x58>
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d007      	beq.n	800305c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800304c:	4b1a      	ldr	r3, [pc, #104]	; (80030b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	3304      	adds	r3, #4
 8003052:	4619      	mov	r1, r3
 8003054:	481a      	ldr	r0, [pc, #104]	; (80030c0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003056:	f7ff fa6a 	bl	800252e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800305a:	e026      	b.n	80030aa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4413      	add	r3, r2
 8003062:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003064:	4b14      	ldr	r3, [pc, #80]	; (80030b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	429a      	cmp	r2, r3
 8003072:	d209      	bcs.n	8003088 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003074:	4b13      	ldr	r3, [pc, #76]	; (80030c4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	3304      	adds	r3, #4
 800307e:	4619      	mov	r1, r3
 8003080:	4610      	mov	r0, r2
 8003082:	f7ff fa77 	bl	8002574 <vListInsert>
}
 8003086:	e010      	b.n	80030aa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003088:	4b0f      	ldr	r3, [pc, #60]	; (80030c8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	4b0a      	ldr	r3, [pc, #40]	; (80030b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	3304      	adds	r3, #4
 8003092:	4619      	mov	r1, r3
 8003094:	4610      	mov	r0, r2
 8003096:	f7ff fa6d 	bl	8002574 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800309a:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d202      	bcs.n	80030aa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80030a4:	4a09      	ldr	r2, [pc, #36]	; (80030cc <prvAddCurrentTaskToDelayedList+0xc8>)
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	6013      	str	r3, [r2, #0]
}
 80030aa:	bf00      	nop
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	200004dc 	.word	0x200004dc
 80030b8:	200003d8 	.word	0x200003d8
 80030bc:	200004e0 	.word	0x200004e0
 80030c0:	200004c4 	.word	0x200004c4
 80030c4:	20000494 	.word	0x20000494
 80030c8:	20000490 	.word	0x20000490
 80030cc:	200004f8 	.word	0x200004f8

080030d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	3b04      	subs	r3, #4
 80030e0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	3b04      	subs	r3, #4
 80030ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f023 0201 	bic.w	r2, r3, #1
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	3b04      	subs	r3, #4
 80030fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003100:	4a08      	ldr	r2, [pc, #32]	; (8003124 <pxPortInitialiseStack+0x54>)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	3b14      	subs	r3, #20
 800310a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	3b20      	subs	r3, #32
 8003116:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003118:	68fb      	ldr	r3, [r7, #12]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr
 8003124:	08003129 	.word	0x08003129

08003128 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800312e:	2300      	movs	r3, #0
 8003130:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003132:	4b12      	ldr	r3, [pc, #72]	; (800317c <prvTaskExitError+0x54>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313a:	d00a      	beq.n	8003152 <prvTaskExitError+0x2a>
	__asm volatile
 800313c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003140:	f383 8811 	msr	BASEPRI, r3
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	f3bf 8f4f 	dsb	sy
 800314c:	60fb      	str	r3, [r7, #12]
}
 800314e:	bf00      	nop
 8003150:	e7fe      	b.n	8003150 <prvTaskExitError+0x28>
	__asm volatile
 8003152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003156:	f383 8811 	msr	BASEPRI, r3
 800315a:	f3bf 8f6f 	isb	sy
 800315e:	f3bf 8f4f 	dsb	sy
 8003162:	60bb      	str	r3, [r7, #8]
}
 8003164:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003166:	bf00      	nop
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0fc      	beq.n	8003168 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800316e:	bf00      	nop
 8003170:	bf00      	nop
 8003172:	3714      	adds	r7, #20
 8003174:	46bd      	mov	sp, r7
 8003176:	bc80      	pop	{r7}
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	2000000c 	.word	0x2000000c

08003180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003180:	4b07      	ldr	r3, [pc, #28]	; (80031a0 <pxCurrentTCBConst2>)
 8003182:	6819      	ldr	r1, [r3, #0]
 8003184:	6808      	ldr	r0, [r1, #0]
 8003186:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800318a:	f380 8809 	msr	PSP, r0
 800318e:	f3bf 8f6f 	isb	sy
 8003192:	f04f 0000 	mov.w	r0, #0
 8003196:	f380 8811 	msr	BASEPRI, r0
 800319a:	f04e 0e0d 	orr.w	lr, lr, #13
 800319e:	4770      	bx	lr

080031a0 <pxCurrentTCBConst2>:
 80031a0:	200003d8 	.word	0x200003d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80031a4:	bf00      	nop
 80031a6:	bf00      	nop

080031a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80031a8:	4806      	ldr	r0, [pc, #24]	; (80031c4 <prvPortStartFirstTask+0x1c>)
 80031aa:	6800      	ldr	r0, [r0, #0]
 80031ac:	6800      	ldr	r0, [r0, #0]
 80031ae:	f380 8808 	msr	MSP, r0
 80031b2:	b662      	cpsie	i
 80031b4:	b661      	cpsie	f
 80031b6:	f3bf 8f4f 	dsb	sy
 80031ba:	f3bf 8f6f 	isb	sy
 80031be:	df00      	svc	0
 80031c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80031c2:	bf00      	nop
 80031c4:	e000ed08 	.word	0xe000ed08

080031c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80031ce:	4b32      	ldr	r3, [pc, #200]	; (8003298 <xPortStartScheduler+0xd0>)
 80031d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	22ff      	movs	r2, #255	; 0xff
 80031de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80031e8:	78fb      	ldrb	r3, [r7, #3]
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	4b2a      	ldr	r3, [pc, #168]	; (800329c <xPortStartScheduler+0xd4>)
 80031f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80031f6:	4b2a      	ldr	r3, [pc, #168]	; (80032a0 <xPortStartScheduler+0xd8>)
 80031f8:	2207      	movs	r2, #7
 80031fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031fc:	e009      	b.n	8003212 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80031fe:	4b28      	ldr	r3, [pc, #160]	; (80032a0 <xPortStartScheduler+0xd8>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	3b01      	subs	r3, #1
 8003204:	4a26      	ldr	r2, [pc, #152]	; (80032a0 <xPortStartScheduler+0xd8>)
 8003206:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003208:	78fb      	ldrb	r3, [r7, #3]
 800320a:	b2db      	uxtb	r3, r3
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	b2db      	uxtb	r3, r3
 8003210:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003212:	78fb      	ldrb	r3, [r7, #3]
 8003214:	b2db      	uxtb	r3, r3
 8003216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800321a:	2b80      	cmp	r3, #128	; 0x80
 800321c:	d0ef      	beq.n	80031fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800321e:	4b20      	ldr	r3, [pc, #128]	; (80032a0 <xPortStartScheduler+0xd8>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f1c3 0307 	rsb	r3, r3, #7
 8003226:	2b04      	cmp	r3, #4
 8003228:	d00a      	beq.n	8003240 <xPortStartScheduler+0x78>
	__asm volatile
 800322a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322e:	f383 8811 	msr	BASEPRI, r3
 8003232:	f3bf 8f6f 	isb	sy
 8003236:	f3bf 8f4f 	dsb	sy
 800323a:	60bb      	str	r3, [r7, #8]
}
 800323c:	bf00      	nop
 800323e:	e7fe      	b.n	800323e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003240:	4b17      	ldr	r3, [pc, #92]	; (80032a0 <xPortStartScheduler+0xd8>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	021b      	lsls	r3, r3, #8
 8003246:	4a16      	ldr	r2, [pc, #88]	; (80032a0 <xPortStartScheduler+0xd8>)
 8003248:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800324a:	4b15      	ldr	r3, [pc, #84]	; (80032a0 <xPortStartScheduler+0xd8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003252:	4a13      	ldr	r2, [pc, #76]	; (80032a0 <xPortStartScheduler+0xd8>)
 8003254:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	b2da      	uxtb	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800325e:	4b11      	ldr	r3, [pc, #68]	; (80032a4 <xPortStartScheduler+0xdc>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a10      	ldr	r2, [pc, #64]	; (80032a4 <xPortStartScheduler+0xdc>)
 8003264:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003268:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800326a:	4b0e      	ldr	r3, [pc, #56]	; (80032a4 <xPortStartScheduler+0xdc>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a0d      	ldr	r2, [pc, #52]	; (80032a4 <xPortStartScheduler+0xdc>)
 8003270:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003274:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003276:	f000 f8b9 	bl	80033ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800327a:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <xPortStartScheduler+0xe0>)
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003280:	f7ff ff92 	bl	80031a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003284:	f7ff fd7e 	bl	8002d84 <vTaskSwitchContext>
	prvTaskExitError();
 8003288:	f7ff ff4e 	bl	8003128 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	e000e400 	.word	0xe000e400
 800329c:	20000504 	.word	0x20000504
 80032a0:	20000508 	.word	0x20000508
 80032a4:	e000ed20 	.word	0xe000ed20
 80032a8:	2000000c 	.word	0x2000000c

080032ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
	__asm volatile
 80032b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b6:	f383 8811 	msr	BASEPRI, r3
 80032ba:	f3bf 8f6f 	isb	sy
 80032be:	f3bf 8f4f 	dsb	sy
 80032c2:	607b      	str	r3, [r7, #4]
}
 80032c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80032c6:	4b0f      	ldr	r3, [pc, #60]	; (8003304 <vPortEnterCritical+0x58>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	3301      	adds	r3, #1
 80032cc:	4a0d      	ldr	r2, [pc, #52]	; (8003304 <vPortEnterCritical+0x58>)
 80032ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80032d0:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <vPortEnterCritical+0x58>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d10f      	bne.n	80032f8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80032d8:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <vPortEnterCritical+0x5c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <vPortEnterCritical+0x4c>
	__asm volatile
 80032e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e6:	f383 8811 	msr	BASEPRI, r3
 80032ea:	f3bf 8f6f 	isb	sy
 80032ee:	f3bf 8f4f 	dsb	sy
 80032f2:	603b      	str	r3, [r7, #0]
}
 80032f4:	bf00      	nop
 80032f6:	e7fe      	b.n	80032f6 <vPortEnterCritical+0x4a>
	}
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bc80      	pop	{r7}
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	2000000c 	.word	0x2000000c
 8003308:	e000ed04 	.word	0xe000ed04

0800330c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003312:	4b11      	ldr	r3, [pc, #68]	; (8003358 <vPortExitCritical+0x4c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10a      	bne.n	8003330 <vPortExitCritical+0x24>
	__asm volatile
 800331a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331e:	f383 8811 	msr	BASEPRI, r3
 8003322:	f3bf 8f6f 	isb	sy
 8003326:	f3bf 8f4f 	dsb	sy
 800332a:	607b      	str	r3, [r7, #4]
}
 800332c:	bf00      	nop
 800332e:	e7fe      	b.n	800332e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003330:	4b09      	ldr	r3, [pc, #36]	; (8003358 <vPortExitCritical+0x4c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	3b01      	subs	r3, #1
 8003336:	4a08      	ldr	r2, [pc, #32]	; (8003358 <vPortExitCritical+0x4c>)
 8003338:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800333a:	4b07      	ldr	r3, [pc, #28]	; (8003358 <vPortExitCritical+0x4c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d105      	bne.n	800334e <vPortExitCritical+0x42>
 8003342:	2300      	movs	r3, #0
 8003344:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800334c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr
 8003358:	2000000c 	.word	0x2000000c
 800335c:	00000000 	.word	0x00000000

08003360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003360:	f3ef 8009 	mrs	r0, PSP
 8003364:	f3bf 8f6f 	isb	sy
 8003368:	4b0d      	ldr	r3, [pc, #52]	; (80033a0 <pxCurrentTCBConst>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003370:	6010      	str	r0, [r2, #0]
 8003372:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003376:	f04f 0050 	mov.w	r0, #80	; 0x50
 800337a:	f380 8811 	msr	BASEPRI, r0
 800337e:	f7ff fd01 	bl	8002d84 <vTaskSwitchContext>
 8003382:	f04f 0000 	mov.w	r0, #0
 8003386:	f380 8811 	msr	BASEPRI, r0
 800338a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800338e:	6819      	ldr	r1, [r3, #0]
 8003390:	6808      	ldr	r0, [r1, #0]
 8003392:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003396:	f380 8809 	msr	PSP, r0
 800339a:	f3bf 8f6f 	isb	sy
 800339e:	4770      	bx	lr

080033a0 <pxCurrentTCBConst>:
 80033a0:	200003d8 	.word	0x200003d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80033a4:	bf00      	nop
 80033a6:	bf00      	nop

080033a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
	__asm volatile
 80033ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b2:	f383 8811 	msr	BASEPRI, r3
 80033b6:	f3bf 8f6f 	isb	sy
 80033ba:	f3bf 8f4f 	dsb	sy
 80033be:	607b      	str	r3, [r7, #4]
}
 80033c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80033c2:	f7ff fc21 	bl	8002c08 <xTaskIncrementTick>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80033cc:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <SysTick_Handler+0x40>)
 80033ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	2300      	movs	r3, #0
 80033d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	f383 8811 	msr	BASEPRI, r3
}
 80033de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80033e0:	bf00      	nop
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	e000ed04 	.word	0xe000ed04

080033ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80033f0:	4b0a      	ldr	r3, [pc, #40]	; (800341c <vPortSetupTimerInterrupt+0x30>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80033f6:	4b0a      	ldr	r3, [pc, #40]	; (8003420 <vPortSetupTimerInterrupt+0x34>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80033fc:	4b09      	ldr	r3, [pc, #36]	; (8003424 <vPortSetupTimerInterrupt+0x38>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a09      	ldr	r2, [pc, #36]	; (8003428 <vPortSetupTimerInterrupt+0x3c>)
 8003402:	fba2 2303 	umull	r2, r3, r2, r3
 8003406:	099b      	lsrs	r3, r3, #6
 8003408:	4a08      	ldr	r2, [pc, #32]	; (800342c <vPortSetupTimerInterrupt+0x40>)
 800340a:	3b01      	subs	r3, #1
 800340c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800340e:	4b03      	ldr	r3, [pc, #12]	; (800341c <vPortSetupTimerInterrupt+0x30>)
 8003410:	2207      	movs	r2, #7
 8003412:	601a      	str	r2, [r3, #0]
}
 8003414:	bf00      	nop
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr
 800341c:	e000e010 	.word	0xe000e010
 8003420:	e000e018 	.word	0xe000e018
 8003424:	20000000 	.word	0x20000000
 8003428:	10624dd3 	.word	0x10624dd3
 800342c:	e000e014 	.word	0xe000e014

08003430 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b08a      	sub	sp, #40	; 0x28
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003438:	2300      	movs	r3, #0
 800343a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800343c:	f7ff fb3a 	bl	8002ab4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003440:	4b58      	ldr	r3, [pc, #352]	; (80035a4 <pvPortMalloc+0x174>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003448:	f000 f910 	bl	800366c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800344c:	4b56      	ldr	r3, [pc, #344]	; (80035a8 <pvPortMalloc+0x178>)
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4013      	ands	r3, r2
 8003454:	2b00      	cmp	r3, #0
 8003456:	f040 808e 	bne.w	8003576 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d01d      	beq.n	800349c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003460:	2208      	movs	r2, #8
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4413      	add	r3, r2
 8003466:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	2b00      	cmp	r3, #0
 8003470:	d014      	beq.n	800349c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f023 0307 	bic.w	r3, r3, #7
 8003478:	3308      	adds	r3, #8
 800347a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <pvPortMalloc+0x6c>
	__asm volatile
 8003486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348a:	f383 8811 	msr	BASEPRI, r3
 800348e:	f3bf 8f6f 	isb	sy
 8003492:	f3bf 8f4f 	dsb	sy
 8003496:	617b      	str	r3, [r7, #20]
}
 8003498:	bf00      	nop
 800349a:	e7fe      	b.n	800349a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d069      	beq.n	8003576 <pvPortMalloc+0x146>
 80034a2:	4b42      	ldr	r3, [pc, #264]	; (80035ac <pvPortMalloc+0x17c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d864      	bhi.n	8003576 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80034ac:	4b40      	ldr	r3, [pc, #256]	; (80035b0 <pvPortMalloc+0x180>)
 80034ae:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80034b0:	4b3f      	ldr	r3, [pc, #252]	; (80035b0 <pvPortMalloc+0x180>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80034b6:	e004      	b.n	80034c2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ba:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80034c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d903      	bls.n	80034d4 <pvPortMalloc+0xa4>
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1f1      	bne.n	80034b8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80034d4:	4b33      	ldr	r3, [pc, #204]	; (80035a4 <pvPortMalloc+0x174>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034da:	429a      	cmp	r2, r3
 80034dc:	d04b      	beq.n	8003576 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2208      	movs	r2, #8
 80034e4:	4413      	add	r3, r2
 80034e6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	1ad2      	subs	r2, r2, r3
 80034f8:	2308      	movs	r3, #8
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d91f      	bls.n	8003540 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4413      	add	r3, r2
 8003506:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	f003 0307 	and.w	r3, r3, #7
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <pvPortMalloc+0xf8>
	__asm volatile
 8003512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003516:	f383 8811 	msr	BASEPRI, r3
 800351a:	f3bf 8f6f 	isb	sy
 800351e:	f3bf 8f4f 	dsb	sy
 8003522:	613b      	str	r3, [r7, #16]
}
 8003524:	bf00      	nop
 8003526:	e7fe      	b.n	8003526 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	1ad2      	subs	r2, r2, r3
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800353a:	69b8      	ldr	r0, [r7, #24]
 800353c:	f000 f8f8 	bl	8003730 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003540:	4b1a      	ldr	r3, [pc, #104]	; (80035ac <pvPortMalloc+0x17c>)
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	4a18      	ldr	r2, [pc, #96]	; (80035ac <pvPortMalloc+0x17c>)
 800354c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800354e:	4b17      	ldr	r3, [pc, #92]	; (80035ac <pvPortMalloc+0x17c>)
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	4b18      	ldr	r3, [pc, #96]	; (80035b4 <pvPortMalloc+0x184>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d203      	bcs.n	8003562 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800355a:	4b14      	ldr	r3, [pc, #80]	; (80035ac <pvPortMalloc+0x17c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a15      	ldr	r2, [pc, #84]	; (80035b4 <pvPortMalloc+0x184>)
 8003560:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	4b10      	ldr	r3, [pc, #64]	; (80035a8 <pvPortMalloc+0x178>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	431a      	orrs	r2, r3
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003576:	f7ff faab 	bl	8002ad0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00a      	beq.n	800359a <pvPortMalloc+0x16a>
	__asm volatile
 8003584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003588:	f383 8811 	msr	BASEPRI, r3
 800358c:	f3bf 8f6f 	isb	sy
 8003590:	f3bf 8f4f 	dsb	sy
 8003594:	60fb      	str	r3, [r7, #12]
}
 8003596:	bf00      	nop
 8003598:	e7fe      	b.n	8003598 <pvPortMalloc+0x168>
	return pvReturn;
 800359a:	69fb      	ldr	r3, [r7, #28]
}
 800359c:	4618      	mov	r0, r3
 800359e:	3728      	adds	r7, #40	; 0x28
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	20001114 	.word	0x20001114
 80035a8:	20001120 	.word	0x20001120
 80035ac:	20001118 	.word	0x20001118
 80035b0:	2000110c 	.word	0x2000110c
 80035b4:	2000111c 	.word	0x2000111c

080035b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d048      	beq.n	800365c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80035ca:	2308      	movs	r3, #8
 80035cc:	425b      	negs	r3, r3
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	4413      	add	r3, r2
 80035d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	4b21      	ldr	r3, [pc, #132]	; (8003664 <vPortFree+0xac>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4013      	ands	r3, r2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10a      	bne.n	80035fc <vPortFree+0x44>
	__asm volatile
 80035e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ea:	f383 8811 	msr	BASEPRI, r3
 80035ee:	f3bf 8f6f 	isb	sy
 80035f2:	f3bf 8f4f 	dsb	sy
 80035f6:	60fb      	str	r3, [r7, #12]
}
 80035f8:	bf00      	nop
 80035fa:	e7fe      	b.n	80035fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00a      	beq.n	800361a <vPortFree+0x62>
	__asm volatile
 8003604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003608:	f383 8811 	msr	BASEPRI, r3
 800360c:	f3bf 8f6f 	isb	sy
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	60bb      	str	r3, [r7, #8]
}
 8003616:	bf00      	nop
 8003618:	e7fe      	b.n	8003618 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	4b11      	ldr	r3, [pc, #68]	; (8003664 <vPortFree+0xac>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4013      	ands	r3, r2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d019      	beq.n	800365c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d115      	bne.n	800365c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <vPortFree+0xac>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	43db      	mvns	r3, r3
 800363a:	401a      	ands	r2, r3
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003640:	f7ff fa38 	bl	8002ab4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	4b07      	ldr	r3, [pc, #28]	; (8003668 <vPortFree+0xb0>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4413      	add	r3, r2
 800364e:	4a06      	ldr	r2, [pc, #24]	; (8003668 <vPortFree+0xb0>)
 8003650:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003652:	6938      	ldr	r0, [r7, #16]
 8003654:	f000 f86c 	bl	8003730 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003658:	f7ff fa3a 	bl	8002ad0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800365c:	bf00      	nop
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	20001120 	.word	0x20001120
 8003668:	20001118 	.word	0x20001118

0800366c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003672:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003676:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003678:	4b27      	ldr	r3, [pc, #156]	; (8003718 <prvHeapInit+0xac>)
 800367a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00c      	beq.n	80036a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	3307      	adds	r3, #7
 800368a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f023 0307 	bic.w	r3, r3, #7
 8003692:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	4a1f      	ldr	r2, [pc, #124]	; (8003718 <prvHeapInit+0xac>)
 800369c:	4413      	add	r3, r2
 800369e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80036a4:	4a1d      	ldr	r2, [pc, #116]	; (800371c <prvHeapInit+0xb0>)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80036aa:	4b1c      	ldr	r3, [pc, #112]	; (800371c <prvHeapInit+0xb0>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	4413      	add	r3, r2
 80036b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80036b8:	2208      	movs	r2, #8
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	1a9b      	subs	r3, r3, r2
 80036be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f023 0307 	bic.w	r3, r3, #7
 80036c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4a15      	ldr	r2, [pc, #84]	; (8003720 <prvHeapInit+0xb4>)
 80036cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80036ce:	4b14      	ldr	r3, [pc, #80]	; (8003720 <prvHeapInit+0xb4>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2200      	movs	r2, #0
 80036d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80036d6:	4b12      	ldr	r3, [pc, #72]	; (8003720 <prvHeapInit+0xb4>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	1ad2      	subs	r2, r2, r3
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80036ec:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <prvHeapInit+0xb4>)
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	4a0a      	ldr	r2, [pc, #40]	; (8003724 <prvHeapInit+0xb8>)
 80036fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	4a09      	ldr	r2, [pc, #36]	; (8003728 <prvHeapInit+0xbc>)
 8003702:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003704:	4b09      	ldr	r3, [pc, #36]	; (800372c <prvHeapInit+0xc0>)
 8003706:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800370a:	601a      	str	r2, [r3, #0]
}
 800370c:	bf00      	nop
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	bc80      	pop	{r7}
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	2000050c 	.word	0x2000050c
 800371c:	2000110c 	.word	0x2000110c
 8003720:	20001114 	.word	0x20001114
 8003724:	2000111c 	.word	0x2000111c
 8003728:	20001118 	.word	0x20001118
 800372c:	20001120 	.word	0x20001120

08003730 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003738:	4b27      	ldr	r3, [pc, #156]	; (80037d8 <prvInsertBlockIntoFreeList+0xa8>)
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	e002      	b.n	8003744 <prvInsertBlockIntoFreeList+0x14>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	429a      	cmp	r2, r3
 800374c:	d8f7      	bhi.n	800373e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	4413      	add	r3, r2
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	429a      	cmp	r2, r3
 800375e:	d108      	bne.n	8003772 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	441a      	add	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	441a      	add	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d118      	bne.n	80037b8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	4b14      	ldr	r3, [pc, #80]	; (80037dc <prvInsertBlockIntoFreeList+0xac>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	429a      	cmp	r2, r3
 8003790:	d00d      	beq.n	80037ae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	441a      	add	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	e008      	b.n	80037c0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80037ae:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <prvInsertBlockIntoFreeList+0xac>)
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	e003      	b.n	80037c0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d002      	beq.n	80037ce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037ce:	bf00      	nop
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bc80      	pop	{r7}
 80037d6:	4770      	bx	lr
 80037d8:	2000110c 	.word	0x2000110c
 80037dc:	20001114 	.word	0x20001114

080037e0 <__errno>:
 80037e0:	4b01      	ldr	r3, [pc, #4]	; (80037e8 <__errno+0x8>)
 80037e2:	6818      	ldr	r0, [r3, #0]
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	20000010 	.word	0x20000010

080037ec <std>:
 80037ec:	2300      	movs	r3, #0
 80037ee:	b510      	push	{r4, lr}
 80037f0:	4604      	mov	r4, r0
 80037f2:	e9c0 3300 	strd	r3, r3, [r0]
 80037f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80037fa:	6083      	str	r3, [r0, #8]
 80037fc:	8181      	strh	r1, [r0, #12]
 80037fe:	6643      	str	r3, [r0, #100]	; 0x64
 8003800:	81c2      	strh	r2, [r0, #14]
 8003802:	6183      	str	r3, [r0, #24]
 8003804:	4619      	mov	r1, r3
 8003806:	2208      	movs	r2, #8
 8003808:	305c      	adds	r0, #92	; 0x5c
 800380a:	f000 f90c 	bl	8003a26 <memset>
 800380e:	4b05      	ldr	r3, [pc, #20]	; (8003824 <std+0x38>)
 8003810:	6224      	str	r4, [r4, #32]
 8003812:	6263      	str	r3, [r4, #36]	; 0x24
 8003814:	4b04      	ldr	r3, [pc, #16]	; (8003828 <std+0x3c>)
 8003816:	62a3      	str	r3, [r4, #40]	; 0x28
 8003818:	4b04      	ldr	r3, [pc, #16]	; (800382c <std+0x40>)
 800381a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800381c:	4b04      	ldr	r3, [pc, #16]	; (8003830 <std+0x44>)
 800381e:	6323      	str	r3, [r4, #48]	; 0x30
 8003820:	bd10      	pop	{r4, pc}
 8003822:	bf00      	nop
 8003824:	08003d41 	.word	0x08003d41
 8003828:	08003d63 	.word	0x08003d63
 800382c:	08003d9b 	.word	0x08003d9b
 8003830:	08003dbf 	.word	0x08003dbf

08003834 <_cleanup_r>:
 8003834:	4901      	ldr	r1, [pc, #4]	; (800383c <_cleanup_r+0x8>)
 8003836:	f000 b8af 	b.w	8003998 <_fwalk_reent>
 800383a:	bf00      	nop
 800383c:	08004091 	.word	0x08004091

08003840 <__sfmoreglue>:
 8003840:	2268      	movs	r2, #104	; 0x68
 8003842:	b570      	push	{r4, r5, r6, lr}
 8003844:	1e4d      	subs	r5, r1, #1
 8003846:	4355      	muls	r5, r2
 8003848:	460e      	mov	r6, r1
 800384a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800384e:	f000 f913 	bl	8003a78 <_malloc_r>
 8003852:	4604      	mov	r4, r0
 8003854:	b140      	cbz	r0, 8003868 <__sfmoreglue+0x28>
 8003856:	2100      	movs	r1, #0
 8003858:	e9c0 1600 	strd	r1, r6, [r0]
 800385c:	300c      	adds	r0, #12
 800385e:	60a0      	str	r0, [r4, #8]
 8003860:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003864:	f000 f8df 	bl	8003a26 <memset>
 8003868:	4620      	mov	r0, r4
 800386a:	bd70      	pop	{r4, r5, r6, pc}

0800386c <__sfp_lock_acquire>:
 800386c:	4801      	ldr	r0, [pc, #4]	; (8003874 <__sfp_lock_acquire+0x8>)
 800386e:	f000 b8d8 	b.w	8003a22 <__retarget_lock_acquire_recursive>
 8003872:	bf00      	nop
 8003874:	20001125 	.word	0x20001125

08003878 <__sfp_lock_release>:
 8003878:	4801      	ldr	r0, [pc, #4]	; (8003880 <__sfp_lock_release+0x8>)
 800387a:	f000 b8d3 	b.w	8003a24 <__retarget_lock_release_recursive>
 800387e:	bf00      	nop
 8003880:	20001125 	.word	0x20001125

08003884 <__sinit_lock_acquire>:
 8003884:	4801      	ldr	r0, [pc, #4]	; (800388c <__sinit_lock_acquire+0x8>)
 8003886:	f000 b8cc 	b.w	8003a22 <__retarget_lock_acquire_recursive>
 800388a:	bf00      	nop
 800388c:	20001126 	.word	0x20001126

08003890 <__sinit_lock_release>:
 8003890:	4801      	ldr	r0, [pc, #4]	; (8003898 <__sinit_lock_release+0x8>)
 8003892:	f000 b8c7 	b.w	8003a24 <__retarget_lock_release_recursive>
 8003896:	bf00      	nop
 8003898:	20001126 	.word	0x20001126

0800389c <__sinit>:
 800389c:	b510      	push	{r4, lr}
 800389e:	4604      	mov	r4, r0
 80038a0:	f7ff fff0 	bl	8003884 <__sinit_lock_acquire>
 80038a4:	69a3      	ldr	r3, [r4, #24]
 80038a6:	b11b      	cbz	r3, 80038b0 <__sinit+0x14>
 80038a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038ac:	f7ff bff0 	b.w	8003890 <__sinit_lock_release>
 80038b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80038b4:	6523      	str	r3, [r4, #80]	; 0x50
 80038b6:	4b13      	ldr	r3, [pc, #76]	; (8003904 <__sinit+0x68>)
 80038b8:	4a13      	ldr	r2, [pc, #76]	; (8003908 <__sinit+0x6c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80038be:	42a3      	cmp	r3, r4
 80038c0:	bf08      	it	eq
 80038c2:	2301      	moveq	r3, #1
 80038c4:	4620      	mov	r0, r4
 80038c6:	bf08      	it	eq
 80038c8:	61a3      	streq	r3, [r4, #24]
 80038ca:	f000 f81f 	bl	800390c <__sfp>
 80038ce:	6060      	str	r0, [r4, #4]
 80038d0:	4620      	mov	r0, r4
 80038d2:	f000 f81b 	bl	800390c <__sfp>
 80038d6:	60a0      	str	r0, [r4, #8]
 80038d8:	4620      	mov	r0, r4
 80038da:	f000 f817 	bl	800390c <__sfp>
 80038de:	2200      	movs	r2, #0
 80038e0:	2104      	movs	r1, #4
 80038e2:	60e0      	str	r0, [r4, #12]
 80038e4:	6860      	ldr	r0, [r4, #4]
 80038e6:	f7ff ff81 	bl	80037ec <std>
 80038ea:	2201      	movs	r2, #1
 80038ec:	2109      	movs	r1, #9
 80038ee:	68a0      	ldr	r0, [r4, #8]
 80038f0:	f7ff ff7c 	bl	80037ec <std>
 80038f4:	2202      	movs	r2, #2
 80038f6:	2112      	movs	r1, #18
 80038f8:	68e0      	ldr	r0, [r4, #12]
 80038fa:	f7ff ff77 	bl	80037ec <std>
 80038fe:	2301      	movs	r3, #1
 8003900:	61a3      	str	r3, [r4, #24]
 8003902:	e7d1      	b.n	80038a8 <__sinit+0xc>
 8003904:	080043e8 	.word	0x080043e8
 8003908:	08003835 	.word	0x08003835

0800390c <__sfp>:
 800390c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390e:	4607      	mov	r7, r0
 8003910:	f7ff ffac 	bl	800386c <__sfp_lock_acquire>
 8003914:	4b1e      	ldr	r3, [pc, #120]	; (8003990 <__sfp+0x84>)
 8003916:	681e      	ldr	r6, [r3, #0]
 8003918:	69b3      	ldr	r3, [r6, #24]
 800391a:	b913      	cbnz	r3, 8003922 <__sfp+0x16>
 800391c:	4630      	mov	r0, r6
 800391e:	f7ff ffbd 	bl	800389c <__sinit>
 8003922:	3648      	adds	r6, #72	; 0x48
 8003924:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003928:	3b01      	subs	r3, #1
 800392a:	d503      	bpl.n	8003934 <__sfp+0x28>
 800392c:	6833      	ldr	r3, [r6, #0]
 800392e:	b30b      	cbz	r3, 8003974 <__sfp+0x68>
 8003930:	6836      	ldr	r6, [r6, #0]
 8003932:	e7f7      	b.n	8003924 <__sfp+0x18>
 8003934:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003938:	b9d5      	cbnz	r5, 8003970 <__sfp+0x64>
 800393a:	4b16      	ldr	r3, [pc, #88]	; (8003994 <__sfp+0x88>)
 800393c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003940:	60e3      	str	r3, [r4, #12]
 8003942:	6665      	str	r5, [r4, #100]	; 0x64
 8003944:	f000 f86c 	bl	8003a20 <__retarget_lock_init_recursive>
 8003948:	f7ff ff96 	bl	8003878 <__sfp_lock_release>
 800394c:	2208      	movs	r2, #8
 800394e:	4629      	mov	r1, r5
 8003950:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003954:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003958:	6025      	str	r5, [r4, #0]
 800395a:	61a5      	str	r5, [r4, #24]
 800395c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003960:	f000 f861 	bl	8003a26 <memset>
 8003964:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003968:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800396c:	4620      	mov	r0, r4
 800396e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003970:	3468      	adds	r4, #104	; 0x68
 8003972:	e7d9      	b.n	8003928 <__sfp+0x1c>
 8003974:	2104      	movs	r1, #4
 8003976:	4638      	mov	r0, r7
 8003978:	f7ff ff62 	bl	8003840 <__sfmoreglue>
 800397c:	4604      	mov	r4, r0
 800397e:	6030      	str	r0, [r6, #0]
 8003980:	2800      	cmp	r0, #0
 8003982:	d1d5      	bne.n	8003930 <__sfp+0x24>
 8003984:	f7ff ff78 	bl	8003878 <__sfp_lock_release>
 8003988:	230c      	movs	r3, #12
 800398a:	603b      	str	r3, [r7, #0]
 800398c:	e7ee      	b.n	800396c <__sfp+0x60>
 800398e:	bf00      	nop
 8003990:	080043e8 	.word	0x080043e8
 8003994:	ffff0001 	.word	0xffff0001

08003998 <_fwalk_reent>:
 8003998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800399c:	4606      	mov	r6, r0
 800399e:	4688      	mov	r8, r1
 80039a0:	2700      	movs	r7, #0
 80039a2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80039a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80039aa:	f1b9 0901 	subs.w	r9, r9, #1
 80039ae:	d505      	bpl.n	80039bc <_fwalk_reent+0x24>
 80039b0:	6824      	ldr	r4, [r4, #0]
 80039b2:	2c00      	cmp	r4, #0
 80039b4:	d1f7      	bne.n	80039a6 <_fwalk_reent+0xe>
 80039b6:	4638      	mov	r0, r7
 80039b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039bc:	89ab      	ldrh	r3, [r5, #12]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d907      	bls.n	80039d2 <_fwalk_reent+0x3a>
 80039c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80039c6:	3301      	adds	r3, #1
 80039c8:	d003      	beq.n	80039d2 <_fwalk_reent+0x3a>
 80039ca:	4629      	mov	r1, r5
 80039cc:	4630      	mov	r0, r6
 80039ce:	47c0      	blx	r8
 80039d0:	4307      	orrs	r7, r0
 80039d2:	3568      	adds	r5, #104	; 0x68
 80039d4:	e7e9      	b.n	80039aa <_fwalk_reent+0x12>
	...

080039d8 <__libc_init_array>:
 80039d8:	b570      	push	{r4, r5, r6, lr}
 80039da:	2600      	movs	r6, #0
 80039dc:	4d0c      	ldr	r5, [pc, #48]	; (8003a10 <__libc_init_array+0x38>)
 80039de:	4c0d      	ldr	r4, [pc, #52]	; (8003a14 <__libc_init_array+0x3c>)
 80039e0:	1b64      	subs	r4, r4, r5
 80039e2:	10a4      	asrs	r4, r4, #2
 80039e4:	42a6      	cmp	r6, r4
 80039e6:	d109      	bne.n	80039fc <__libc_init_array+0x24>
 80039e8:	f000 fc8e 	bl	8004308 <_init>
 80039ec:	2600      	movs	r6, #0
 80039ee:	4d0a      	ldr	r5, [pc, #40]	; (8003a18 <__libc_init_array+0x40>)
 80039f0:	4c0a      	ldr	r4, [pc, #40]	; (8003a1c <__libc_init_array+0x44>)
 80039f2:	1b64      	subs	r4, r4, r5
 80039f4:	10a4      	asrs	r4, r4, #2
 80039f6:	42a6      	cmp	r6, r4
 80039f8:	d105      	bne.n	8003a06 <__libc_init_array+0x2e>
 80039fa:	bd70      	pop	{r4, r5, r6, pc}
 80039fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a00:	4798      	blx	r3
 8003a02:	3601      	adds	r6, #1
 8003a04:	e7ee      	b.n	80039e4 <__libc_init_array+0xc>
 8003a06:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a0a:	4798      	blx	r3
 8003a0c:	3601      	adds	r6, #1
 8003a0e:	e7f2      	b.n	80039f6 <__libc_init_array+0x1e>
 8003a10:	080043f4 	.word	0x080043f4
 8003a14:	080043f4 	.word	0x080043f4
 8003a18:	080043f4 	.word	0x080043f4
 8003a1c:	080043f8 	.word	0x080043f8

08003a20 <__retarget_lock_init_recursive>:
 8003a20:	4770      	bx	lr

08003a22 <__retarget_lock_acquire_recursive>:
 8003a22:	4770      	bx	lr

08003a24 <__retarget_lock_release_recursive>:
 8003a24:	4770      	bx	lr

08003a26 <memset>:
 8003a26:	4603      	mov	r3, r0
 8003a28:	4402      	add	r2, r0
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d100      	bne.n	8003a30 <memset+0xa>
 8003a2e:	4770      	bx	lr
 8003a30:	f803 1b01 	strb.w	r1, [r3], #1
 8003a34:	e7f9      	b.n	8003a2a <memset+0x4>
	...

08003a38 <sbrk_aligned>:
 8003a38:	b570      	push	{r4, r5, r6, lr}
 8003a3a:	4e0e      	ldr	r6, [pc, #56]	; (8003a74 <sbrk_aligned+0x3c>)
 8003a3c:	460c      	mov	r4, r1
 8003a3e:	6831      	ldr	r1, [r6, #0]
 8003a40:	4605      	mov	r5, r0
 8003a42:	b911      	cbnz	r1, 8003a4a <sbrk_aligned+0x12>
 8003a44:	f000 f96c 	bl	8003d20 <_sbrk_r>
 8003a48:	6030      	str	r0, [r6, #0]
 8003a4a:	4621      	mov	r1, r4
 8003a4c:	4628      	mov	r0, r5
 8003a4e:	f000 f967 	bl	8003d20 <_sbrk_r>
 8003a52:	1c43      	adds	r3, r0, #1
 8003a54:	d00a      	beq.n	8003a6c <sbrk_aligned+0x34>
 8003a56:	1cc4      	adds	r4, r0, #3
 8003a58:	f024 0403 	bic.w	r4, r4, #3
 8003a5c:	42a0      	cmp	r0, r4
 8003a5e:	d007      	beq.n	8003a70 <sbrk_aligned+0x38>
 8003a60:	1a21      	subs	r1, r4, r0
 8003a62:	4628      	mov	r0, r5
 8003a64:	f000 f95c 	bl	8003d20 <_sbrk_r>
 8003a68:	3001      	adds	r0, #1
 8003a6a:	d101      	bne.n	8003a70 <sbrk_aligned+0x38>
 8003a6c:	f04f 34ff 	mov.w	r4, #4294967295
 8003a70:	4620      	mov	r0, r4
 8003a72:	bd70      	pop	{r4, r5, r6, pc}
 8003a74:	2000112c 	.word	0x2000112c

08003a78 <_malloc_r>:
 8003a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a7c:	1ccd      	adds	r5, r1, #3
 8003a7e:	f025 0503 	bic.w	r5, r5, #3
 8003a82:	3508      	adds	r5, #8
 8003a84:	2d0c      	cmp	r5, #12
 8003a86:	bf38      	it	cc
 8003a88:	250c      	movcc	r5, #12
 8003a8a:	2d00      	cmp	r5, #0
 8003a8c:	4607      	mov	r7, r0
 8003a8e:	db01      	blt.n	8003a94 <_malloc_r+0x1c>
 8003a90:	42a9      	cmp	r1, r5
 8003a92:	d905      	bls.n	8003aa0 <_malloc_r+0x28>
 8003a94:	230c      	movs	r3, #12
 8003a96:	2600      	movs	r6, #0
 8003a98:	603b      	str	r3, [r7, #0]
 8003a9a:	4630      	mov	r0, r6
 8003a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003aa0:	4e2e      	ldr	r6, [pc, #184]	; (8003b5c <_malloc_r+0xe4>)
 8003aa2:	f000 fba9 	bl	80041f8 <__malloc_lock>
 8003aa6:	6833      	ldr	r3, [r6, #0]
 8003aa8:	461c      	mov	r4, r3
 8003aaa:	bb34      	cbnz	r4, 8003afa <_malloc_r+0x82>
 8003aac:	4629      	mov	r1, r5
 8003aae:	4638      	mov	r0, r7
 8003ab0:	f7ff ffc2 	bl	8003a38 <sbrk_aligned>
 8003ab4:	1c43      	adds	r3, r0, #1
 8003ab6:	4604      	mov	r4, r0
 8003ab8:	d14d      	bne.n	8003b56 <_malloc_r+0xde>
 8003aba:	6834      	ldr	r4, [r6, #0]
 8003abc:	4626      	mov	r6, r4
 8003abe:	2e00      	cmp	r6, #0
 8003ac0:	d140      	bne.n	8003b44 <_malloc_r+0xcc>
 8003ac2:	6823      	ldr	r3, [r4, #0]
 8003ac4:	4631      	mov	r1, r6
 8003ac6:	4638      	mov	r0, r7
 8003ac8:	eb04 0803 	add.w	r8, r4, r3
 8003acc:	f000 f928 	bl	8003d20 <_sbrk_r>
 8003ad0:	4580      	cmp	r8, r0
 8003ad2:	d13a      	bne.n	8003b4a <_malloc_r+0xd2>
 8003ad4:	6821      	ldr	r1, [r4, #0]
 8003ad6:	3503      	adds	r5, #3
 8003ad8:	1a6d      	subs	r5, r5, r1
 8003ada:	f025 0503 	bic.w	r5, r5, #3
 8003ade:	3508      	adds	r5, #8
 8003ae0:	2d0c      	cmp	r5, #12
 8003ae2:	bf38      	it	cc
 8003ae4:	250c      	movcc	r5, #12
 8003ae6:	4638      	mov	r0, r7
 8003ae8:	4629      	mov	r1, r5
 8003aea:	f7ff ffa5 	bl	8003a38 <sbrk_aligned>
 8003aee:	3001      	adds	r0, #1
 8003af0:	d02b      	beq.n	8003b4a <_malloc_r+0xd2>
 8003af2:	6823      	ldr	r3, [r4, #0]
 8003af4:	442b      	add	r3, r5
 8003af6:	6023      	str	r3, [r4, #0]
 8003af8:	e00e      	b.n	8003b18 <_malloc_r+0xa0>
 8003afa:	6822      	ldr	r2, [r4, #0]
 8003afc:	1b52      	subs	r2, r2, r5
 8003afe:	d41e      	bmi.n	8003b3e <_malloc_r+0xc6>
 8003b00:	2a0b      	cmp	r2, #11
 8003b02:	d916      	bls.n	8003b32 <_malloc_r+0xba>
 8003b04:	1961      	adds	r1, r4, r5
 8003b06:	42a3      	cmp	r3, r4
 8003b08:	6025      	str	r5, [r4, #0]
 8003b0a:	bf18      	it	ne
 8003b0c:	6059      	strne	r1, [r3, #4]
 8003b0e:	6863      	ldr	r3, [r4, #4]
 8003b10:	bf08      	it	eq
 8003b12:	6031      	streq	r1, [r6, #0]
 8003b14:	5162      	str	r2, [r4, r5]
 8003b16:	604b      	str	r3, [r1, #4]
 8003b18:	4638      	mov	r0, r7
 8003b1a:	f104 060b 	add.w	r6, r4, #11
 8003b1e:	f000 fb71 	bl	8004204 <__malloc_unlock>
 8003b22:	f026 0607 	bic.w	r6, r6, #7
 8003b26:	1d23      	adds	r3, r4, #4
 8003b28:	1af2      	subs	r2, r6, r3
 8003b2a:	d0b6      	beq.n	8003a9a <_malloc_r+0x22>
 8003b2c:	1b9b      	subs	r3, r3, r6
 8003b2e:	50a3      	str	r3, [r4, r2]
 8003b30:	e7b3      	b.n	8003a9a <_malloc_r+0x22>
 8003b32:	6862      	ldr	r2, [r4, #4]
 8003b34:	42a3      	cmp	r3, r4
 8003b36:	bf0c      	ite	eq
 8003b38:	6032      	streq	r2, [r6, #0]
 8003b3a:	605a      	strne	r2, [r3, #4]
 8003b3c:	e7ec      	b.n	8003b18 <_malloc_r+0xa0>
 8003b3e:	4623      	mov	r3, r4
 8003b40:	6864      	ldr	r4, [r4, #4]
 8003b42:	e7b2      	b.n	8003aaa <_malloc_r+0x32>
 8003b44:	4634      	mov	r4, r6
 8003b46:	6876      	ldr	r6, [r6, #4]
 8003b48:	e7b9      	b.n	8003abe <_malloc_r+0x46>
 8003b4a:	230c      	movs	r3, #12
 8003b4c:	4638      	mov	r0, r7
 8003b4e:	603b      	str	r3, [r7, #0]
 8003b50:	f000 fb58 	bl	8004204 <__malloc_unlock>
 8003b54:	e7a1      	b.n	8003a9a <_malloc_r+0x22>
 8003b56:	6025      	str	r5, [r4, #0]
 8003b58:	e7de      	b.n	8003b18 <_malloc_r+0xa0>
 8003b5a:	bf00      	nop
 8003b5c:	20001128 	.word	0x20001128

08003b60 <_puts_r>:
 8003b60:	b570      	push	{r4, r5, r6, lr}
 8003b62:	460e      	mov	r6, r1
 8003b64:	4605      	mov	r5, r0
 8003b66:	b118      	cbz	r0, 8003b70 <_puts_r+0x10>
 8003b68:	6983      	ldr	r3, [r0, #24]
 8003b6a:	b90b      	cbnz	r3, 8003b70 <_puts_r+0x10>
 8003b6c:	f7ff fe96 	bl	800389c <__sinit>
 8003b70:	69ab      	ldr	r3, [r5, #24]
 8003b72:	68ac      	ldr	r4, [r5, #8]
 8003b74:	b913      	cbnz	r3, 8003b7c <_puts_r+0x1c>
 8003b76:	4628      	mov	r0, r5
 8003b78:	f7ff fe90 	bl	800389c <__sinit>
 8003b7c:	4b2c      	ldr	r3, [pc, #176]	; (8003c30 <_puts_r+0xd0>)
 8003b7e:	429c      	cmp	r4, r3
 8003b80:	d120      	bne.n	8003bc4 <_puts_r+0x64>
 8003b82:	686c      	ldr	r4, [r5, #4]
 8003b84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b86:	07db      	lsls	r3, r3, #31
 8003b88:	d405      	bmi.n	8003b96 <_puts_r+0x36>
 8003b8a:	89a3      	ldrh	r3, [r4, #12]
 8003b8c:	0598      	lsls	r0, r3, #22
 8003b8e:	d402      	bmi.n	8003b96 <_puts_r+0x36>
 8003b90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b92:	f7ff ff46 	bl	8003a22 <__retarget_lock_acquire_recursive>
 8003b96:	89a3      	ldrh	r3, [r4, #12]
 8003b98:	0719      	lsls	r1, r3, #28
 8003b9a:	d51d      	bpl.n	8003bd8 <_puts_r+0x78>
 8003b9c:	6923      	ldr	r3, [r4, #16]
 8003b9e:	b1db      	cbz	r3, 8003bd8 <_puts_r+0x78>
 8003ba0:	3e01      	subs	r6, #1
 8003ba2:	68a3      	ldr	r3, [r4, #8]
 8003ba4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	60a3      	str	r3, [r4, #8]
 8003bac:	bb39      	cbnz	r1, 8003bfe <_puts_r+0x9e>
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	da38      	bge.n	8003c24 <_puts_r+0xc4>
 8003bb2:	4622      	mov	r2, r4
 8003bb4:	210a      	movs	r1, #10
 8003bb6:	4628      	mov	r0, r5
 8003bb8:	f000 f906 	bl	8003dc8 <__swbuf_r>
 8003bbc:	3001      	adds	r0, #1
 8003bbe:	d011      	beq.n	8003be4 <_puts_r+0x84>
 8003bc0:	250a      	movs	r5, #10
 8003bc2:	e011      	b.n	8003be8 <_puts_r+0x88>
 8003bc4:	4b1b      	ldr	r3, [pc, #108]	; (8003c34 <_puts_r+0xd4>)
 8003bc6:	429c      	cmp	r4, r3
 8003bc8:	d101      	bne.n	8003bce <_puts_r+0x6e>
 8003bca:	68ac      	ldr	r4, [r5, #8]
 8003bcc:	e7da      	b.n	8003b84 <_puts_r+0x24>
 8003bce:	4b1a      	ldr	r3, [pc, #104]	; (8003c38 <_puts_r+0xd8>)
 8003bd0:	429c      	cmp	r4, r3
 8003bd2:	bf08      	it	eq
 8003bd4:	68ec      	ldreq	r4, [r5, #12]
 8003bd6:	e7d5      	b.n	8003b84 <_puts_r+0x24>
 8003bd8:	4621      	mov	r1, r4
 8003bda:	4628      	mov	r0, r5
 8003bdc:	f000 f958 	bl	8003e90 <__swsetup_r>
 8003be0:	2800      	cmp	r0, #0
 8003be2:	d0dd      	beq.n	8003ba0 <_puts_r+0x40>
 8003be4:	f04f 35ff 	mov.w	r5, #4294967295
 8003be8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003bea:	07da      	lsls	r2, r3, #31
 8003bec:	d405      	bmi.n	8003bfa <_puts_r+0x9a>
 8003bee:	89a3      	ldrh	r3, [r4, #12]
 8003bf0:	059b      	lsls	r3, r3, #22
 8003bf2:	d402      	bmi.n	8003bfa <_puts_r+0x9a>
 8003bf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bf6:	f7ff ff15 	bl	8003a24 <__retarget_lock_release_recursive>
 8003bfa:	4628      	mov	r0, r5
 8003bfc:	bd70      	pop	{r4, r5, r6, pc}
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	da04      	bge.n	8003c0c <_puts_r+0xac>
 8003c02:	69a2      	ldr	r2, [r4, #24]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	dc06      	bgt.n	8003c16 <_puts_r+0xb6>
 8003c08:	290a      	cmp	r1, #10
 8003c0a:	d004      	beq.n	8003c16 <_puts_r+0xb6>
 8003c0c:	6823      	ldr	r3, [r4, #0]
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	6022      	str	r2, [r4, #0]
 8003c12:	7019      	strb	r1, [r3, #0]
 8003c14:	e7c5      	b.n	8003ba2 <_puts_r+0x42>
 8003c16:	4622      	mov	r2, r4
 8003c18:	4628      	mov	r0, r5
 8003c1a:	f000 f8d5 	bl	8003dc8 <__swbuf_r>
 8003c1e:	3001      	adds	r0, #1
 8003c20:	d1bf      	bne.n	8003ba2 <_puts_r+0x42>
 8003c22:	e7df      	b.n	8003be4 <_puts_r+0x84>
 8003c24:	250a      	movs	r5, #10
 8003c26:	6823      	ldr	r3, [r4, #0]
 8003c28:	1c5a      	adds	r2, r3, #1
 8003c2a:	6022      	str	r2, [r4, #0]
 8003c2c:	701d      	strb	r5, [r3, #0]
 8003c2e:	e7db      	b.n	8003be8 <_puts_r+0x88>
 8003c30:	080043a8 	.word	0x080043a8
 8003c34:	080043c8 	.word	0x080043c8
 8003c38:	08004388 	.word	0x08004388

08003c3c <puts>:
 8003c3c:	4b02      	ldr	r3, [pc, #8]	; (8003c48 <puts+0xc>)
 8003c3e:	4601      	mov	r1, r0
 8003c40:	6818      	ldr	r0, [r3, #0]
 8003c42:	f7ff bf8d 	b.w	8003b60 <_puts_r>
 8003c46:	bf00      	nop
 8003c48:	20000010 	.word	0x20000010

08003c4c <cleanup_glue>:
 8003c4c:	b538      	push	{r3, r4, r5, lr}
 8003c4e:	460c      	mov	r4, r1
 8003c50:	6809      	ldr	r1, [r1, #0]
 8003c52:	4605      	mov	r5, r0
 8003c54:	b109      	cbz	r1, 8003c5a <cleanup_glue+0xe>
 8003c56:	f7ff fff9 	bl	8003c4c <cleanup_glue>
 8003c5a:	4621      	mov	r1, r4
 8003c5c:	4628      	mov	r0, r5
 8003c5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c62:	f000 bad5 	b.w	8004210 <_free_r>
	...

08003c68 <_reclaim_reent>:
 8003c68:	4b2c      	ldr	r3, [pc, #176]	; (8003d1c <_reclaim_reent+0xb4>)
 8003c6a:	b570      	push	{r4, r5, r6, lr}
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4604      	mov	r4, r0
 8003c70:	4283      	cmp	r3, r0
 8003c72:	d051      	beq.n	8003d18 <_reclaim_reent+0xb0>
 8003c74:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003c76:	b143      	cbz	r3, 8003c8a <_reclaim_reent+0x22>
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d14a      	bne.n	8003d14 <_reclaim_reent+0xac>
 8003c7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c80:	6819      	ldr	r1, [r3, #0]
 8003c82:	b111      	cbz	r1, 8003c8a <_reclaim_reent+0x22>
 8003c84:	4620      	mov	r0, r4
 8003c86:	f000 fac3 	bl	8004210 <_free_r>
 8003c8a:	6961      	ldr	r1, [r4, #20]
 8003c8c:	b111      	cbz	r1, 8003c94 <_reclaim_reent+0x2c>
 8003c8e:	4620      	mov	r0, r4
 8003c90:	f000 fabe 	bl	8004210 <_free_r>
 8003c94:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003c96:	b111      	cbz	r1, 8003c9e <_reclaim_reent+0x36>
 8003c98:	4620      	mov	r0, r4
 8003c9a:	f000 fab9 	bl	8004210 <_free_r>
 8003c9e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003ca0:	b111      	cbz	r1, 8003ca8 <_reclaim_reent+0x40>
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	f000 fab4 	bl	8004210 <_free_r>
 8003ca8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003caa:	b111      	cbz	r1, 8003cb2 <_reclaim_reent+0x4a>
 8003cac:	4620      	mov	r0, r4
 8003cae:	f000 faaf 	bl	8004210 <_free_r>
 8003cb2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003cb4:	b111      	cbz	r1, 8003cbc <_reclaim_reent+0x54>
 8003cb6:	4620      	mov	r0, r4
 8003cb8:	f000 faaa 	bl	8004210 <_free_r>
 8003cbc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003cbe:	b111      	cbz	r1, 8003cc6 <_reclaim_reent+0x5e>
 8003cc0:	4620      	mov	r0, r4
 8003cc2:	f000 faa5 	bl	8004210 <_free_r>
 8003cc6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003cc8:	b111      	cbz	r1, 8003cd0 <_reclaim_reent+0x68>
 8003cca:	4620      	mov	r0, r4
 8003ccc:	f000 faa0 	bl	8004210 <_free_r>
 8003cd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cd2:	b111      	cbz	r1, 8003cda <_reclaim_reent+0x72>
 8003cd4:	4620      	mov	r0, r4
 8003cd6:	f000 fa9b 	bl	8004210 <_free_r>
 8003cda:	69a3      	ldr	r3, [r4, #24]
 8003cdc:	b1e3      	cbz	r3, 8003d18 <_reclaim_reent+0xb0>
 8003cde:	4620      	mov	r0, r4
 8003ce0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003ce2:	4798      	blx	r3
 8003ce4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003ce6:	b1b9      	cbz	r1, 8003d18 <_reclaim_reent+0xb0>
 8003ce8:	4620      	mov	r0, r4
 8003cea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003cee:	f7ff bfad 	b.w	8003c4c <cleanup_glue>
 8003cf2:	5949      	ldr	r1, [r1, r5]
 8003cf4:	b941      	cbnz	r1, 8003d08 <_reclaim_reent+0xa0>
 8003cf6:	3504      	adds	r5, #4
 8003cf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cfa:	2d80      	cmp	r5, #128	; 0x80
 8003cfc:	68d9      	ldr	r1, [r3, #12]
 8003cfe:	d1f8      	bne.n	8003cf2 <_reclaim_reent+0x8a>
 8003d00:	4620      	mov	r0, r4
 8003d02:	f000 fa85 	bl	8004210 <_free_r>
 8003d06:	e7ba      	b.n	8003c7e <_reclaim_reent+0x16>
 8003d08:	680e      	ldr	r6, [r1, #0]
 8003d0a:	4620      	mov	r0, r4
 8003d0c:	f000 fa80 	bl	8004210 <_free_r>
 8003d10:	4631      	mov	r1, r6
 8003d12:	e7ef      	b.n	8003cf4 <_reclaim_reent+0x8c>
 8003d14:	2500      	movs	r5, #0
 8003d16:	e7ef      	b.n	8003cf8 <_reclaim_reent+0x90>
 8003d18:	bd70      	pop	{r4, r5, r6, pc}
 8003d1a:	bf00      	nop
 8003d1c:	20000010 	.word	0x20000010

08003d20 <_sbrk_r>:
 8003d20:	b538      	push	{r3, r4, r5, lr}
 8003d22:	2300      	movs	r3, #0
 8003d24:	4d05      	ldr	r5, [pc, #20]	; (8003d3c <_sbrk_r+0x1c>)
 8003d26:	4604      	mov	r4, r0
 8003d28:	4608      	mov	r0, r1
 8003d2a:	602b      	str	r3, [r5, #0]
 8003d2c:	f7fc feb2 	bl	8000a94 <_sbrk>
 8003d30:	1c43      	adds	r3, r0, #1
 8003d32:	d102      	bne.n	8003d3a <_sbrk_r+0x1a>
 8003d34:	682b      	ldr	r3, [r5, #0]
 8003d36:	b103      	cbz	r3, 8003d3a <_sbrk_r+0x1a>
 8003d38:	6023      	str	r3, [r4, #0]
 8003d3a:	bd38      	pop	{r3, r4, r5, pc}
 8003d3c:	20001130 	.word	0x20001130

08003d40 <__sread>:
 8003d40:	b510      	push	{r4, lr}
 8003d42:	460c      	mov	r4, r1
 8003d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d48:	f000 faaa 	bl	80042a0 <_read_r>
 8003d4c:	2800      	cmp	r0, #0
 8003d4e:	bfab      	itete	ge
 8003d50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003d52:	89a3      	ldrhlt	r3, [r4, #12]
 8003d54:	181b      	addge	r3, r3, r0
 8003d56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003d5a:	bfac      	ite	ge
 8003d5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003d5e:	81a3      	strhlt	r3, [r4, #12]
 8003d60:	bd10      	pop	{r4, pc}

08003d62 <__swrite>:
 8003d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d66:	461f      	mov	r7, r3
 8003d68:	898b      	ldrh	r3, [r1, #12]
 8003d6a:	4605      	mov	r5, r0
 8003d6c:	05db      	lsls	r3, r3, #23
 8003d6e:	460c      	mov	r4, r1
 8003d70:	4616      	mov	r6, r2
 8003d72:	d505      	bpl.n	8003d80 <__swrite+0x1e>
 8003d74:	2302      	movs	r3, #2
 8003d76:	2200      	movs	r2, #0
 8003d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d7c:	f000 f9c4 	bl	8004108 <_lseek_r>
 8003d80:	89a3      	ldrh	r3, [r4, #12]
 8003d82:	4632      	mov	r2, r6
 8003d84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d88:	81a3      	strh	r3, [r4, #12]
 8003d8a:	4628      	mov	r0, r5
 8003d8c:	463b      	mov	r3, r7
 8003d8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d96:	f000 b869 	b.w	8003e6c <_write_r>

08003d9a <__sseek>:
 8003d9a:	b510      	push	{r4, lr}
 8003d9c:	460c      	mov	r4, r1
 8003d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003da2:	f000 f9b1 	bl	8004108 <_lseek_r>
 8003da6:	1c43      	adds	r3, r0, #1
 8003da8:	89a3      	ldrh	r3, [r4, #12]
 8003daa:	bf15      	itete	ne
 8003dac:	6560      	strne	r0, [r4, #84]	; 0x54
 8003dae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003db2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003db6:	81a3      	strheq	r3, [r4, #12]
 8003db8:	bf18      	it	ne
 8003dba:	81a3      	strhne	r3, [r4, #12]
 8003dbc:	bd10      	pop	{r4, pc}

08003dbe <__sclose>:
 8003dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dc2:	f000 b8d3 	b.w	8003f6c <_close_r>
	...

08003dc8 <__swbuf_r>:
 8003dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dca:	460e      	mov	r6, r1
 8003dcc:	4614      	mov	r4, r2
 8003dce:	4605      	mov	r5, r0
 8003dd0:	b118      	cbz	r0, 8003dda <__swbuf_r+0x12>
 8003dd2:	6983      	ldr	r3, [r0, #24]
 8003dd4:	b90b      	cbnz	r3, 8003dda <__swbuf_r+0x12>
 8003dd6:	f7ff fd61 	bl	800389c <__sinit>
 8003dda:	4b21      	ldr	r3, [pc, #132]	; (8003e60 <__swbuf_r+0x98>)
 8003ddc:	429c      	cmp	r4, r3
 8003dde:	d12b      	bne.n	8003e38 <__swbuf_r+0x70>
 8003de0:	686c      	ldr	r4, [r5, #4]
 8003de2:	69a3      	ldr	r3, [r4, #24]
 8003de4:	60a3      	str	r3, [r4, #8]
 8003de6:	89a3      	ldrh	r3, [r4, #12]
 8003de8:	071a      	lsls	r2, r3, #28
 8003dea:	d52f      	bpl.n	8003e4c <__swbuf_r+0x84>
 8003dec:	6923      	ldr	r3, [r4, #16]
 8003dee:	b36b      	cbz	r3, 8003e4c <__swbuf_r+0x84>
 8003df0:	6923      	ldr	r3, [r4, #16]
 8003df2:	6820      	ldr	r0, [r4, #0]
 8003df4:	b2f6      	uxtb	r6, r6
 8003df6:	1ac0      	subs	r0, r0, r3
 8003df8:	6963      	ldr	r3, [r4, #20]
 8003dfa:	4637      	mov	r7, r6
 8003dfc:	4283      	cmp	r3, r0
 8003dfe:	dc04      	bgt.n	8003e0a <__swbuf_r+0x42>
 8003e00:	4621      	mov	r1, r4
 8003e02:	4628      	mov	r0, r5
 8003e04:	f000 f944 	bl	8004090 <_fflush_r>
 8003e08:	bb30      	cbnz	r0, 8003e58 <__swbuf_r+0x90>
 8003e0a:	68a3      	ldr	r3, [r4, #8]
 8003e0c:	3001      	adds	r0, #1
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	60a3      	str	r3, [r4, #8]
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	6022      	str	r2, [r4, #0]
 8003e18:	701e      	strb	r6, [r3, #0]
 8003e1a:	6963      	ldr	r3, [r4, #20]
 8003e1c:	4283      	cmp	r3, r0
 8003e1e:	d004      	beq.n	8003e2a <__swbuf_r+0x62>
 8003e20:	89a3      	ldrh	r3, [r4, #12]
 8003e22:	07db      	lsls	r3, r3, #31
 8003e24:	d506      	bpl.n	8003e34 <__swbuf_r+0x6c>
 8003e26:	2e0a      	cmp	r6, #10
 8003e28:	d104      	bne.n	8003e34 <__swbuf_r+0x6c>
 8003e2a:	4621      	mov	r1, r4
 8003e2c:	4628      	mov	r0, r5
 8003e2e:	f000 f92f 	bl	8004090 <_fflush_r>
 8003e32:	b988      	cbnz	r0, 8003e58 <__swbuf_r+0x90>
 8003e34:	4638      	mov	r0, r7
 8003e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e38:	4b0a      	ldr	r3, [pc, #40]	; (8003e64 <__swbuf_r+0x9c>)
 8003e3a:	429c      	cmp	r4, r3
 8003e3c:	d101      	bne.n	8003e42 <__swbuf_r+0x7a>
 8003e3e:	68ac      	ldr	r4, [r5, #8]
 8003e40:	e7cf      	b.n	8003de2 <__swbuf_r+0x1a>
 8003e42:	4b09      	ldr	r3, [pc, #36]	; (8003e68 <__swbuf_r+0xa0>)
 8003e44:	429c      	cmp	r4, r3
 8003e46:	bf08      	it	eq
 8003e48:	68ec      	ldreq	r4, [r5, #12]
 8003e4a:	e7ca      	b.n	8003de2 <__swbuf_r+0x1a>
 8003e4c:	4621      	mov	r1, r4
 8003e4e:	4628      	mov	r0, r5
 8003e50:	f000 f81e 	bl	8003e90 <__swsetup_r>
 8003e54:	2800      	cmp	r0, #0
 8003e56:	d0cb      	beq.n	8003df0 <__swbuf_r+0x28>
 8003e58:	f04f 37ff 	mov.w	r7, #4294967295
 8003e5c:	e7ea      	b.n	8003e34 <__swbuf_r+0x6c>
 8003e5e:	bf00      	nop
 8003e60:	080043a8 	.word	0x080043a8
 8003e64:	080043c8 	.word	0x080043c8
 8003e68:	08004388 	.word	0x08004388

08003e6c <_write_r>:
 8003e6c:	b538      	push	{r3, r4, r5, lr}
 8003e6e:	4604      	mov	r4, r0
 8003e70:	4608      	mov	r0, r1
 8003e72:	4611      	mov	r1, r2
 8003e74:	2200      	movs	r2, #0
 8003e76:	4d05      	ldr	r5, [pc, #20]	; (8003e8c <_write_r+0x20>)
 8003e78:	602a      	str	r2, [r5, #0]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f7fc fb42 	bl	8000504 <_write>
 8003e80:	1c43      	adds	r3, r0, #1
 8003e82:	d102      	bne.n	8003e8a <_write_r+0x1e>
 8003e84:	682b      	ldr	r3, [r5, #0]
 8003e86:	b103      	cbz	r3, 8003e8a <_write_r+0x1e>
 8003e88:	6023      	str	r3, [r4, #0]
 8003e8a:	bd38      	pop	{r3, r4, r5, pc}
 8003e8c:	20001130 	.word	0x20001130

08003e90 <__swsetup_r>:
 8003e90:	4b32      	ldr	r3, [pc, #200]	; (8003f5c <__swsetup_r+0xcc>)
 8003e92:	b570      	push	{r4, r5, r6, lr}
 8003e94:	681d      	ldr	r5, [r3, #0]
 8003e96:	4606      	mov	r6, r0
 8003e98:	460c      	mov	r4, r1
 8003e9a:	b125      	cbz	r5, 8003ea6 <__swsetup_r+0x16>
 8003e9c:	69ab      	ldr	r3, [r5, #24]
 8003e9e:	b913      	cbnz	r3, 8003ea6 <__swsetup_r+0x16>
 8003ea0:	4628      	mov	r0, r5
 8003ea2:	f7ff fcfb 	bl	800389c <__sinit>
 8003ea6:	4b2e      	ldr	r3, [pc, #184]	; (8003f60 <__swsetup_r+0xd0>)
 8003ea8:	429c      	cmp	r4, r3
 8003eaa:	d10f      	bne.n	8003ecc <__swsetup_r+0x3c>
 8003eac:	686c      	ldr	r4, [r5, #4]
 8003eae:	89a3      	ldrh	r3, [r4, #12]
 8003eb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003eb4:	0719      	lsls	r1, r3, #28
 8003eb6:	d42c      	bmi.n	8003f12 <__swsetup_r+0x82>
 8003eb8:	06dd      	lsls	r5, r3, #27
 8003eba:	d411      	bmi.n	8003ee0 <__swsetup_r+0x50>
 8003ebc:	2309      	movs	r3, #9
 8003ebe:	6033      	str	r3, [r6, #0]
 8003ec0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec8:	81a3      	strh	r3, [r4, #12]
 8003eca:	e03e      	b.n	8003f4a <__swsetup_r+0xba>
 8003ecc:	4b25      	ldr	r3, [pc, #148]	; (8003f64 <__swsetup_r+0xd4>)
 8003ece:	429c      	cmp	r4, r3
 8003ed0:	d101      	bne.n	8003ed6 <__swsetup_r+0x46>
 8003ed2:	68ac      	ldr	r4, [r5, #8]
 8003ed4:	e7eb      	b.n	8003eae <__swsetup_r+0x1e>
 8003ed6:	4b24      	ldr	r3, [pc, #144]	; (8003f68 <__swsetup_r+0xd8>)
 8003ed8:	429c      	cmp	r4, r3
 8003eda:	bf08      	it	eq
 8003edc:	68ec      	ldreq	r4, [r5, #12]
 8003ede:	e7e6      	b.n	8003eae <__swsetup_r+0x1e>
 8003ee0:	0758      	lsls	r0, r3, #29
 8003ee2:	d512      	bpl.n	8003f0a <__swsetup_r+0x7a>
 8003ee4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ee6:	b141      	cbz	r1, 8003efa <__swsetup_r+0x6a>
 8003ee8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003eec:	4299      	cmp	r1, r3
 8003eee:	d002      	beq.n	8003ef6 <__swsetup_r+0x66>
 8003ef0:	4630      	mov	r0, r6
 8003ef2:	f000 f98d 	bl	8004210 <_free_r>
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	6363      	str	r3, [r4, #52]	; 0x34
 8003efa:	89a3      	ldrh	r3, [r4, #12]
 8003efc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003f00:	81a3      	strh	r3, [r4, #12]
 8003f02:	2300      	movs	r3, #0
 8003f04:	6063      	str	r3, [r4, #4]
 8003f06:	6923      	ldr	r3, [r4, #16]
 8003f08:	6023      	str	r3, [r4, #0]
 8003f0a:	89a3      	ldrh	r3, [r4, #12]
 8003f0c:	f043 0308 	orr.w	r3, r3, #8
 8003f10:	81a3      	strh	r3, [r4, #12]
 8003f12:	6923      	ldr	r3, [r4, #16]
 8003f14:	b94b      	cbnz	r3, 8003f2a <__swsetup_r+0x9a>
 8003f16:	89a3      	ldrh	r3, [r4, #12]
 8003f18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f20:	d003      	beq.n	8003f2a <__swsetup_r+0x9a>
 8003f22:	4621      	mov	r1, r4
 8003f24:	4630      	mov	r0, r6
 8003f26:	f000 f927 	bl	8004178 <__smakebuf_r>
 8003f2a:	89a0      	ldrh	r0, [r4, #12]
 8003f2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f30:	f010 0301 	ands.w	r3, r0, #1
 8003f34:	d00a      	beq.n	8003f4c <__swsetup_r+0xbc>
 8003f36:	2300      	movs	r3, #0
 8003f38:	60a3      	str	r3, [r4, #8]
 8003f3a:	6963      	ldr	r3, [r4, #20]
 8003f3c:	425b      	negs	r3, r3
 8003f3e:	61a3      	str	r3, [r4, #24]
 8003f40:	6923      	ldr	r3, [r4, #16]
 8003f42:	b943      	cbnz	r3, 8003f56 <__swsetup_r+0xc6>
 8003f44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003f48:	d1ba      	bne.n	8003ec0 <__swsetup_r+0x30>
 8003f4a:	bd70      	pop	{r4, r5, r6, pc}
 8003f4c:	0781      	lsls	r1, r0, #30
 8003f4e:	bf58      	it	pl
 8003f50:	6963      	ldrpl	r3, [r4, #20]
 8003f52:	60a3      	str	r3, [r4, #8]
 8003f54:	e7f4      	b.n	8003f40 <__swsetup_r+0xb0>
 8003f56:	2000      	movs	r0, #0
 8003f58:	e7f7      	b.n	8003f4a <__swsetup_r+0xba>
 8003f5a:	bf00      	nop
 8003f5c:	20000010 	.word	0x20000010
 8003f60:	080043a8 	.word	0x080043a8
 8003f64:	080043c8 	.word	0x080043c8
 8003f68:	08004388 	.word	0x08004388

08003f6c <_close_r>:
 8003f6c:	b538      	push	{r3, r4, r5, lr}
 8003f6e:	2300      	movs	r3, #0
 8003f70:	4d05      	ldr	r5, [pc, #20]	; (8003f88 <_close_r+0x1c>)
 8003f72:	4604      	mov	r4, r0
 8003f74:	4608      	mov	r0, r1
 8003f76:	602b      	str	r3, [r5, #0]
 8003f78:	f7fc fd5b 	bl	8000a32 <_close>
 8003f7c:	1c43      	adds	r3, r0, #1
 8003f7e:	d102      	bne.n	8003f86 <_close_r+0x1a>
 8003f80:	682b      	ldr	r3, [r5, #0]
 8003f82:	b103      	cbz	r3, 8003f86 <_close_r+0x1a>
 8003f84:	6023      	str	r3, [r4, #0]
 8003f86:	bd38      	pop	{r3, r4, r5, pc}
 8003f88:	20001130 	.word	0x20001130

08003f8c <__sflush_r>:
 8003f8c:	898a      	ldrh	r2, [r1, #12]
 8003f8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f90:	4605      	mov	r5, r0
 8003f92:	0710      	lsls	r0, r2, #28
 8003f94:	460c      	mov	r4, r1
 8003f96:	d457      	bmi.n	8004048 <__sflush_r+0xbc>
 8003f98:	684b      	ldr	r3, [r1, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	dc04      	bgt.n	8003fa8 <__sflush_r+0x1c>
 8003f9e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	dc01      	bgt.n	8003fa8 <__sflush_r+0x1c>
 8003fa4:	2000      	movs	r0, #0
 8003fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fa8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003faa:	2e00      	cmp	r6, #0
 8003fac:	d0fa      	beq.n	8003fa4 <__sflush_r+0x18>
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003fb4:	682f      	ldr	r7, [r5, #0]
 8003fb6:	602b      	str	r3, [r5, #0]
 8003fb8:	d032      	beq.n	8004020 <__sflush_r+0x94>
 8003fba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003fbc:	89a3      	ldrh	r3, [r4, #12]
 8003fbe:	075a      	lsls	r2, r3, #29
 8003fc0:	d505      	bpl.n	8003fce <__sflush_r+0x42>
 8003fc2:	6863      	ldr	r3, [r4, #4]
 8003fc4:	1ac0      	subs	r0, r0, r3
 8003fc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003fc8:	b10b      	cbz	r3, 8003fce <__sflush_r+0x42>
 8003fca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fcc:	1ac0      	subs	r0, r0, r3
 8003fce:	2300      	movs	r3, #0
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003fd4:	4628      	mov	r0, r5
 8003fd6:	6a21      	ldr	r1, [r4, #32]
 8003fd8:	47b0      	blx	r6
 8003fda:	1c43      	adds	r3, r0, #1
 8003fdc:	89a3      	ldrh	r3, [r4, #12]
 8003fde:	d106      	bne.n	8003fee <__sflush_r+0x62>
 8003fe0:	6829      	ldr	r1, [r5, #0]
 8003fe2:	291d      	cmp	r1, #29
 8003fe4:	d82c      	bhi.n	8004040 <__sflush_r+0xb4>
 8003fe6:	4a29      	ldr	r2, [pc, #164]	; (800408c <__sflush_r+0x100>)
 8003fe8:	40ca      	lsrs	r2, r1
 8003fea:	07d6      	lsls	r6, r2, #31
 8003fec:	d528      	bpl.n	8004040 <__sflush_r+0xb4>
 8003fee:	2200      	movs	r2, #0
 8003ff0:	6062      	str	r2, [r4, #4]
 8003ff2:	6922      	ldr	r2, [r4, #16]
 8003ff4:	04d9      	lsls	r1, r3, #19
 8003ff6:	6022      	str	r2, [r4, #0]
 8003ff8:	d504      	bpl.n	8004004 <__sflush_r+0x78>
 8003ffa:	1c42      	adds	r2, r0, #1
 8003ffc:	d101      	bne.n	8004002 <__sflush_r+0x76>
 8003ffe:	682b      	ldr	r3, [r5, #0]
 8004000:	b903      	cbnz	r3, 8004004 <__sflush_r+0x78>
 8004002:	6560      	str	r0, [r4, #84]	; 0x54
 8004004:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004006:	602f      	str	r7, [r5, #0]
 8004008:	2900      	cmp	r1, #0
 800400a:	d0cb      	beq.n	8003fa4 <__sflush_r+0x18>
 800400c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004010:	4299      	cmp	r1, r3
 8004012:	d002      	beq.n	800401a <__sflush_r+0x8e>
 8004014:	4628      	mov	r0, r5
 8004016:	f000 f8fb 	bl	8004210 <_free_r>
 800401a:	2000      	movs	r0, #0
 800401c:	6360      	str	r0, [r4, #52]	; 0x34
 800401e:	e7c2      	b.n	8003fa6 <__sflush_r+0x1a>
 8004020:	6a21      	ldr	r1, [r4, #32]
 8004022:	2301      	movs	r3, #1
 8004024:	4628      	mov	r0, r5
 8004026:	47b0      	blx	r6
 8004028:	1c41      	adds	r1, r0, #1
 800402a:	d1c7      	bne.n	8003fbc <__sflush_r+0x30>
 800402c:	682b      	ldr	r3, [r5, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0c4      	beq.n	8003fbc <__sflush_r+0x30>
 8004032:	2b1d      	cmp	r3, #29
 8004034:	d001      	beq.n	800403a <__sflush_r+0xae>
 8004036:	2b16      	cmp	r3, #22
 8004038:	d101      	bne.n	800403e <__sflush_r+0xb2>
 800403a:	602f      	str	r7, [r5, #0]
 800403c:	e7b2      	b.n	8003fa4 <__sflush_r+0x18>
 800403e:	89a3      	ldrh	r3, [r4, #12]
 8004040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004044:	81a3      	strh	r3, [r4, #12]
 8004046:	e7ae      	b.n	8003fa6 <__sflush_r+0x1a>
 8004048:	690f      	ldr	r7, [r1, #16]
 800404a:	2f00      	cmp	r7, #0
 800404c:	d0aa      	beq.n	8003fa4 <__sflush_r+0x18>
 800404e:	0793      	lsls	r3, r2, #30
 8004050:	bf18      	it	ne
 8004052:	2300      	movne	r3, #0
 8004054:	680e      	ldr	r6, [r1, #0]
 8004056:	bf08      	it	eq
 8004058:	694b      	ldreq	r3, [r1, #20]
 800405a:	1bf6      	subs	r6, r6, r7
 800405c:	600f      	str	r7, [r1, #0]
 800405e:	608b      	str	r3, [r1, #8]
 8004060:	2e00      	cmp	r6, #0
 8004062:	dd9f      	ble.n	8003fa4 <__sflush_r+0x18>
 8004064:	4633      	mov	r3, r6
 8004066:	463a      	mov	r2, r7
 8004068:	4628      	mov	r0, r5
 800406a:	6a21      	ldr	r1, [r4, #32]
 800406c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004070:	47e0      	blx	ip
 8004072:	2800      	cmp	r0, #0
 8004074:	dc06      	bgt.n	8004084 <__sflush_r+0xf8>
 8004076:	89a3      	ldrh	r3, [r4, #12]
 8004078:	f04f 30ff 	mov.w	r0, #4294967295
 800407c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004080:	81a3      	strh	r3, [r4, #12]
 8004082:	e790      	b.n	8003fa6 <__sflush_r+0x1a>
 8004084:	4407      	add	r7, r0
 8004086:	1a36      	subs	r6, r6, r0
 8004088:	e7ea      	b.n	8004060 <__sflush_r+0xd4>
 800408a:	bf00      	nop
 800408c:	20400001 	.word	0x20400001

08004090 <_fflush_r>:
 8004090:	b538      	push	{r3, r4, r5, lr}
 8004092:	690b      	ldr	r3, [r1, #16]
 8004094:	4605      	mov	r5, r0
 8004096:	460c      	mov	r4, r1
 8004098:	b913      	cbnz	r3, 80040a0 <_fflush_r+0x10>
 800409a:	2500      	movs	r5, #0
 800409c:	4628      	mov	r0, r5
 800409e:	bd38      	pop	{r3, r4, r5, pc}
 80040a0:	b118      	cbz	r0, 80040aa <_fflush_r+0x1a>
 80040a2:	6983      	ldr	r3, [r0, #24]
 80040a4:	b90b      	cbnz	r3, 80040aa <_fflush_r+0x1a>
 80040a6:	f7ff fbf9 	bl	800389c <__sinit>
 80040aa:	4b14      	ldr	r3, [pc, #80]	; (80040fc <_fflush_r+0x6c>)
 80040ac:	429c      	cmp	r4, r3
 80040ae:	d11b      	bne.n	80040e8 <_fflush_r+0x58>
 80040b0:	686c      	ldr	r4, [r5, #4]
 80040b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0ef      	beq.n	800409a <_fflush_r+0xa>
 80040ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80040bc:	07d0      	lsls	r0, r2, #31
 80040be:	d404      	bmi.n	80040ca <_fflush_r+0x3a>
 80040c0:	0599      	lsls	r1, r3, #22
 80040c2:	d402      	bmi.n	80040ca <_fflush_r+0x3a>
 80040c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040c6:	f7ff fcac 	bl	8003a22 <__retarget_lock_acquire_recursive>
 80040ca:	4628      	mov	r0, r5
 80040cc:	4621      	mov	r1, r4
 80040ce:	f7ff ff5d 	bl	8003f8c <__sflush_r>
 80040d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040d4:	4605      	mov	r5, r0
 80040d6:	07da      	lsls	r2, r3, #31
 80040d8:	d4e0      	bmi.n	800409c <_fflush_r+0xc>
 80040da:	89a3      	ldrh	r3, [r4, #12]
 80040dc:	059b      	lsls	r3, r3, #22
 80040de:	d4dd      	bmi.n	800409c <_fflush_r+0xc>
 80040e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040e2:	f7ff fc9f 	bl	8003a24 <__retarget_lock_release_recursive>
 80040e6:	e7d9      	b.n	800409c <_fflush_r+0xc>
 80040e8:	4b05      	ldr	r3, [pc, #20]	; (8004100 <_fflush_r+0x70>)
 80040ea:	429c      	cmp	r4, r3
 80040ec:	d101      	bne.n	80040f2 <_fflush_r+0x62>
 80040ee:	68ac      	ldr	r4, [r5, #8]
 80040f0:	e7df      	b.n	80040b2 <_fflush_r+0x22>
 80040f2:	4b04      	ldr	r3, [pc, #16]	; (8004104 <_fflush_r+0x74>)
 80040f4:	429c      	cmp	r4, r3
 80040f6:	bf08      	it	eq
 80040f8:	68ec      	ldreq	r4, [r5, #12]
 80040fa:	e7da      	b.n	80040b2 <_fflush_r+0x22>
 80040fc:	080043a8 	.word	0x080043a8
 8004100:	080043c8 	.word	0x080043c8
 8004104:	08004388 	.word	0x08004388

08004108 <_lseek_r>:
 8004108:	b538      	push	{r3, r4, r5, lr}
 800410a:	4604      	mov	r4, r0
 800410c:	4608      	mov	r0, r1
 800410e:	4611      	mov	r1, r2
 8004110:	2200      	movs	r2, #0
 8004112:	4d05      	ldr	r5, [pc, #20]	; (8004128 <_lseek_r+0x20>)
 8004114:	602a      	str	r2, [r5, #0]
 8004116:	461a      	mov	r2, r3
 8004118:	f7fc fcaf 	bl	8000a7a <_lseek>
 800411c:	1c43      	adds	r3, r0, #1
 800411e:	d102      	bne.n	8004126 <_lseek_r+0x1e>
 8004120:	682b      	ldr	r3, [r5, #0]
 8004122:	b103      	cbz	r3, 8004126 <_lseek_r+0x1e>
 8004124:	6023      	str	r3, [r4, #0]
 8004126:	bd38      	pop	{r3, r4, r5, pc}
 8004128:	20001130 	.word	0x20001130

0800412c <__swhatbuf_r>:
 800412c:	b570      	push	{r4, r5, r6, lr}
 800412e:	460e      	mov	r6, r1
 8004130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004134:	4614      	mov	r4, r2
 8004136:	2900      	cmp	r1, #0
 8004138:	461d      	mov	r5, r3
 800413a:	b096      	sub	sp, #88	; 0x58
 800413c:	da08      	bge.n	8004150 <__swhatbuf_r+0x24>
 800413e:	2200      	movs	r2, #0
 8004140:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004144:	602a      	str	r2, [r5, #0]
 8004146:	061a      	lsls	r2, r3, #24
 8004148:	d410      	bmi.n	800416c <__swhatbuf_r+0x40>
 800414a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800414e:	e00e      	b.n	800416e <__swhatbuf_r+0x42>
 8004150:	466a      	mov	r2, sp
 8004152:	f000 f8b7 	bl	80042c4 <_fstat_r>
 8004156:	2800      	cmp	r0, #0
 8004158:	dbf1      	blt.n	800413e <__swhatbuf_r+0x12>
 800415a:	9a01      	ldr	r2, [sp, #4]
 800415c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004160:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004164:	425a      	negs	r2, r3
 8004166:	415a      	adcs	r2, r3
 8004168:	602a      	str	r2, [r5, #0]
 800416a:	e7ee      	b.n	800414a <__swhatbuf_r+0x1e>
 800416c:	2340      	movs	r3, #64	; 0x40
 800416e:	2000      	movs	r0, #0
 8004170:	6023      	str	r3, [r4, #0]
 8004172:	b016      	add	sp, #88	; 0x58
 8004174:	bd70      	pop	{r4, r5, r6, pc}
	...

08004178 <__smakebuf_r>:
 8004178:	898b      	ldrh	r3, [r1, #12]
 800417a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800417c:	079d      	lsls	r5, r3, #30
 800417e:	4606      	mov	r6, r0
 8004180:	460c      	mov	r4, r1
 8004182:	d507      	bpl.n	8004194 <__smakebuf_r+0x1c>
 8004184:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004188:	6023      	str	r3, [r4, #0]
 800418a:	6123      	str	r3, [r4, #16]
 800418c:	2301      	movs	r3, #1
 800418e:	6163      	str	r3, [r4, #20]
 8004190:	b002      	add	sp, #8
 8004192:	bd70      	pop	{r4, r5, r6, pc}
 8004194:	466a      	mov	r2, sp
 8004196:	ab01      	add	r3, sp, #4
 8004198:	f7ff ffc8 	bl	800412c <__swhatbuf_r>
 800419c:	9900      	ldr	r1, [sp, #0]
 800419e:	4605      	mov	r5, r0
 80041a0:	4630      	mov	r0, r6
 80041a2:	f7ff fc69 	bl	8003a78 <_malloc_r>
 80041a6:	b948      	cbnz	r0, 80041bc <__smakebuf_r+0x44>
 80041a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041ac:	059a      	lsls	r2, r3, #22
 80041ae:	d4ef      	bmi.n	8004190 <__smakebuf_r+0x18>
 80041b0:	f023 0303 	bic.w	r3, r3, #3
 80041b4:	f043 0302 	orr.w	r3, r3, #2
 80041b8:	81a3      	strh	r3, [r4, #12]
 80041ba:	e7e3      	b.n	8004184 <__smakebuf_r+0xc>
 80041bc:	4b0d      	ldr	r3, [pc, #52]	; (80041f4 <__smakebuf_r+0x7c>)
 80041be:	62b3      	str	r3, [r6, #40]	; 0x28
 80041c0:	89a3      	ldrh	r3, [r4, #12]
 80041c2:	6020      	str	r0, [r4, #0]
 80041c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041c8:	81a3      	strh	r3, [r4, #12]
 80041ca:	9b00      	ldr	r3, [sp, #0]
 80041cc:	6120      	str	r0, [r4, #16]
 80041ce:	6163      	str	r3, [r4, #20]
 80041d0:	9b01      	ldr	r3, [sp, #4]
 80041d2:	b15b      	cbz	r3, 80041ec <__smakebuf_r+0x74>
 80041d4:	4630      	mov	r0, r6
 80041d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041da:	f000 f885 	bl	80042e8 <_isatty_r>
 80041de:	b128      	cbz	r0, 80041ec <__smakebuf_r+0x74>
 80041e0:	89a3      	ldrh	r3, [r4, #12]
 80041e2:	f023 0303 	bic.w	r3, r3, #3
 80041e6:	f043 0301 	orr.w	r3, r3, #1
 80041ea:	81a3      	strh	r3, [r4, #12]
 80041ec:	89a0      	ldrh	r0, [r4, #12]
 80041ee:	4305      	orrs	r5, r0
 80041f0:	81a5      	strh	r5, [r4, #12]
 80041f2:	e7cd      	b.n	8004190 <__smakebuf_r+0x18>
 80041f4:	08003835 	.word	0x08003835

080041f8 <__malloc_lock>:
 80041f8:	4801      	ldr	r0, [pc, #4]	; (8004200 <__malloc_lock+0x8>)
 80041fa:	f7ff bc12 	b.w	8003a22 <__retarget_lock_acquire_recursive>
 80041fe:	bf00      	nop
 8004200:	20001124 	.word	0x20001124

08004204 <__malloc_unlock>:
 8004204:	4801      	ldr	r0, [pc, #4]	; (800420c <__malloc_unlock+0x8>)
 8004206:	f7ff bc0d 	b.w	8003a24 <__retarget_lock_release_recursive>
 800420a:	bf00      	nop
 800420c:	20001124 	.word	0x20001124

08004210 <_free_r>:
 8004210:	b538      	push	{r3, r4, r5, lr}
 8004212:	4605      	mov	r5, r0
 8004214:	2900      	cmp	r1, #0
 8004216:	d040      	beq.n	800429a <_free_r+0x8a>
 8004218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800421c:	1f0c      	subs	r4, r1, #4
 800421e:	2b00      	cmp	r3, #0
 8004220:	bfb8      	it	lt
 8004222:	18e4      	addlt	r4, r4, r3
 8004224:	f7ff ffe8 	bl	80041f8 <__malloc_lock>
 8004228:	4a1c      	ldr	r2, [pc, #112]	; (800429c <_free_r+0x8c>)
 800422a:	6813      	ldr	r3, [r2, #0]
 800422c:	b933      	cbnz	r3, 800423c <_free_r+0x2c>
 800422e:	6063      	str	r3, [r4, #4]
 8004230:	6014      	str	r4, [r2, #0]
 8004232:	4628      	mov	r0, r5
 8004234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004238:	f7ff bfe4 	b.w	8004204 <__malloc_unlock>
 800423c:	42a3      	cmp	r3, r4
 800423e:	d908      	bls.n	8004252 <_free_r+0x42>
 8004240:	6820      	ldr	r0, [r4, #0]
 8004242:	1821      	adds	r1, r4, r0
 8004244:	428b      	cmp	r3, r1
 8004246:	bf01      	itttt	eq
 8004248:	6819      	ldreq	r1, [r3, #0]
 800424a:	685b      	ldreq	r3, [r3, #4]
 800424c:	1809      	addeq	r1, r1, r0
 800424e:	6021      	streq	r1, [r4, #0]
 8004250:	e7ed      	b.n	800422e <_free_r+0x1e>
 8004252:	461a      	mov	r2, r3
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	b10b      	cbz	r3, 800425c <_free_r+0x4c>
 8004258:	42a3      	cmp	r3, r4
 800425a:	d9fa      	bls.n	8004252 <_free_r+0x42>
 800425c:	6811      	ldr	r1, [r2, #0]
 800425e:	1850      	adds	r0, r2, r1
 8004260:	42a0      	cmp	r0, r4
 8004262:	d10b      	bne.n	800427c <_free_r+0x6c>
 8004264:	6820      	ldr	r0, [r4, #0]
 8004266:	4401      	add	r1, r0
 8004268:	1850      	adds	r0, r2, r1
 800426a:	4283      	cmp	r3, r0
 800426c:	6011      	str	r1, [r2, #0]
 800426e:	d1e0      	bne.n	8004232 <_free_r+0x22>
 8004270:	6818      	ldr	r0, [r3, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	4401      	add	r1, r0
 8004276:	6011      	str	r1, [r2, #0]
 8004278:	6053      	str	r3, [r2, #4]
 800427a:	e7da      	b.n	8004232 <_free_r+0x22>
 800427c:	d902      	bls.n	8004284 <_free_r+0x74>
 800427e:	230c      	movs	r3, #12
 8004280:	602b      	str	r3, [r5, #0]
 8004282:	e7d6      	b.n	8004232 <_free_r+0x22>
 8004284:	6820      	ldr	r0, [r4, #0]
 8004286:	1821      	adds	r1, r4, r0
 8004288:	428b      	cmp	r3, r1
 800428a:	bf01      	itttt	eq
 800428c:	6819      	ldreq	r1, [r3, #0]
 800428e:	685b      	ldreq	r3, [r3, #4]
 8004290:	1809      	addeq	r1, r1, r0
 8004292:	6021      	streq	r1, [r4, #0]
 8004294:	6063      	str	r3, [r4, #4]
 8004296:	6054      	str	r4, [r2, #4]
 8004298:	e7cb      	b.n	8004232 <_free_r+0x22>
 800429a:	bd38      	pop	{r3, r4, r5, pc}
 800429c:	20001128 	.word	0x20001128

080042a0 <_read_r>:
 80042a0:	b538      	push	{r3, r4, r5, lr}
 80042a2:	4604      	mov	r4, r0
 80042a4:	4608      	mov	r0, r1
 80042a6:	4611      	mov	r1, r2
 80042a8:	2200      	movs	r2, #0
 80042aa:	4d05      	ldr	r5, [pc, #20]	; (80042c0 <_read_r+0x20>)
 80042ac:	602a      	str	r2, [r5, #0]
 80042ae:	461a      	mov	r2, r3
 80042b0:	f7fc fba2 	bl	80009f8 <_read>
 80042b4:	1c43      	adds	r3, r0, #1
 80042b6:	d102      	bne.n	80042be <_read_r+0x1e>
 80042b8:	682b      	ldr	r3, [r5, #0]
 80042ba:	b103      	cbz	r3, 80042be <_read_r+0x1e>
 80042bc:	6023      	str	r3, [r4, #0]
 80042be:	bd38      	pop	{r3, r4, r5, pc}
 80042c0:	20001130 	.word	0x20001130

080042c4 <_fstat_r>:
 80042c4:	b538      	push	{r3, r4, r5, lr}
 80042c6:	2300      	movs	r3, #0
 80042c8:	4d06      	ldr	r5, [pc, #24]	; (80042e4 <_fstat_r+0x20>)
 80042ca:	4604      	mov	r4, r0
 80042cc:	4608      	mov	r0, r1
 80042ce:	4611      	mov	r1, r2
 80042d0:	602b      	str	r3, [r5, #0]
 80042d2:	f7fc fbb9 	bl	8000a48 <_fstat>
 80042d6:	1c43      	adds	r3, r0, #1
 80042d8:	d102      	bne.n	80042e0 <_fstat_r+0x1c>
 80042da:	682b      	ldr	r3, [r5, #0]
 80042dc:	b103      	cbz	r3, 80042e0 <_fstat_r+0x1c>
 80042de:	6023      	str	r3, [r4, #0]
 80042e0:	bd38      	pop	{r3, r4, r5, pc}
 80042e2:	bf00      	nop
 80042e4:	20001130 	.word	0x20001130

080042e8 <_isatty_r>:
 80042e8:	b538      	push	{r3, r4, r5, lr}
 80042ea:	2300      	movs	r3, #0
 80042ec:	4d05      	ldr	r5, [pc, #20]	; (8004304 <_isatty_r+0x1c>)
 80042ee:	4604      	mov	r4, r0
 80042f0:	4608      	mov	r0, r1
 80042f2:	602b      	str	r3, [r5, #0]
 80042f4:	f7fc fbb7 	bl	8000a66 <_isatty>
 80042f8:	1c43      	adds	r3, r0, #1
 80042fa:	d102      	bne.n	8004302 <_isatty_r+0x1a>
 80042fc:	682b      	ldr	r3, [r5, #0]
 80042fe:	b103      	cbz	r3, 8004302 <_isatty_r+0x1a>
 8004300:	6023      	str	r3, [r4, #0]
 8004302:	bd38      	pop	{r3, r4, r5, pc}
 8004304:	20001130 	.word	0x20001130

08004308 <_init>:
 8004308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430a:	bf00      	nop
 800430c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800430e:	bc08      	pop	{r3}
 8004310:	469e      	mov	lr, r3
 8004312:	4770      	bx	lr

08004314 <_fini>:
 8004314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004316:	bf00      	nop
 8004318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800431a:	bc08      	pop	{r3}
 800431c:	469e      	mov	lr, r3
 800431e:	4770      	bx	lr
